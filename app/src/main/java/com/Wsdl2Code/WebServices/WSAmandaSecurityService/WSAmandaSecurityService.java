package com.Wsdl2Code.WebServices.WSAmandaSecurityService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/23/2016 8:43:57 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaSecurityService.WS_Enums.*;
import com.Wsdl2Code.WebServices.WSAmandaSecurityService.string;

import java.net.Proxy;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import android.util.Log;

import org.ksoap2.serialization.MarshalFloat;

import sethi.kumar.hemendra.st.constants.SOAPConstants;

public class WSAmandaSecurityService {
    
    public String NAMESPACE ="http://webservice.amanda.csdcsystems.com";
    public String url= SOAPConstants.SECURITYURL;//"";
    public int timeOut = 18000;
    public IWsdl2CodeEvents eventHandler;
    public string system;
    public SoapProtocolVersion soapVersion;
    
    public WSAmandaSecurityService(){}
    
    public WSAmandaSecurityService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public WSAmandaSecurityService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public WSAmandaSecurityService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void echoAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        echoAsync(null);
    }
    
    public void echoAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected String doInBackground(Void... params) {
                return echo(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("echo", result);
                }
            }
        }.execute();
    }
    
    public String echo(){
        return echo(null);
    }
    
    public String echo(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        //soapEnvelope.setAddAdornments(false);
        SoapObject soapReq = new SoapObject(SOAPConstants.NAMESPACE,SOAPConstants.METHODNAME_STRING);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(Proxy.NO_PROXY,url,timeOut);
        //httpTransport.debug = true;
        //httpTransport.setXmlVersionTag(SOAPConstants.XML_VERSION_TAG);
        try{
            if (headers!=null){
                httpTransport.call("urn:echo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:echo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                Log.d("WSAmandaSecurty", "echo: call pare asuchi............");
                SoapObject result=(SoapObject)retObj;
                Log.d("WSAmandaSecurty", "echo:result "+ result.getPropertyCount());
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        Log.d("WSAmandaSecurty", "echo:Object not null : "+ result.getPropertyCount());
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        Log.d("WSAmandaSecurty", "echo:result "+ result.getPropertyCount()+"  resultVariable:"+resultVariable);
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void logOffAsync(String lid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        logOffAsync(lid, null);
    }
    
    public void logOffAsync(final String lid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected Boolean doInBackground(Void... params) {
                return logOff(lid, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("logOff", result);
                }
            }
        }.execute();
    }
    
    public boolean logOff(String lid){
        return logOff(lid, null);
    }
    
    public boolean logOff(String lid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","logOff");
        soapReq.addProperty("lid",lid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:logOff", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:logOff", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void validateTokenAsync(String lid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        validateTokenAsync(lid, null);
    }
    
    public void validateTokenAsync(final String lid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsToken>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected wsToken doInBackground(Void... params) {
                return validateToken(lid, headers);
            }
            @Override
            protected void onPostExecute(wsToken result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("validateToken", result);
                }
            }
        }.execute();
    }
    
    public wsToken validateToken(String lid){
        return validateToken(lid, null);
    }
    
    public wsToken validateToken(String lid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","validateToken");
        soapReq.addProperty("lid",lid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:validateToken", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:validateToken", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsToken resultVariable =  new wsToken (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getConnectionCachesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getConnectionCachesAsync(null);
    }
    
    public void getConnectionCachesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsConnectionCache>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected VectorwsConnectionCache doInBackground(Void... params) {
                return getConnectionCaches(headers);
            }
            @Override
            protected void onPostExecute(VectorwsConnectionCache result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getConnectionCaches", result);
                }
            }
        }.execute();
    }
    
    public VectorwsConnectionCache getConnectionCaches(){
        return getConnectionCaches(null);
    }
    
    public VectorwsConnectionCache getConnectionCaches(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getConnectionCaches");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getConnectionCaches", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getConnectionCaches", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsConnectionCache resultVariable = new VectorwsConnectionCache(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void authenticateUserAsync(String username,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        authenticateUserAsync(username, password, null);
    }
    
    public void authenticateUserAsync(final String username,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsAuthToken>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected wsAuthToken doInBackground(Void... params) {
                return authenticateUser(username, password, headers);
            }
            @Override
            protected void onPostExecute(wsAuthToken result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("authenticateUser", result);
                }
            }
        }.execute();
    }
    
    public wsAuthToken authenticateUser(String username,String password){
        return authenticateUser(username, password, null);
    }
    
    public wsAuthToken authenticateUser(String username,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","authenticateUser");
        soapReq.addProperty("username",username);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:authenticateUser", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:authenticateUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsAuthToken resultVariable =  new wsAuthToken (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void authenticatePublicUserAsync(String username,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        authenticatePublicUserAsync(username, password, null);
    }
    
    public void authenticatePublicUserAsync(final String username,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPublicLoginToken>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected wsPublicLoginToken doInBackground(Void... params) {
                return authenticatePublicUser(username, password, headers);
            }
            @Override
            protected void onPostExecute(wsPublicLoginToken result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("authenticatePublicUser", result);
                }
            }
        }.execute();
    }
    
    public wsPublicLoginToken authenticatePublicUser(String username,String password){
        return authenticatePublicUser(username, password, null);
    }
    
    public wsPublicLoginToken authenticatePublicUser(String username,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","authenticatePublicUser");
        soapReq.addProperty("username",username);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:authenticatePublicUser", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:authenticatePublicUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPublicLoginToken resultVariable =  new wsPublicLoginToken (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
