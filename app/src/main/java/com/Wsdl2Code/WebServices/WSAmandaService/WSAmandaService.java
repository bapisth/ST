package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.WS_Enums.*;

import java.net.Proxy;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalBase64;
import org.ksoap2.serialization.MarshalDate;
import org.ksoap2.serialization.MarshalHashtable;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import android.util.Log;

import org.ksoap2.serialization.MarshalFloat;

import sethi.kumar.hemendra.st.constants.SOAPConstants;
import sethi.kumar.hemendra.st.marshaller.CustomMarshal;

public class WSAmandaService {
    
    public String NAMESPACE ="http://webservice.amanda.csdcsystems.com";
    public String url= SOAPConstants.SERVICEURL;//"https://play.csdcsystems.com/axis/services/WSAmandaService";
    public int timeOut = 18000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public WSAmandaService(){}
    
    public WSAmandaService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public WSAmandaService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public WSAmandaService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void getFolderByFreeFormAsync(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderByFreeFormAsync(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, null);
    }
    
    public void getFolderByFreeFormAsync(final int freeFormCode,final boolean freeFormCodeSpecified,final String freeFormColumn,final String freeFormValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return getFolderByFreeForm(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderByFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder getFolderByFreeForm(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue){
        return getFolderByFreeForm(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, null);
    }
    
    public VectorwsFolder getFolderByFreeForm(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderByFreeForm");
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapReq.addProperty("freeFormCodeSpecified",freeFormCodeSpecified);
        soapReq.addProperty("freeFormColumn",freeFormColumn);
        soapReq.addProperty("freeFormValue",freeFormValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderByFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderByFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleFreeFormByCodeAsync(int peopleRSN,boolean peopleRSNSpecified,VectorInt32 freeFormCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleFreeFormByCodeAsync(peopleRSN, peopleRSNSpecified, freeFormCode, null);
    }
    
    public void getPeopleFreeFormByCodeAsync(final int peopleRSN,final boolean peopleRSNSpecified,final VectorInt32 freeFormCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeopleFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeopleFreeform doInBackground(Void... params) {
                return getPeopleFreeFormByCode(peopleRSN, peopleRSNSpecified, freeFormCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeopleFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleFreeFormByCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeopleFreeform getPeopleFreeFormByCode(int peopleRSN,boolean peopleRSNSpecified,VectorInt32 freeFormCode){
        return getPeopleFreeFormByCode(peopleRSN, peopleRSNSpecified, freeFormCode, null);
    }
    
    public VectorwsPeopleFreeform getPeopleFreeFormByCode(int peopleRSN,boolean peopleRSNSpecified,VectorInt32 freeFormCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleFreeFormByCode");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleFreeFormByCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleFreeFormByCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeopleFreeform resultVariable = new VectorwsPeopleFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getPeopleAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPeople>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsPeople doInBackground(Void... params) {
                return getPeople(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsPeople result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeople", result);
                }
            }
        }.execute();
    }
    
    public wsPeople getPeople(int peopleRSN,boolean peopleRSNSpecified){
        return getPeople(peopleRSN, peopleRSNSpecified, null);
    }
    
    public wsPeople getPeople(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject(SOAPConstants.NAMESPACE,"getPeople");
        soapReq.addProperty("peopleRSN",peopleRSN);
        //soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(Proxy.NO_PROXY, url,timeOut);
        httpTransport.debug = true;
        Log.d("WSAmandaService", "getPeople: Request Dump : "+httpTransport.requestDump);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPeople resultVariable =  new wsPeople (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchFolderAttachmentAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchFolderAttachmentAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchFolderAttachmentAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return searchFolderAttachment(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment searchFolderAttachment(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchFolderAttachment(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsAttachment searchFolderAttachment(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchFolderAttachment");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderSubByFolderTypeAsync(String folderType,String webDisplayFlag) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderSubByFolderTypeAsync(folderType, webDisplayFlag, null);
    }
    
    public void getFolderSubByFolderTypeAsync(final String folderType,final String webDisplayFlag,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidSub>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidSub doInBackground(Void... params) {
                return getFolderSubByFolderType(folderType, webDisplayFlag, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidSub result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderSubByFolderType", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidSub getFolderSubByFolderType(String folderType,String webDisplayFlag){
        return getFolderSubByFolderType(folderType, webDisplayFlag, null);
    }
    
    public VectorwsValidSub getFolderSubByFolderType(String folderType,String webDisplayFlag,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderSubByFolderType");
        soapReq.addProperty("folderType",folderType);
        soapReq.addProperty("webDisplayFlag",webDisplayFlag);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderSubByFolderType", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderSubByFolderType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidSub resultVariable = new VectorwsValidSub(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleFreeFormAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleFreeFormAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getPeopleFreeFormAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeopleFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeopleFreeform doInBackground(Void... params) {
                return getPeopleFreeForm(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeopleFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeopleFreeform getPeopleFreeForm(int peopleRSN,boolean peopleRSNSpecified){
        return getPeopleFreeForm(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsPeopleFreeform getPeopleFreeForm(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleFreeForm");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeopleFreeform resultVariable = new VectorwsPeopleFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderAttachmentAsync(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderAttachmentAsync(folderRSN, folderRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void updateFolderAttachmentAsync(final int folderRSN,final boolean folderRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderAttachment(folderRSN, folderRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderAttachment(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return updateFolderAttachment(folderRSN, folderRSNSpecified, attachment, attachmentContent, null);
    }
    
    public boolean updateFolderAttachment(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void updatePeopleInfoAsync(int peopleRSN,boolean peopleRSNSpecified,VectorwsPeopleInfo peopleInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleInfoAsync(peopleRSN, peopleRSNSpecified, peopleInfo, null);
    }
    
    public void updatePeopleInfoAsync(final int peopleRSN,final boolean peopleRSNSpecified,final VectorwsPeopleInfo peopleInfo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeopleInfo(peopleRSN, peopleRSNSpecified, peopleInfo, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeopleInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeopleInfo(int peopleRSN,boolean peopleRSNSpecified,VectorwsPeopleInfo peopleInfo){
        return updatePeopleInfo(peopleRSN, peopleRSNSpecified, peopleInfo, null);
    }
    
    public boolean updatePeopleInfo(int peopleRSN,boolean peopleRSNSpecified,VectorwsPeopleInfo peopleInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeopleInfo");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("peopleInfo",peopleInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeopleInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeopleInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addFoiFolderAsync(wsFoiFolder argFolderFOI) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFoiFolderAsync(argFolderFOI, null);
    }
    
    public void addFoiFolderAsync(final wsFoiFolder argFolderFOI,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addFoiFolder(argFolderFOI, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFoiFolder", result);
                }
            }
        }.execute();
    }
    
    public int addFoiFolder(wsFoiFolder argFolderFOI){
        return addFoiFolder(argFolderFOI, null);
    }
    
    public int addFoiFolder(wsFoiFolder argFolderFOI,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFoiFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOI",new wsFoiFolder().getClass());
        soapReq.addProperty("argFolderFOI",argFolderFOI);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFoiFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFoiFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getFolderProcessAttemptsAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderProcessAttemptsAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getFolderProcessAttemptsAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessAttempt>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessAttempt doInBackground(Void... params) {
                return getFolderProcessAttempts(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessAttempt result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderProcessAttempts", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessAttempt getFolderProcessAttempts(int processRSN,boolean processRSNSpecified){
        return getFolderProcessAttempts(processRSN, processRSNSpecified, null);
    }
    
    public VectorwsFolderProcessAttempt getFolderProcessAttempts(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderProcessAttempts");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderProcessAttempts", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderProcessAttempts", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessAttempt resultVariable = new VectorwsFolderProcessAttempt(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addAttachmentInfoAsync(VectorwsAttachmentInfo attachmentInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addAttachmentInfoAsync(attachmentInfo, null);
    }
    
    public void addAttachmentInfoAsync(final VectorwsAttachmentInfo attachmentInfo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachmentInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachmentInfo doInBackground(Void... params) {
                return addAttachmentInfo(attachmentInfo, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachmentInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addAttachmentInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachmentInfo addAttachmentInfo(VectorwsAttachmentInfo attachmentInfo){
        return addAttachmentInfo(attachmentInfo, null);
    }
    
    public VectorwsAttachmentInfo addAttachmentInfo(VectorwsAttachmentInfo attachmentInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addAttachmentInfo");
        soapReq.addProperty("attachmentInfo",attachmentInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addAttachmentInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addAttachmentInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachmentInfo resultVariable = new VectorwsAttachmentInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addInspectionRequestAsync(VectorwsFolderInspectionRequest folderInspectionRequests) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addInspectionRequestAsync(folderInspectionRequests, null);
    }
    
    public void addInspectionRequestAsync(final VectorwsFolderInspectionRequest folderInspectionRequests,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                addInspectionRequest(folderInspectionRequests, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addInspectionRequest", result);
                }
            }
        }.execute();
    }
    
    public void addInspectionRequest(VectorwsFolderInspectionRequest folderInspectionRequests){
        addInspectionRequest(folderInspectionRequests, null);
    }
    
    public void addInspectionRequest(VectorwsFolderInspectionRequest folderInspectionRequests,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addInspectionRequest");
        soapReq.addProperty("folderInspectionRequests",folderInspectionRequests);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addInspectionRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addInspectionRequest", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deletePeopleGroupMemberAsync(int groupRSN,boolean groupRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,String rowID) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deletePeopleGroupMemberAsync(groupRSN, groupRSNSpecified, peopleRSN, peopleRSNSpecified, rowID, null);
    }
    
    public void deletePeopleGroupMemberAsync(final int groupRSN,final boolean groupRSNSpecified,final int peopleRSN,final boolean peopleRSNSpecified,final String rowID,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deletePeopleGroupMember(groupRSN, groupRSNSpecified, peopleRSN, peopleRSNSpecified, rowID, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deletePeopleGroupMember", result);
                }
            }
        }.execute();
    }
    
    public boolean deletePeopleGroupMember(int groupRSN,boolean groupRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,String rowID){
        return deletePeopleGroupMember(groupRSN, groupRSNSpecified, peopleRSN, peopleRSNSpecified, rowID, null);
    }
    
    public boolean deletePeopleGroupMember(int groupRSN,boolean groupRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,String rowID,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deletePeopleGroupMember");
        soapReq.addProperty("groupRSN",groupRSN);
        soapReq.addProperty("groupRSNSpecified",groupRSNSpecified);
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("rowID",rowID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deletePeopleGroupMember", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deletePeopleGroupMember", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidFolderStatusesByFolderTypesAsync(String folderType) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFolderStatusesByFolderTypesAsync(folderType, null);
    }
    
    public void getValidFolderStatusesByFolderTypesAsync(final String folderType,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderStatus>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderStatus doInBackground(Void... params) {
                return getValidFolderStatusesByFolderTypes(folderType, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderStatus result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFolderStatusesByFolderTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderStatus getValidFolderStatusesByFolderTypes(String folderType){
        return getValidFolderStatusesByFolderTypes(folderType, null);
    }
    
    public VectorwsValidFolderStatus getValidFolderStatusesByFolderTypes(String folderType,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFolderStatusesByFolderTypes");
        soapReq.addProperty("folderType",folderType);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFolderStatusesByFolderTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFolderStatusesByFolderTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderStatus resultVariable = new VectorwsValidFolderStatus(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchPeopleCountAsync(VectorwsSearchCriteria criteria) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchPeopleCountAsync(criteria, null);
    }
    
    public void searchPeopleCountAsync(final VectorwsSearchCriteria criteria,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return searchPeopleCount(criteria, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchPeopleCount", result);
                }
            }
        }.execute();
    }
    
    public int searchPeopleCount(VectorwsSearchCriteria criteria){
        return searchPeopleCount(criteria, null);
    }
    
    public int searchPeopleCount(VectorwsSearchCriteria criteria,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchPeopleCount");
        soapReq.addProperty("criteria",criteria);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchPeopleCount", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchPeopleCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void findWebPaymentLogByLogRSNAsync(int arg0,boolean arg0Specified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        findWebPaymentLogByLogRSNAsync(arg0, arg0Specified, null);
    }
    
    public void findWebPaymentLogByLogRSNAsync(final int arg0,final boolean arg0Specified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, webPaymentLogRecord>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected webPaymentLogRecord doInBackground(Void... params) {
                return findWebPaymentLogByLogRSN(arg0, arg0Specified, headers);
            }
            @Override
            protected void onPostExecute(webPaymentLogRecord result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("findWebPaymentLogByLogRSN", result);
                }
            }
        }.execute();
    }
    
    public webPaymentLogRecord findWebPaymentLogByLogRSN(int arg0,boolean arg0Specified){
        return findWebPaymentLogByLogRSN(arg0, arg0Specified, null);
    }
    
    public webPaymentLogRecord findWebPaymentLogByLogRSN(int arg0,boolean arg0Specified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","findWebPaymentLogByLogRSN");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg0Specified",arg0Specified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:findWebPaymentLogByLogRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:findWebPaymentLogByLogRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    webPaymentLogRecord resultVariable =  new webPaymentLogRecord (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePeopleInternetPasswordAsync(int peopleRSN,boolean peopleRSNSpecified,String internetPassword) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleInternetPasswordAsync(peopleRSN, peopleRSNSpecified, internetPassword, null);
    }
    
    public void updatePeopleInternetPasswordAsync(final int peopleRSN,final boolean peopleRSNSpecified,final String internetPassword,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeopleInternetPassword(peopleRSN, peopleRSNSpecified, internetPassword, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeopleInternetPassword", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeopleInternetPassword(int peopleRSN,boolean peopleRSNSpecified,String internetPassword){
        return updatePeopleInternetPassword(peopleRSN, peopleRSNSpecified, internetPassword, null);
    }
    
    public boolean updatePeopleInternetPassword(int peopleRSN,boolean peopleRSNSpecified,String internetPassword,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeopleInternetPassword");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("internetPassword",internetPassword);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeopleInternetPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeopleInternetPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addWebPaymentLogAsync(VectorwsWebPaymentLog wsWebPaymentLog) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addWebPaymentLogAsync(wsWebPaymentLog, null);
    }
    
    public void addWebPaymentLogAsync(final VectorwsWebPaymentLog wsWebPaymentLog,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsWebPaymentLog>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsWebPaymentLog doInBackground(Void... params) {
                return addWebPaymentLog(wsWebPaymentLog, headers);
            }
            @Override
            protected void onPostExecute(VectorwsWebPaymentLog result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addWebPaymentLog", result);
                }
            }
        }.execute();
    }
    
    public VectorwsWebPaymentLog addWebPaymentLog(VectorwsWebPaymentLog wsWebPaymentLog){
        return addWebPaymentLog(wsWebPaymentLog, null);
    }
    
    public VectorwsWebPaymentLog addWebPaymentLog(VectorwsWebPaymentLog wsWebPaymentLog,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addWebPaymentLog");
        soapReq.addProperty("wsWebPaymentLog",wsWebPaymentLog);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addWebPaymentLog", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addWebPaymentLog", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsWebPaymentLog resultVariable = new VectorwsWebPaymentLog(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void echoAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        echoAsync(null);
    }
    
    public void echoAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return echo(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("echo", result);
                }
            }
        }.execute();
    }
    
    public String echo(){
        return echo(null);
    }
    
    public String echo(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","echo");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:echo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:echo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getFolderCommentsAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderCommentsAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderCommentsAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderComment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderComment doInBackground(Void... params) {
                return getFolderComments(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderComment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderComments", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderComment getFolderComments(int folderRSN,boolean folderRSNSpecified){
        return getFolderComments(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderComment getFolderComments(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderComments");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderComments", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderComments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderComment resultVariable = new VectorwsFolderComment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidVehicleColoursAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidVehicleColoursAsync(null);
    }
    
    public void getValidVehicleColoursAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidVehicleColour>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidVehicleColour doInBackground(Void... params) {
                return getValidVehicleColours(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidVehicleColour result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidVehicleColours", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidVehicleColour getValidVehicleColours(){
        return getValidVehicleColours(null);
    }
    
    public VectorwsValidVehicleColour getValidVehicleColours(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidVehicleColours");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidVehicleColours", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidVehicleColours", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidVehicleColour resultVariable = new VectorwsValidVehicleColour(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidProcessAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidProcessAsync(null);
    }
    
    public void getValidProcessAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidProcess doInBackground(Void... params) {
                return getValidProcess(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidProcess getValidProcess(){
        return getValidProcess(null);
    }
    
    public VectorwsValidProcess getValidProcess(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidProcess");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidProcess resultVariable = new VectorwsValidProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidInfoByInfoCodeAsync(int infoCode,boolean infoCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidInfoByInfoCodeAsync(infoCode, infoCodeSpecified, null);
    }
    
    public void getValidInfoByInfoCodeAsync(final int infoCode,final boolean infoCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsValidInfo doInBackground(Void... params) {
                return getValidInfoByInfoCode(infoCode, infoCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public wsValidInfo getValidInfoByInfoCode(int infoCode,boolean infoCodeSpecified){
        return getValidInfoByInfoCode(infoCode, infoCodeSpecified, null);
    }
    
    public wsValidInfo getValidInfoByInfoCode(int infoCode,boolean infoCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidInfoByInfoCode");
        soapReq.addProperty("infoCode",infoCode);
        soapReq.addProperty("infoCodeSpecified",infoCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsValidInfo resultVariable =  new wsValidInfo (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessFreeFormByCodeAsync(int processRSN,boolean processRSNSpecified,VectorInt32 freeFormCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessFreeFormByCodeAsync(processRSN, processRSNSpecified, freeFormCode, null);
    }
    
    public void getProcessFreeFormByCodeAsync(final int processRSN,final boolean processRSNSpecified,final VectorInt32 freeFormCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProcessFreeForm>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProcessFreeForm doInBackground(Void... params) {
                return getProcessFreeFormByCode(processRSN, processRSNSpecified, freeFormCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProcessFreeForm result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessFreeFormByCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProcessFreeForm getProcessFreeFormByCode(int processRSN,boolean processRSNSpecified,VectorInt32 freeFormCode){
        return getProcessFreeFormByCode(processRSN, processRSNSpecified, freeFormCode, null);
    }
    
    public VectorwsProcessFreeForm getProcessFreeFormByCode(int processRSN,boolean processRSNSpecified,VectorInt32 freeFormCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessFreeFormByCode");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessFreeFormByCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessFreeFormByCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProcessFreeForm resultVariable = new VectorwsProcessFreeForm(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getCheckListAsync(VectorInt32 processRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getCheckListAsync(processRSN, null);
    }
    
    public void getCheckListAsync(final VectorInt32 processRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessChecklist>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessChecklist doInBackground(Void... params) {
                return getCheckList(processRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessChecklist result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getCheckList", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessChecklist getCheckList(VectorInt32 processRSN){
        return getCheckList(processRSN, null);
    }
    
    public VectorwsFolderProcessChecklist getCheckList(VectorInt32 processRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getCheckList");
        soapReq.addProperty("processRSN",processRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getCheckList", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getCheckList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessChecklist resultVariable = new VectorwsFolderProcessChecklist(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidStreetDirectionsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidStreetDirectionsAsync(null);
    }
    
    public void getValidStreetDirectionsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidStreetDirection>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidStreetDirection doInBackground(Void... params) {
                return getValidStreetDirections(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidStreetDirection result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidStreetDirections", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidStreetDirection getValidStreetDirections(){
        return getValidStreetDirections(null);
    }
    
    public VectorwsValidStreetDirection getValidStreetDirections(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidStreetDirections");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidStreetDirections", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidStreetDirections", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidStreetDirection resultVariable = new VectorwsValidStreetDirection(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderAttachmentAsync(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayOptionFlag displayOptions,VectorInt32 attachmentStatusCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderAttachmentAsync(folderRSN, folderRSNSpecified, displayOptions, attachmentStatusCode, null);
    }
    
    public void getFolderAttachmentAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsDisplayOptionFlag displayOptions,final VectorInt32 attachmentStatusCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return getFolderAttachment(folderRSN, folderRSNSpecified, displayOptions, attachmentStatusCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment getFolderAttachment(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayOptionFlag displayOptions,VectorInt32 attachmentStatusCode){
        return getFolderAttachment(folderRSN, folderRSNSpecified, displayOptions, attachmentStatusCode, null);
    }
    
    public VectorwsAttachment getFolderAttachment(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayOptionFlag displayOptions,VectorInt32 attachmentStatusCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderAttachment");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("displayOptions",displayOptions);
        soapReq.addProperty("attachmentStatusCode",attachmentStatusCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderCommentAsync(wsFolderComment wsFolderComment) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderCommentAsync(wsFolderComment, null);
    }
    
    public void addFolderCommentAsync(final wsFolderComment wsFolderComment,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolderComment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolderComment doInBackground(Void... params) {
                return addFolderComment(wsFolderComment, headers);
            }
            @Override
            protected void onPostExecute(wsFolderComment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderComment", result);
                }
            }
        }.execute();
    }
    
    public wsFolderComment addFolderComment(wsFolderComment wsFolderComment){
        return addFolderComment(wsFolderComment, null);
    }
    
    public wsFolderComment addFolderComment(wsFolderComment wsFolderComment,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderComment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsFolderComment",new wsFolderComment().getClass());
        soapReq.addProperty("wsFolderComment",wsFolderComment);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderComment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderComment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolderComment resultVariable =  new wsFolderComment (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchFolderProcessAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchFolderProcessAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchFolderProcessAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return searchFolderProcess(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchFolderProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess searchFolderProcess(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchFolderProcess(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsFolderProcess searchFolderProcess(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchFolderProcess");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchFolderProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchFolderProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderDocumentAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderDocumentAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderDocumentAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderDocument>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderDocument doInBackground(Void... params) {
                return getFolderDocument(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderDocument result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderDocument", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderDocument getFolderDocument(int folderRSN,boolean folderRSNSpecified){
        return getFolderDocument(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderDocument getFolderDocument(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderDocument");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderDocument", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderDocument", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderDocument resultVariable = new VectorwsFolderDocument(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFoiCorrectionFolderAsync(wsFoiCorrectionFolder argFolderFOICorrection) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFoiCorrectionFolderAsync(argFolderFOICorrection, null);
    }
    
    public void addFoiCorrectionFolderAsync(final wsFoiCorrectionFolder argFolderFOICorrection,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFoiCorrectionFolder(argFolderFOICorrection, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFoiCorrectionFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean addFoiCorrectionFolder(wsFoiCorrectionFolder argFolderFOICorrection){
        return addFoiCorrectionFolder(argFolderFOICorrection, null);
    }
    
    public boolean addFoiCorrectionFolder(wsFoiCorrectionFolder argFolderFOICorrection,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFoiCorrectionFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOICorrection",new wsFoiCorrectionFolder().getClass());
        soapReq.addProperty("argFolderFOICorrection",argFolderFOICorrection);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFoiCorrectionFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFoiCorrectionFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderPeopleAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderPeopleAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderPeopleAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeople>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeople doInBackground(Void... params) {
                return getFolderPeople(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeople result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderPeople", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeople getFolderPeople(int folderRSN,boolean folderRSNSpecified){
        return getFolderPeople(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsPeople getFolderPeople(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderPeople");
        soapReq.addProperty("folderRSN",folderRSN);
        //soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        httpTransport.debug = true;
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeople resultVariable = new VectorwsPeople(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchReleasePackagesAsync(wsFoiReleasePackageFolder searchArg) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchReleasePackagesAsync(searchArg, null);
    }
    
    public void searchReleasePackagesAsync(final wsFoiReleasePackageFolder searchArg,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFoiReleasePackageFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFoiReleasePackageFolder doInBackground(Void... params) {
                return searchReleasePackages(searchArg, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFoiReleasePackageFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchReleasePackages", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFoiReleasePackageFolder searchReleasePackages(wsFoiReleasePackageFolder searchArg){
        return searchReleasePackages(searchArg, null);
    }
    
    public VectorwsFoiReleasePackageFolder searchReleasePackages(wsFoiReleasePackageFolder searchArg,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchReleasePackages");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","searchArg",new wsFoiReleasePackageFolder().getClass());
        soapReq.addProperty("searchArg",searchArg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchReleasePackages", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchReleasePackages", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFoiReleasePackageFolder resultVariable = new VectorwsFoiReleasePackageFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleAttachmentAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleAttachmentAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getPeopleAttachmentAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return getPeopleAttachment(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment getPeopleAttachment(int peopleRSN,boolean peopleRSNSpecified){
        return getPeopleAttachment(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsAttachment getPeopleAttachment(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleAttachment");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addDeficiencyAsync(VectorwsFolderProcessDeficiency folderProcessDeficiency) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addDeficiencyAsync(folderProcessDeficiency, null);
    }
    
    public void addDeficiencyAsync(final VectorwsFolderProcessDeficiency folderProcessDeficiency,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessDeficiency>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessDeficiency doInBackground(Void... params) {
                return addDeficiency(folderProcessDeficiency, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessDeficiency result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addDeficiency", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessDeficiency addDeficiency(VectorwsFolderProcessDeficiency folderProcessDeficiency){
        return addDeficiency(folderProcessDeficiency, null);
    }
    
    public VectorwsFolderProcessDeficiency addDeficiency(VectorwsFolderProcessDeficiency folderProcessDeficiency,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addDeficiency");
        soapReq.addProperty("folderProcessDeficiency",folderProcessDeficiency);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addDeficiency", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addDeficiency", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessDeficiency resultVariable = new VectorwsFolderProcessDeficiency(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addRenewFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addRenewFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void addRenewFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return addRenewFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addRenewFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder addRenewFolder(int folderRSN,boolean folderRSNSpecified){
        return addRenewFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolder addRenewFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addRenewFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addRenewFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addRenewFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessInfoByInfoCodeAsync(int processRSN,boolean processRSNSpecified,VectorInt32 infoCodes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessInfoByInfoCodeAsync(processRSN, processRSNSpecified, infoCodes, null);
    }
    
    public void getProcessInfoByInfoCodeAsync(final int processRSN,final boolean processRSNSpecified,final VectorInt32 infoCodes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessInfo doInBackground(Void... params) {
                return getProcessInfoByInfoCode(processRSN, processRSNSpecified, infoCodes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessInfo getProcessInfoByInfoCode(int processRSN,boolean processRSNSpecified,VectorInt32 infoCodes){
        return getProcessInfoByInfoCode(processRSN, processRSNSpecified, infoCodes, null);
    }
    
    public VectorwsFolderProcessInfo getProcessInfoByInfoCode(int processRSN,boolean processRSNSpecified,VectorInt32 infoCodes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessInfoByInfoCode");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("infoCodes",infoCodes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessInfo resultVariable = new VectorwsFolderProcessInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessAttachmentAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessAttachmentAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getProcessAttachmentAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return getProcessAttachment(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment getProcessAttachment(int processRSN,boolean processRSNSpecified){
        return getProcessAttachment(processRSN, processRSNSpecified, null);
    }
    
    public VectorwsAttachment getProcessAttachment(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessAttachment");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidLookupAsync(int lookupCode,boolean lookupCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidLookupAsync(lookupCode, lookupCodeSpecified, null);
    }
    
    public void getValidLookupAsync(final int lookupCode,final boolean lookupCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidLookup>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidLookup doInBackground(Void... params) {
                return getValidLookup(lookupCode, lookupCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidLookup result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidLookup", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidLookup getValidLookup(int lookupCode,boolean lookupCodeSpecified){
        return getValidLookup(lookupCode, lookupCodeSpecified, null);
    }
    
    public VectorwsValidLookup getValidLookup(int lookupCode,boolean lookupCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidLookup");
        soapReq.addProperty("lookupCode",lookupCode);
        soapReq.addProperty("lookupCodeSpecified",lookupCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidLookup", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidLookup", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidLookup resultVariable = new VectorwsValidLookup(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void sendEmailWithAttachmentByContentAsync(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorObject wSAttachmentDetail,String body) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendEmailWithAttachmentByContentAsync(toEmail, fromEmail, ccEmail, bccEmail, subject, wSAttachmentDetail, body, null);
    }
    
    public void sendEmailWithAttachmentByContentAsync(final String toEmail,final String fromEmail,final String ccEmail,final String bccEmail,final String subject,final VectorObject wSAttachmentDetail,final String body,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return sendEmailWithAttachmentByContent(toEmail, fromEmail, ccEmail, bccEmail, subject, wSAttachmentDetail, body, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendEmailWithAttachmentByContent", result);
                }
            }
        }.execute();
    }
    
    public boolean sendEmailWithAttachmentByContent(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorObject wSAttachmentDetail,String body){
        return sendEmailWithAttachmentByContent(toEmail, fromEmail, ccEmail, bccEmail, subject, wSAttachmentDetail, body, null);
    }
    
    public boolean sendEmailWithAttachmentByContent(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorObject wSAttachmentDetail,String body,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","sendEmailWithAttachmentByContent");
        soapReq.addProperty("toEmail",toEmail);
        soapReq.addProperty("fromEmail",fromEmail);
        soapReq.addProperty("ccEmail",ccEmail);
        soapReq.addProperty("bccEmail",bccEmail);
        soapReq.addProperty("subject",subject);
        soapReq.addProperty("WSAttachmentDetail",wSAttachmentDetail);
        soapReq.addProperty("body",body);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:sendEmailWithAttachmentByContent", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:sendEmailWithAttachmentByContent", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderProcessByIdAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderProcessByIdAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getFolderProcessByIdAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolderProcess doInBackground(Void... params) {
                return getFolderProcessById(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderProcessById", result);
                }
            }
        }.execute();
    }
    
    public wsFolderProcess getFolderProcessById(int processRSN,boolean processRSNSpecified){
        return getFolderProcessById(processRSN, processRSNSpecified, null);
    }
    
    public wsFolderProcess getFolderProcessById(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderProcessById");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderProcessById", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderProcessById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolderProcess resultVariable =  new wsFolderProcess (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderByInfoAsync(int infoCode,boolean infoCodeSpecified,String infoValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderByInfoAsync(infoCode, infoCodeSpecified, infoValue, null);
    }
    
    public void getFolderByInfoAsync(final int infoCode,final boolean infoCodeSpecified,final String infoValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return getFolderByInfo(infoCode, infoCodeSpecified, infoValue, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderByInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder getFolderByInfo(int infoCode,boolean infoCodeSpecified,String infoValue){
        return getFolderByInfo(infoCode, infoCodeSpecified, infoValue, null);
    }
    
    public VectorwsFolder getFolderByInfo(int infoCode,boolean infoCodeSpecified,String infoValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderByInfo");
        soapReq.addProperty("infoCode",infoCode);
        soapReq.addProperty("infoCodeSpecified",infoCodeSpecified);
        soapReq.addProperty("infoValue",infoValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderByInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderByInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteFolderAttachmentAsync(VectorInt32 attachmentRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderAttachmentAsync(attachmentRSN, null);
    }
    
    public void deleteFolderAttachmentAsync(final VectorInt32 attachmentRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderAttachment(attachmentRSN, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderAttachment(VectorInt32 attachmentRSN){
        return deleteFolderAttachment(attachmentRSN, null);
    }
    
    public boolean deleteFolderAttachment(VectorInt32 attachmentRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderAttachment");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidFolderTypesByGroupTypeCodeAsync(int groupTypeCode,boolean groupTypeCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFolderTypesByGroupTypeCodeAsync(groupTypeCode, groupTypeCodeSpecified, null);
    }
    
    public void getValidFolderTypesByGroupTypeCodeAsync(final int groupTypeCode,final boolean groupTypeCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderType doInBackground(Void... params) {
                return getValidFolderTypesByGroupTypeCode(groupTypeCode, groupTypeCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFolderTypesByGroupTypeCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderType getValidFolderTypesByGroupTypeCode(int groupTypeCode,boolean groupTypeCodeSpecified){
        return getValidFolderTypesByGroupTypeCode(groupTypeCode, groupTypeCodeSpecified, null);
    }
    
    public VectorwsValidFolderType getValidFolderTypesByGroupTypeCode(int groupTypeCode,boolean groupTypeCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFolderTypesByGroupTypeCode");
        soapReq.addProperty("groupTypeCode",groupTypeCode);
        soapReq.addProperty("groupTypeCodeSpecified",groupTypeCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFolderTypesByGroupTypeCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFolderTypesByGroupTypeCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderType resultVariable = new VectorwsValidFolderType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidPeopleNameSuffixesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidPeopleNameSuffixesAsync(null);
    }
    
    public void getValidPeopleNameSuffixesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidPeopleNameSuffix>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidPeopleNameSuffix doInBackground(Void... params) {
                return getValidPeopleNameSuffixes(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidPeopleNameSuffix result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidPeopleNameSuffixes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidPeopleNameSuffix getValidPeopleNameSuffixes(){
        return getValidPeopleNameSuffixes(null);
    }
    
    public VectorwsValidPeopleNameSuffix getValidPeopleNameSuffixes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidPeopleNameSuffixes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidPeopleNameSuffixes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidPeopleNameSuffixes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidPeopleNameSuffix resultVariable = new VectorwsValidPeopleNameSuffix(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addProcessFeeAsync(VectorwsProcessFee processFee) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addProcessFeeAsync(processFee, null);
    }
    
    public void addProcessFeeAsync(final VectorwsProcessFee processFee,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProcessFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProcessFee doInBackground(Void... params) {
                return addProcessFee(processFee, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProcessFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addProcessFee", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProcessFee addProcessFee(VectorwsProcessFee processFee){
        return addProcessFee(processFee, null);
    }
    
    public VectorwsProcessFee addProcessFee(VectorwsProcessFee processFee,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addProcessFee");
        soapReq.addProperty("processFee",processFee);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addProcessFee", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addProcessFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProcessFee resultVariable = new VectorwsProcessFee(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidFolderComplaintORCorrectionAsync(boolean isComplaint,boolean isCorrection,boolean checkWebFlag) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFolderComplaintORCorrectionAsync(isComplaint, isCorrection, checkWebFlag, null);
    }
    
    public void getValidFolderComplaintORCorrectionAsync(final boolean isComplaint,final boolean isCorrection,final boolean checkWebFlag,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderType doInBackground(Void... params) {
                return getValidFolderComplaintORCorrection(isComplaint, isCorrection, checkWebFlag, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFolderComplaintORCorrection", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderType getValidFolderComplaintORCorrection(boolean isComplaint,boolean isCorrection,boolean checkWebFlag){
        return getValidFolderComplaintORCorrection(isComplaint, isCorrection, checkWebFlag, null);
    }
    
    public VectorwsValidFolderType getValidFolderComplaintORCorrection(boolean isComplaint,boolean isCorrection,boolean checkWebFlag,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFolderComplaintORCorrection");
        soapReq.addProperty("isComplaint",isComplaint);
        soapReq.addProperty("isCorrection",isCorrection);
        soapReq.addProperty("checkWebFlag",checkWebFlag);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFolderComplaintORCorrection", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFolderComplaintORCorrection", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderType resultVariable = new VectorwsValidFolderType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchPeopleAttachmentAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchPeopleAttachmentAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchPeopleAttachmentAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return searchPeopleAttachment(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchPeopleAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment searchPeopleAttachment(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchPeopleAttachment(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsAttachment searchPeopleAttachment(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchPeopleAttachment");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchPeopleAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchPeopleAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidFreeFormColumnsAsync(VectorInt32 freeFormCode,String webDisplayFlag) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFreeFormColumnsAsync(freeFormCode, webDisplayFlag, null);
    }
    
    public void getValidFreeFormColumnsAsync(final VectorInt32 freeFormCode,final String webDisplayFlag,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFreeFormColumn>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFreeFormColumn doInBackground(Void... params) {
                return getValidFreeFormColumns(freeFormCode, webDisplayFlag, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFreeFormColumn result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFreeFormColumns", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFreeFormColumn getValidFreeFormColumns(VectorInt32 freeFormCode,String webDisplayFlag){
        return getValidFreeFormColumns(freeFormCode, webDisplayFlag, null);
    }
    
    public VectorwsValidFreeFormColumn getValidFreeFormColumns(VectorInt32 freeFormCode,String webDisplayFlag,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFreeFormColumns");
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapReq.addProperty("webDisplayFlag",webDisplayFlag);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFreeFormColumns", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFreeFormColumns", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFreeFormColumn resultVariable = new VectorwsValidFreeFormColumn(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidCountyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidCountyAsync(null);
    }
    
    public void getValidCountyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidCounty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidCounty doInBackground(Void... params) {
                return getValidCounty(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidCounty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidCounty", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidCounty getValidCounty(){
        return getValidCounty(null);
    }
    
    public VectorwsValidCounty getValidCounty(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidCounty");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidCounty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidCounty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidCounty resultVariable = new VectorwsValidCounty(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateWebPaymentLogAsync(VectorwsUpdateWebPaymentLog wsUpdateWebPaymentLog) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateWebPaymentLogAsync(wsUpdateWebPaymentLog, null);
    }
    
    public void updateWebPaymentLogAsync(final VectorwsUpdateWebPaymentLog wsUpdateWebPaymentLog,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateWebPaymentLog(wsUpdateWebPaymentLog, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateWebPaymentLog", result);
                }
            }
        }.execute();
    }
    
    public boolean updateWebPaymentLog(VectorwsUpdateWebPaymentLog wsUpdateWebPaymentLog){
        return updateWebPaymentLog(wsUpdateWebPaymentLog, null);
    }
    
    public boolean updateWebPaymentLog(VectorwsUpdateWebPaymentLog wsUpdateWebPaymentLog,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateWebPaymentLog");
        soapReq.addProperty("wsUpdateWebPaymentLog",wsUpdateWebPaymentLog);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateWebPaymentLog", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateWebPaymentLog", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getReceiptInfoAsync(int paymentNumber,boolean paymentNumberSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getReceiptInfoAsync(paymentNumber, paymentNumberSpecified, null);
    }
    
    public void getReceiptInfoAsync(final int paymentNumber,final boolean paymentNumberSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPaymentInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsPaymentInfo doInBackground(Void... params) {
                return getReceiptInfo(paymentNumber, paymentNumberSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsPaymentInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getReceiptInfo", result);
                }
            }
        }.execute();
    }
    
    public wsPaymentInfo getReceiptInfo(int paymentNumber,boolean paymentNumberSpecified){
        return getReceiptInfo(paymentNumber, paymentNumberSpecified, null);
    }
    
    public wsPaymentInfo getReceiptInfo(int paymentNumber,boolean paymentNumberSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getReceiptInfo");
        soapReq.addProperty("paymentNumber",paymentNumber);
        soapReq.addProperty("paymentNumberSpecified",paymentNumberSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getReceiptInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getReceiptInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPaymentInfo resultVariable =  new wsPaymentInfo (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void sendTextEmailAsync(String toEmail,String fromEmail,String ccEmail,String subject,String body) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendTextEmailAsync(toEmail, fromEmail, ccEmail, subject, body, null);
    }
    
    public void sendTextEmailAsync(final String toEmail,final String fromEmail,final String ccEmail,final String subject,final String body,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return sendTextEmail(toEmail, fromEmail, ccEmail, subject, body, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendTextEmail", result);
                }
            }
        }.execute();
    }
    
    public boolean sendTextEmail(String toEmail,String fromEmail,String ccEmail,String subject,String body){
        return sendTextEmail(toEmail, fromEmail, ccEmail, subject, body, null);
    }
    
    public boolean sendTextEmail(String toEmail,String fromEmail,String ccEmail,String subject,String body,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","sendTextEmail");
        soapReq.addProperty("toEmail",toEmail);
        soapReq.addProperty("fromEmail",fromEmail);
        soapReq.addProperty("ccEmail",ccEmail);
        soapReq.addProperty("subject",subject);
        soapReq.addProperty("body",body);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:sendTextEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:sendTextEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void searchPropertyAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchPropertyAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchPropertyAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProperty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProperty doInBackground(Void... params) {
                return searchProperty(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProperty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchProperty", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProperty searchProperty(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchProperty(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsProperty searchProperty(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchProperty");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProperty resultVariable = new VectorwsProperty(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void sendEmailWithAttachmentByURLAsync(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorString attachmentPath,String body) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendEmailWithAttachmentByURLAsync(toEmail, fromEmail, ccEmail, bccEmail, subject, attachmentPath, body, null);
    }
    
    public void sendEmailWithAttachmentByURLAsync(final String toEmail,final String fromEmail,final String ccEmail,final String bccEmail,final String subject,final VectorString attachmentPath,final String body,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return sendEmailWithAttachmentByURL(toEmail, fromEmail, ccEmail, bccEmail, subject, attachmentPath, body, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendEmailWithAttachmentByURL", result);
                }
            }
        }.execute();
    }
    
    public boolean sendEmailWithAttachmentByURL(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorString attachmentPath,String body){
        return sendEmailWithAttachmentByURL(toEmail, fromEmail, ccEmail, bccEmail, subject, attachmentPath, body, null);
    }
    
    public boolean sendEmailWithAttachmentByURL(String toEmail,String fromEmail,String ccEmail,String bccEmail,String subject,VectorString attachmentPath,String body,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","sendEmailWithAttachmentByURL");
        soapReq.addProperty("toEmail",toEmail);
        soapReq.addProperty("fromEmail",fromEmail);
        soapReq.addProperty("ccEmail",ccEmail);
        soapReq.addProperty("bccEmail",bccEmail);
        soapReq.addProperty("subject",subject);
        soapReq.addProperty("attachmentPath",attachmentPath);
        soapReq.addProperty("body",body);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:sendEmailWithAttachmentByURL", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:sendEmailWithAttachmentByURL", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderFoiCorrectionListByFolderRSNAsync(int folderRSN,boolean folderRSNSpecified,int correctionFolderRSN,boolean correctionFolderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFoiCorrectionListByFolderRSNAsync(folderRSN, folderRSNSpecified, correctionFolderRSN, correctionFolderRSNSpecified, null);
    }
    
    public void getFolderFoiCorrectionListByFolderRSNAsync(final int folderRSN,final boolean folderRSNSpecified,final int correctionFolderRSN,final boolean correctionFolderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFoiCorrectionFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFoiCorrectionFolder doInBackground(Void... params) {
                return getFolderFoiCorrectionListByFolderRSN(folderRSN, folderRSNSpecified, correctionFolderRSN, correctionFolderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFoiCorrectionFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFoiCorrectionListByFolderRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFoiCorrectionFolder getFolderFoiCorrectionListByFolderRSN(int folderRSN,boolean folderRSNSpecified,int correctionFolderRSN,boolean correctionFolderRSNSpecified){
        return getFolderFoiCorrectionListByFolderRSN(folderRSN, folderRSNSpecified, correctionFolderRSN, correctionFolderRSNSpecified, null);
    }
    
    public VectorwsFoiCorrectionFolder getFolderFoiCorrectionListByFolderRSN(int folderRSN,boolean folderRSNSpecified,int correctionFolderRSN,boolean correctionFolderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFoiCorrectionListByFolderRSN");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("correctionFolderRSN",correctionFolderRSN);
        soapReq.addProperty("correctionFolderRSNSpecified",correctionFolderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFoiCorrectionListByFolderRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFoiCorrectionListByFolderRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFoiCorrectionFolder resultVariable = new VectorwsFoiCorrectionFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getLinksAsync(String userID) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getLinksAsync(userID, null);
    }
    
    public void getLinksAsync(final String userID,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidUserMyOffice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidUserMyOffice doInBackground(Void... params) {
                return getLinks(userID, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidUserMyOffice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getLinks", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidUserMyOffice getLinks(String userID){
        return getLinks(userID, null);
    }
    
    public VectorwsValidUserMyOffice getLinks(String userID,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getLinks");
        soapReq.addProperty("userID",userID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getLinks", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getLinks", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidUserMyOffice resultVariable = new VectorwsValidUserMyOffice(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidAttachmentsAsync(VectorwsDisplayOptionFlag displayOptions) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidAttachmentsAsync(displayOptions, null);
    }
    
    public void getValidAttachmentsAsync(final VectorwsDisplayOptionFlag displayOptions,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidAttachment doInBackground(Void... params) {
                return getValidAttachments(displayOptions, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidAttachments", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidAttachment getValidAttachments(VectorwsDisplayOptionFlag displayOptions){
        return getValidAttachments(displayOptions, null);
    }
    
    public VectorwsValidAttachment getValidAttachments(VectorwsDisplayOptionFlag displayOptions,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidAttachments");
        soapReq.addProperty("displayOptions",displayOptions);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidAttachments", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidAttachments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidAttachment resultVariable = new VectorwsValidAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderGroupsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderGroupsAsync(null);
    }
    
    public void getFolderGroupsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderGroup>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderGroup doInBackground(Void... params) {
                return getFolderGroups(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderGroup result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderGroups", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderGroup getFolderGroups(){
        return getFolderGroups(null);
    }
    
    public VectorwsValidFolderGroup getFolderGroups(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderGroups");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderGroups", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderGroups", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderGroup resultVariable = new VectorwsValidFolderGroup(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getDeficiencyAsync(VectorInt32 processRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDeficiencyAsync(processRSN, null);
    }
    
    public void getDeficiencyAsync(final VectorInt32 processRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessDeficiency>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessDeficiency doInBackground(Void... params) {
                return getDeficiency(processRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessDeficiency result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDeficiency", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessDeficiency getDeficiency(VectorInt32 processRSN){
        return getDeficiency(processRSN, null);
    }
    
    public VectorwsFolderProcessDeficiency getDeficiency(VectorInt32 processRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getDeficiency");
        soapReq.addProperty("processRSN",processRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getDeficiency", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getDeficiency", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessDeficiency resultVariable = new VectorwsFolderProcessDeficiency(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderDocumentAsPdfAsync(int documentRSN,boolean documentRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderDocumentAsPdfAsync(documentRSN, documentRSNSpecified, null);
    }
    
    public void getFolderDocumentAsPdfAsync(final int documentRSN,final boolean documentRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsDocumentContent>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsDocumentContent doInBackground(Void... params) {
                return getFolderDocumentAsPdf(documentRSN, documentRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsDocumentContent result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderDocumentAsPdf", result);
                }
            }
        }.execute();
    }
    
    public wsDocumentContent getFolderDocumentAsPdf(int documentRSN,boolean documentRSNSpecified){
        return getFolderDocumentAsPdf(documentRSN, documentRSNSpecified, null);
    }
    
    public wsDocumentContent getFolderDocumentAsPdf(int documentRSN,boolean documentRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderDocumentAsPdf");
        soapReq.addProperty("documentRSN",documentRSN);
        soapReq.addProperty("documentRSNSpecified",documentRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderDocumentAsPdf", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderDocumentAsPdf", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsDocumentContent resultVariable =  new wsDocumentContent (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getVehicleAsync(int vehicleRSN,boolean vehicleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getVehicleAsync(vehicleRSN, vehicleRSNSpecified, null);
    }
    
    public void getVehicleAsync(final int vehicleRSN,final boolean vehicleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsVehicle>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsVehicle doInBackground(Void... params) {
                return getVehicle(vehicleRSN, vehicleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsVehicle result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getVehicle", result);
                }
            }
        }.execute();
    }
    
    public wsVehicle getVehicle(int vehicleRSN,boolean vehicleRSNSpecified){
        return getVehicle(vehicleRSN, vehicleRSNSpecified, null);
    }
    
    public wsVehicle getVehicle(int vehicleRSN,boolean vehicleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getVehicle");
        soapReq.addProperty("vehicleRSN",vehicleRSN);
        soapReq.addProperty("vehicleRSNSpecified",vehicleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getVehicle", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getVehicle", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsVehicle resultVariable =  new wsVehicle (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderFixtureAsync(VectorInt32 folderRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFixtureAsync(folderRSN, null);
    }
    
    public void getFolderFixtureAsync(final VectorInt32 folderRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderFixture>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderFixture doInBackground(Void... params) {
                return getFolderFixture(folderRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderFixture result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFixture", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderFixture getFolderFixture(VectorInt32 folderRSN){
        return getFolderFixture(folderRSN, null);
    }
    
    public VectorwsFolderFixture getFolderFixture(VectorInt32 folderRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFixture");
        soapReq.addProperty("folderRSN",folderRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFixture", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFixture", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderFixture resultVariable = new VectorwsFolderFixture(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPaymentAsync(wsPaymentRequest paymentRequest) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPaymentAsync(paymentRequest, null);
    }
    
    public void addPaymentAsync(final wsPaymentRequest paymentRequest,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderPayment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderPayment doInBackground(Void... params) {
                return addPayment(paymentRequest, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderPayment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPayment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderPayment addPayment(wsPaymentRequest paymentRequest){
        return addPayment(paymentRequest, null);
    }
    
    public VectorwsFolderPayment addPayment(wsPaymentRequest paymentRequest,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPayment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","paymentRequest",new wsPaymentRequest().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("paymentRequest",paymentRequest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPayment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addPayment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderPayment resultVariable = new VectorwsFolderPayment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPropertyInfoByInfoCodeAsync(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 infoCodes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyInfoByInfoCodeAsync(propertyRSN, propertyRSNSpecified, infoCodes, null);
    }
    
    public void getPropertyInfoByInfoCodeAsync(final int propertyRSN,final boolean propertyRSNSpecified,final VectorInt32 infoCodes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPropertyInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPropertyInfo doInBackground(Void... params) {
                return getPropertyInfoByInfoCode(propertyRSN, propertyRSNSpecified, infoCodes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPropertyInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPropertyInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPropertyInfo getPropertyInfoByInfoCode(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 infoCodes){
        return getPropertyInfoByInfoCode(propertyRSN, propertyRSNSpecified, infoCodes, null);
    }
    
    public VectorwsPropertyInfo getPropertyInfoByInfoCode(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 infoCodes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPropertyInfoByInfoCode");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapReq.addProperty("infoCodes",infoCodes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPropertyInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPropertyInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPropertyInfo resultVariable = new VectorwsPropertyInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFoiComplaintFolderAsync(wsFoiComplaintFolder argFolderFOIComplaint) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFoiComplaintFolderAsync(argFolderFOIComplaint, null);
    }
    
    public void addFoiComplaintFolderAsync(final wsFoiComplaintFolder argFolderFOIComplaint,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFoiComplaintFolder(argFolderFOIComplaint, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFoiComplaintFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean addFoiComplaintFolder(wsFoiComplaintFolder argFolderFOIComplaint){
        return addFoiComplaintFolder(argFolderFOIComplaint, null);
    }
    
    public boolean addFoiComplaintFolder(wsFoiComplaintFolder argFolderFOIComplaint,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFoiComplaintFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOIComplaint",new wsFoiComplaintFolder().getClass());
        soapReq.addProperty("argFolderFOIComplaint",argFolderFOIComplaint);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFoiComplaintFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFoiComplaintFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidFoiSourceAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFoiSourceAsync(null);
    }
    
    public void getValidFoiSourceAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFoiSource>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFoiSource doInBackground(Void... params) {
                return getValidFoiSource(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFoiSource result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFoiSource", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFoiSource getValidFoiSource(){
        return getValidFoiSource(null);
    }
    
    public VectorwsValidFoiSource getValidFoiSource(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFoiSource");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFoiSource", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFoiSource", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFoiSource resultVariable = new VectorwsValidFoiSource(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidStatusesByFolderTypesAsync(VectorString folderTypes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidStatusesByFolderTypesAsync(folderTypes, null);
    }
    
    public void getValidStatusesByFolderTypesAsync(final VectorString folderTypes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderStatus>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderStatus doInBackground(Void... params) {
                return getValidStatusesByFolderTypes(folderTypes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderStatus result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidStatusesByFolderTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderStatus getValidStatusesByFolderTypes(VectorString folderTypes){
        return getValidStatusesByFolderTypes(folderTypes, null);
    }
    
    public VectorwsValidFolderStatus getValidStatusesByFolderTypes(VectorString folderTypes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidStatusesByFolderTypes");
        soapReq.addProperty("folderTypes",folderTypes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidStatusesByFolderTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidStatusesByFolderTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderStatus resultVariable = new VectorwsValidFolderStatus(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePeopleGroupMemberAsync(wsPeopleGroup wsPeopleGroup) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleGroupMemberAsync(wsPeopleGroup, null);
    }
    
    public void updatePeopleGroupMemberAsync(final wsPeopleGroup wsPeopleGroup,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeopleGroupMember(wsPeopleGroup, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeopleGroupMember", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeopleGroupMember(wsPeopleGroup wsPeopleGroup){
        return updatePeopleGroupMember(wsPeopleGroup, null);
    }
    
    public boolean updatePeopleGroupMember(wsPeopleGroup wsPeopleGroup,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeopleGroupMember");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsPeopleGroup",new wsPeopleGroup().getClass());
        soapReq.addProperty("wsPeopleGroup",wsPeopleGroup);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeopleGroupMember", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeopleGroupMember", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderProcessAttemptByCodeAsync(int folderRSN,boolean folderRSNSpecified,int processCode,boolean processCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderProcessAttemptByCodeAsync(folderRSN, folderRSNSpecified, processCode, processCodeSpecified, null);
    }
    
    public void getFolderProcessAttemptByCodeAsync(final int folderRSN,final boolean folderRSNSpecified,final int processCode,final boolean processCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessAttempt>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessAttempt doInBackground(Void... params) {
                return getFolderProcessAttemptByCode(folderRSN, folderRSNSpecified, processCode, processCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessAttempt result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderProcessAttemptByCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessAttempt getFolderProcessAttemptByCode(int folderRSN,boolean folderRSNSpecified,int processCode,boolean processCodeSpecified){
        return getFolderProcessAttemptByCode(folderRSN, folderRSNSpecified, processCode, processCodeSpecified, null);
    }
    
    public VectorwsFolderProcessAttempt getFolderProcessAttemptByCode(int folderRSN,boolean folderRSNSpecified,int processCode,boolean processCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderProcessAttemptByCode");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("processCode",processCode);
        soapReq.addProperty("processCodeSpecified",processCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderProcessAttemptByCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderProcessAttemptByCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessAttempt resultVariable = new VectorwsFolderProcessAttempt(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteProcessFreeformAsync(VectorwsProcessFreeformPK wsProcessFreeformPK) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteProcessFreeformAsync(wsProcessFreeformPK, null);
    }
    
    public void deleteProcessFreeformAsync(final VectorwsProcessFreeformPK wsProcessFreeformPK,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteProcessFreeform(wsProcessFreeformPK, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteProcessFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteProcessFreeform(VectorwsProcessFreeformPK wsProcessFreeformPK){
        return deleteProcessFreeform(wsProcessFreeformPK, null);
    }
    
    public boolean deleteProcessFreeform(VectorwsProcessFreeformPK wsProcessFreeformPK,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteProcessFreeform");
        soapReq.addProperty("wsProcessFreeformPK",wsProcessFreeformPK);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteProcessFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteProcessFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidPhoneTypesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidPhoneTypesAsync(null);
    }
    
    public void getValidPhoneTypesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidPhoneType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidPhoneType doInBackground(Void... params) {
                return getValidPhoneTypes(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidPhoneType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidPhoneTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidPhoneType getValidPhoneTypes(){
        return getValidPhoneTypes(null);
    }
    
    public VectorwsValidPhoneType getValidPhoneTypes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidPhoneTypes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidPhoneTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidPhoneTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidPhoneType resultVariable = new VectorwsValidPhoneType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getDefaultFolderAttachmentAsync(VectorString folderType) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDefaultFolderAttachmentAsync(folderType, null);
    }
    
    public void getDefaultFolderAttachmentAsync(final VectorString folderType,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsDefaultFolderAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsDefaultFolderAttachment doInBackground(Void... params) {
                return getDefaultFolderAttachment(folderType, headers);
            }
            @Override
            protected void onPostExecute(VectorwsDefaultFolderAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDefaultFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsDefaultFolderAttachment getDefaultFolderAttachment(VectorString folderType){
        return getDefaultFolderAttachment(folderType, null);
    }
    
    public VectorwsDefaultFolderAttachment getDefaultFolderAttachment(VectorString folderType,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getDefaultFolderAttachment");
        soapReq.addProperty("folderType",folderType);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getDefaultFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getDefaultFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsDefaultFolderAttachment resultVariable = new VectorwsDefaultFolderAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFoiComplaintFolderAsync(wsFoiComplaintFolder argFolderFOIComplaint) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFoiComplaintFolderAsync(argFolderFOIComplaint, null);
    }
    
    public void updateFoiComplaintFolderAsync(final wsFoiComplaintFolder argFolderFOIComplaint,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFoiComplaintFolder(argFolderFOIComplaint, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFoiComplaintFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFoiComplaintFolder(wsFoiComplaintFolder argFolderFOIComplaint){
        return updateFoiComplaintFolder(argFolderFOIComplaint, null);
    }
    
    public boolean updateFoiComplaintFolder(wsFoiComplaintFolder argFolderFOIComplaint,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFoiComplaintFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOIComplaint",new wsFoiComplaintFolder().getClass());
        soapReq.addProperty("argFolderFOIComplaint",argFolderFOIComplaint);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFoiComplaintFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFoiComplaintFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getAttachmentInfoByInfoCodeAsync(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAttachmentInfoByInfoCodeAsync(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, null);
    }
    
    public void getAttachmentInfoByInfoCodeAsync(final int attachmentRSN,final boolean attachmentRSNSpecified,final VectorInt32 attachmentInfoCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachmentInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachmentInfo doInBackground(Void... params) {
                return getAttachmentInfoByInfoCode(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachmentInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAttachmentInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachmentInfo getAttachmentInfoByInfoCode(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode){
        return getAttachmentInfoByInfoCode(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, null);
    }
    
    public VectorwsAttachmentInfo getAttachmentInfoByInfoCode(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAttachmentInfoByInfoCode");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapReq.addProperty("attachmentInfoCode",attachmentInfoCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAttachmentInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAttachmentInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachmentInfo resultVariable = new VectorwsAttachmentInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deletePeopleAttachmentAsync(VectorInt32 attachmentRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deletePeopleAttachmentAsync(attachmentRSN, null);
    }
    
    public void deletePeopleAttachmentAsync(final VectorInt32 attachmentRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deletePeopleAttachment(attachmentRSN, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deletePeopleAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean deletePeopleAttachment(VectorInt32 attachmentRSN){
        return deletePeopleAttachment(attachmentRSN, null);
    }
    
    public boolean deletePeopleAttachment(VectorInt32 attachmentRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deletePeopleAttachment");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deletePeopleAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deletePeopleAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return getFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder getFolder(int folderRSN,boolean folderRSNSpecified){
        return getFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolder getFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject(SOAPConstants.NAMESPACE,"getFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        //soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(Proxy.NO_PROXY,url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidVehicleStatusesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidVehicleStatusesAsync(null);
    }
    
    public void getValidVehicleStatusesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidVehicleStatus>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidVehicleStatus doInBackground(Void... params) {
                return getValidVehicleStatuses(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidVehicleStatus result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidVehicleStatuses", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidVehicleStatus getValidVehicleStatuses(){
        return getValidVehicleStatuses(null);
    }
    
    public VectorwsValidVehicleStatus getValidVehicleStatuses(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidVehicleStatuses");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidVehicleStatuses", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidVehicleStatuses", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidVehicleStatus resultVariable = new VectorwsValidVehicleStatus(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderValidInfoAsync(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderValidInfoAsync(folderRSN, folderRSNSpecified, displayOptions, null);
    }
    
    public void getFolderValidInfoAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsDisplayInfoOptionFlag displayOptions,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidInfo doInBackground(Void... params) {
                return getFolderValidInfo(folderRSN, folderRSNSpecified, displayOptions, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderValidInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidInfo getFolderValidInfo(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions){
        return getFolderValidInfo(folderRSN, folderRSNSpecified, displayOptions, null);
    }
    
    public VectorwsValidInfo getFolderValidInfo(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderValidInfo");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("displayOptions",displayOptions);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderValidInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderValidInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidInfo resultVariable = new VectorwsValidInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidLookupGroupAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidLookupGroupAsync(null);
    }
    
    public void getValidLookupGroupAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidLookupGroup>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidLookupGroup doInBackground(Void... params) {
                return getValidLookupGroup(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidLookupGroup result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidLookupGroup", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidLookupGroup getValidLookupGroup(){
        return getValidLookupGroup(null);
    }
    
    public VectorwsValidLookupGroup getValidLookupGroup(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidLookupGroup");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidLookupGroup", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidLookupGroup", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidLookupGroup resultVariable = new VectorwsValidLookupGroup(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderFeeByRSNAsync(VectorInt32 feeRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFeeByRSNAsync(feeRSN, null);
    }
    
    public void getFolderFeeByRSNAsync(final VectorInt32 feeRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderFee doInBackground(Void... params) {
                return getFolderFeeByRSN(feeRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFeeByRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderFee getFolderFeeByRSN(VectorInt32 feeRSN){
        return getFolderFeeByRSN(feeRSN, null);
    }
    
    public VectorwsFolderFee getFolderFeeByRSN(VectorInt32 feeRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFeeByRSN");
        soapReq.addProperty("feeRSN",feeRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFeeByRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFeeByRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderFee resultVariable = new VectorwsFolderFee(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void cancelFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        cancelFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void cancelFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return cancelFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("cancelFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder cancelFolder(int folderRSN,boolean folderRSNSpecified){
        return cancelFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolder cancelFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","cancelFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:cancelFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:cancelFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidStreetAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidStreetAsync(null);
    }
    
    public void getValidStreetAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidStreet>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidStreet doInBackground(Void... params) {
                return getValidStreet(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidStreet result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidStreet", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidStreet getValidStreet(){
        return getValidStreet(null);
    }
    
    public VectorwsValidStreet getValidStreet(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidStreet");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidStreet", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidStreet", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidStreet resultVariable = new VectorwsValidStreet(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderAttachmentAsync(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderAttachmentAsync(folderRSN, folderRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void addFolderAttachmentAsync(final int folderRSN,final boolean folderRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addFolderAttachment(folderRSN, folderRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderAttachment", result);
                }
            }
        }.execute();
    }
    
    public int addFolderAttachment(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return addFolderAttachment(folderRSN, folderRSNSpecified, attachment, attachmentContent, null);
    }
    
    public int addFolderAttachment(int folderRSN,boolean folderRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getValidChargeSeverityAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChargeSeverityAsync(null);
    }
    
    public void getValidChargeSeverityAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidChargeSeverity>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidChargeSeverity doInBackground(Void... params) {
                return getValidChargeSeverity(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidChargeSeverity result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidChargeSeverity", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidChargeSeverity getValidChargeSeverity(){
        return getValidChargeSeverity(null);
    }
    
    public VectorwsValidChargeSeverity getValidChargeSeverity(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidChargeSeverity");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidChargeSeverity", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidChargeSeverity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidChargeSeverity resultVariable = new VectorwsValidChargeSeverity(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidChargeTypeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChargeTypeAsync(null);
    }
    
    public void getValidChargeTypeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidChargeType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidChargeType doInBackground(Void... params) {
                return getValidChargeType(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidChargeType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidChargeType", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidChargeType getValidChargeType(){
        return getValidChargeType(null);
    }
    
    public VectorwsValidChargeType getValidChargeType(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidChargeType");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidChargeType", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidChargeType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidChargeType resultVariable = new VectorwsValidChargeType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPeopleAsync(wsPeople argPeople) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPeopleAsync(argPeople, null);
    }
    
    public void addPeopleAsync(final wsPeople argPeople,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addPeople(argPeople, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPeople", result);
                }
            }
        }.execute();
    }
    
    public int addPeople(wsPeople argPeople){
        return addPeople(argPeople, null);
    }

    public int addPeople(wsPeople argPeople,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        soapEnvelope.implicitTypes = true;
        soapEnvelope.setAddAdornments(false);

        Log.e("NameFirst", "addPeople: " + argPeople.nameFirst);

        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPeople");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com", "argPeople", new wsPeople().getClass());
       /* MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);*/

        CustomMarshal customMarshal = new CustomMarshal();
        customMarshal.register(soapEnvelope);
        soapReq.addProperty("argPeople", argPeople);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        httpTransport.debug = true;
        //httpTransport.setXmlVersionTag(SOAPConstants.XML_VERSION_TAG);
        try{
            if (headers!=null){
                System.out.println(httpTransport.requestDump);
                httpTransport.call("urn:addPeople", soapEnvelope,headers);
                System.out.println(httpTransport.responseDump);
            }else{
                httpTransport.call("urn:addPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    /*public int addPeople(wsPeople argPeople,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        //]]soapEnvelope.dotNet = true;
        soapEnvelope.encodingStyle = SoapSerializationEnvelope.XSD;

        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPeople");


        soapReq.addProperty("argPeople", argPeople);
        soapEnvelope.addMapping(NAMESPACE, "argPeople", new wsPeople().getClass());
        CustomMarshal marshalFloat = new CustomMarshal();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(Proxy.NO_PROXY,url,timeOut);
        httpTransport.debug = true;
        System.out.println("==== = = = = = = =  ==  ==  ==  = = = = = =  =:"+httpTransport.requestDump);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPeople", soapEnvelope,headers);
                String res = httpTransport.responseDump.toUpperCase();
                String res2 = httpTransport.requestDump.toString().toUpperCase();
                //Log.d("WSAmandaService", "addPeople: Rsponse Dump :"+res);
                Log.d("WSAmandaService", "addPeople: Request Dump :"+res2 + "============"+ res);
            }else{
                httpTransport.call("urn:addPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            Log.e("WSAmandaService", "addPeople: Error Request Dump :"+ httpTransport.requestDump);
            Log.e("WSAmandaService", "addPeople: Error Response Dump :"+httpTransport.responseDump);
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }*/
    
    public void sendHtmlEmailAsync(String toEmail,String fromEmail,String ccEmail,String subject,String body) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendHtmlEmailAsync(toEmail, fromEmail, ccEmail, subject, body, null);
    }
    
    public void sendHtmlEmailAsync(final String toEmail,final String fromEmail,final String ccEmail,final String subject,final String body,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return sendHtmlEmail(toEmail, fromEmail, ccEmail, subject, body, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendHtmlEmail", result);
                }
            }
        }.execute();
    }
    
    public boolean sendHtmlEmail(String toEmail,String fromEmail,String ccEmail,String subject,String body){
        return sendHtmlEmail(toEmail, fromEmail, ccEmail, subject, body, null);
    }
    
    public boolean sendHtmlEmail(String toEmail,String fromEmail,String ccEmail,String subject,String body,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","sendHtmlEmail");
        soapReq.addProperty("toEmail",toEmail);
        soapReq.addProperty("fromEmail",fromEmail);
        soapReq.addProperty("ccEmail",ccEmail);
        soapReq.addProperty("subject",subject);
        soapReq.addProperty("body",body);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:sendHtmlEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:sendHtmlEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void deleteFolderPeopleAsync(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderPeopleAsync(folderRSN, folderRSNSpecified, folderPeople, null);
    }
    
    public void deleteFolderPeopleAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsFolderPeople folderPeople,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderPeople(folderRSN, folderRSNSpecified, folderPeople, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderPeople", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderPeople(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople){
        return deleteFolderPeople(folderRSN, folderRSNSpecified, folderPeople, null);
    }
    
    public boolean deleteFolderPeople(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderPeople");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("folderPeople",folderPeople);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void updateFolderProcessInfoAsync(int processRSN,boolean processRSNSpecified,VectorwsFolderProcessInfo folderProcessInfos) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderProcessInfoAsync(processRSN, processRSNSpecified, folderProcessInfos, null);
    }
    
    public void updateFolderProcessInfoAsync(final int processRSN,final boolean processRSNSpecified,final VectorwsFolderProcessInfo folderProcessInfos,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderProcessInfo(processRSN, processRSNSpecified, folderProcessInfos, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderProcessInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderProcessInfo(int processRSN,boolean processRSNSpecified,VectorwsFolderProcessInfo folderProcessInfos){
        return updateFolderProcessInfo(processRSN, processRSNSpecified, folderProcessInfos, null);
    }
    
    public boolean updateFolderProcessInfo(int processRSN,boolean processRSNSpecified,VectorwsFolderProcessInfo folderProcessInfos,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderProcessInfo");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("folderProcessInfos",folderProcessInfos);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderProcessInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderProcessInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderVehicleAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderVehicleAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderVehicleAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsVehicle>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsVehicle doInBackground(Void... params) {
                return getFolderVehicle(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsVehicle result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderVehicle", result);
                }
            }
        }.execute();
    }
    
    public VectorwsVehicle getFolderVehicle(int folderRSN,boolean folderRSNSpecified){
        return getFolderVehicle(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsVehicle getFolderVehicle(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderVehicle");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderVehicle", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderVehicle", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsVehicle resultVariable = new VectorwsVehicle(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderInfoByInfoCodeAsync(int folderRSN,boolean folderRSNSpecified,VectorInt32 infoCodes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderInfoByInfoCodeAsync(folderRSN, folderRSNSpecified, infoCodes, null);
    }
    
    public void getFolderInfoByInfoCodeAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorInt32 infoCodes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderInfo doInBackground(Void... params) {
                return getFolderInfoByInfoCode(folderRSN, folderRSNSpecified, infoCodes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderInfo getFolderInfoByInfoCode(int folderRSN,boolean folderRSNSpecified,VectorInt32 infoCodes){
        return getFolderInfoByInfoCode(folderRSN, folderRSNSpecified, infoCodes, null);
    }
    
    public VectorwsFolderInfo getFolderInfoByInfoCode(int folderRSN,boolean folderRSNSpecified,VectorInt32 infoCodes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderInfoByInfoCode");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("infoCodes",infoCodes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderInfo resultVariable = new VectorwsFolderInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchFolderAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchFolderAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchFolderAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return searchFolder(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchFolder", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder searchFolder(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchFolder(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsFolder searchFolder(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchFolder");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderProcessAsync(int folderRSN,boolean folderRSNSpecified,VectorInt32 processGroups) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderProcessAsync(folderRSN, folderRSNSpecified, processGroups, null);
    }
    
    public void getFolderProcessAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorInt32 processGroups,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return getFolderProcess(folderRSN, folderRSNSpecified, processGroups, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess getFolderProcess(int folderRSN,boolean folderRSNSpecified,VectorInt32 processGroups){
        return getFolderProcess(folderRSN, folderRSNSpecified, processGroups, null);
    }
    
    public VectorwsFolderProcess getFolderProcess(int folderRSN,boolean folderRSNSpecified,VectorInt32 processGroups,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderProcess");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("processGroups",processGroups);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePeopleAsync(wsPeople argPeople) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleAsync(argPeople, null);
    }
    
    public void updatePeopleAsync(final wsPeople argPeople,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeople(argPeople, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeople", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeople(wsPeople argPeople){
        return updatePeople(argPeople, null);
    }
    
    public boolean updatePeople(wsPeople argPeople,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeople");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argPeople",new wsPeople().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("argPeople",argPeople);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void updateProcessFreeformAsync(VectorwsProcessFreeForm wsProcessFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateProcessFreeformAsync(wsProcessFreeform, null);
    }
    
    public void updateProcessFreeformAsync(final VectorwsProcessFreeForm wsProcessFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateProcessFreeform(wsProcessFreeform, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateProcessFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean updateProcessFreeform(VectorwsProcessFreeForm wsProcessFreeform){
        return updateProcessFreeform(wsProcessFreeform, null);
    }
    
    public boolean updateProcessFreeform(VectorwsProcessFreeForm wsProcessFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateProcessFreeform");
        soapReq.addProperty("wsProcessFreeform",wsProcessFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateProcessFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateProcessFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void deleteProcessAttachmentAsync(int processRSN,boolean processRSNSpecified,int attachmentRSN,boolean attachmentRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteProcessAttachmentAsync(processRSN, processRSNSpecified, attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public void deleteProcessAttachmentAsync(final int processRSN,final boolean processRSNSpecified,final int attachmentRSN,final boolean attachmentRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteProcessAttachment(processRSN, processRSNSpecified, attachmentRSN, attachmentRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteProcessAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteProcessAttachment(int processRSN,boolean processRSNSpecified,int attachmentRSN,boolean attachmentRSNSpecified){
        return deleteProcessAttachment(processRSN, processRSNSpecified, attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public boolean deleteProcessAttachment(int processRSN,boolean processRSNSpecified,int attachmentRSN,boolean attachmentRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteProcessAttachment");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteProcessAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteProcessAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderWorkByFolderTypeAsync(String folderType,int subCode,boolean subCodeSpecified,String webDisplayFlag) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderWorkByFolderTypeAsync(folderType, subCode, subCodeSpecified, webDisplayFlag, null);
    }
    
    public void getFolderWorkByFolderTypeAsync(final String folderType,final int subCode,final boolean subCodeSpecified,final String webDisplayFlag,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidWork>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidWork doInBackground(Void... params) {
                return getFolderWorkByFolderType(folderType, subCode, subCodeSpecified, webDisplayFlag, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidWork result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderWorkByFolderType", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidWork getFolderWorkByFolderType(String folderType,int subCode,boolean subCodeSpecified,String webDisplayFlag){
        return getFolderWorkByFolderType(folderType, subCode, subCodeSpecified, webDisplayFlag, null);
    }
    
    public VectorwsValidWork getFolderWorkByFolderType(String folderType,int subCode,boolean subCodeSpecified,String webDisplayFlag,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderWorkByFolderType");
        soapReq.addProperty("folderType",folderType);
        soapReq.addProperty("subCode",subCode);
        soapReq.addProperty("subCodeSpecified",subCodeSpecified);
        soapReq.addProperty("webDisplayFlag",webDisplayFlag);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderWorkByFolderType", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderWorkByFolderType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidWork resultVariable = new VectorwsValidWork(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderTypeByGroupsAsync(VectorInt32 folderGroupCode,String webDisplayFlag) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderTypeByGroupsAsync(folderGroupCode, webDisplayFlag, null);
    }
    
    public void getFolderTypeByGroupsAsync(final VectorInt32 folderGroupCode,final String webDisplayFlag,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderType doInBackground(Void... params) {
                return getFolderTypeByGroups(folderGroupCode, webDisplayFlag, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderTypeByGroups", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderType getFolderTypeByGroups(VectorInt32 folderGroupCode,String webDisplayFlag){
        return getFolderTypeByGroups(folderGroupCode, webDisplayFlag, null);
    }
    
    public VectorwsValidFolderType getFolderTypeByGroups(VectorInt32 folderGroupCode,String webDisplayFlag,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderTypeByGroups");
        soapReq.addProperty("folderGroupCode",folderGroupCode);
        soapReq.addProperty("webDisplayFlag",webDisplayFlag);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderTypeByGroups", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderTypeByGroups", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderType resultVariable = new VectorwsValidFolderType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteFolderFixtureAsync(VectorwsFolderFixture folderFixtures) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderFixtureAsync(folderFixtures, null);
    }
    
    public void deleteFolderFixtureAsync(final VectorwsFolderFixture folderFixtures,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderFixture(folderFixtures, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderFixture", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderFixture(VectorwsFolderFixture folderFixtures){
        return deleteFolderFixture(folderFixtures, null);
    }
    
    public boolean deleteFolderFixture(VectorwsFolderFixture folderFixtures,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderFixture");
        soapReq.addProperty("folderFixtures",folderFixtures);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderFixture", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderFixture", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addPeopleAttachmentAsync(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPeopleAttachmentAsync(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void addPeopleAttachmentAsync(final int peopleRSN,final boolean peopleRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addPeopleAttachment(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPeopleAttachment", result);
                }
            }
        }.execute();
    }
    
    public int addPeopleAttachment(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return addPeopleAttachment(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, null);
    }
    
    public int addPeopleAttachment(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPeopleAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPeopleAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addPeopleAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getValidCommunitiesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidCommunitiesAsync(null);
    }
    
    public void getValidCommunitiesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidCommunity>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidCommunity doInBackground(Void... params) {
                return getValidCommunities(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidCommunity result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidCommunities", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidCommunity getValidCommunities(){
        return getValidCommunities(null);
    }
    
    public VectorwsValidCommunity getValidCommunities(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidCommunities");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidCommunities", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidCommunities", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidCommunity resultVariable = new VectorwsValidCommunity(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderProcessAsync(VectorwsFolderProcess processes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderProcessAsync(processes, null);
    }
    
    public void addFolderProcessAsync(final VectorwsFolderProcess processes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return addFolderProcess(processes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess addFolderProcess(VectorwsFolderProcess processes){
        return addFolderProcess(processes, null);
    }
    
    public VectorwsFolderProcess addFolderProcess(VectorwsFolderProcess processes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderProcess");
        soapReq.addProperty("processes",processes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void issueFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        issueFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void issueFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return issueFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("issueFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder issueFolder(int folderRSN,boolean folderRSNSpecified){
        return issueFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolder issueFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","issueFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:issueFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:issueFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderProcessAttemptAsync(wsFolderProcessAttempt attempt) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderProcessAttemptAsync(attempt, null);
    }
    
    public void addFolderProcessAttemptAsync(final wsFolderProcessAttempt attempt,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFolderProcessAttempt(attempt, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderProcessAttempt", result);
                }
            }
        }.execute();
    }
    
    public boolean addFolderProcessAttempt(wsFolderProcessAttempt attempt){
        return addFolderProcessAttempt(attempt, null);
    }
    
    public boolean addFolderProcessAttempt(wsFolderProcessAttempt attempt,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderProcessAttempt");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attempt",new wsFolderProcessAttempt().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("attempt",attempt);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderProcessAttempt", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderProcessAttempt", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidAgencyByUserAsync(String userId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidAgencyByUserAsync(userId, null);
    }
    
    public void getValidAgencyByUserAsync(final String userId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidAgency>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidAgency doInBackground(Void... params) {
                return getValidAgencyByUser(userId, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidAgency result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidAgencyByUser", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidAgency getValidAgencyByUser(String userId){
        return getValidAgencyByUser(userId, null);
    }
    
    public VectorwsValidAgency getValidAgencyByUser(String userId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidAgencyByUser");
        soapReq.addProperty("userId",userId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidAgencyByUser", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidAgencyByUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidAgency resultVariable = new VectorwsValidAgency(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleValidInfoAsync(int peopleRSN,boolean peopleRSNSpecified,boolean webEnabledOnly) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleValidInfoAsync(peopleRSN, peopleRSNSpecified, webEnabledOnly, null);
    }
    
    public void getPeopleValidInfoAsync(final int peopleRSN,final boolean peopleRSNSpecified,final boolean webEnabledOnly,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidInfo doInBackground(Void... params) {
                return getPeopleValidInfo(peopleRSN, peopleRSNSpecified, webEnabledOnly, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleValidInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidInfo getPeopleValidInfo(int peopleRSN,boolean peopleRSNSpecified,boolean webEnabledOnly){
        return getPeopleValidInfo(peopleRSN, peopleRSNSpecified, webEnabledOnly, null);
    }
    
    public VectorwsValidInfo getPeopleValidInfo(int peopleRSN,boolean peopleRSNSpecified,boolean webEnabledOnly,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleValidInfo");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("webEnabledOnly",webEnabledOnly);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleValidInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleValidInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidInfo resultVariable = new VectorwsValidInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidOperatorsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidOperatorsAsync(null);
    }
    
    public void getValidOperatorsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsValidOperator>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsValidOperator doInBackground(Void... params) {
                return getValidOperators(headers);
            }
            @Override
            protected void onPostExecute(wsValidOperator result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidOperators", result);
                }
            }
        }.execute();
    }
    
    public wsValidOperator getValidOperators(){
        return getValidOperators(null);
    }
    
    public wsValidOperator getValidOperators(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidOperators");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidOperators", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidOperators", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsValidOperator resultVariable =  new wsValidOperator (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchPropertyCountAsync(VectorwsSearchCriteria criteria) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchPropertyCountAsync(criteria, null);
    }
    
    public void searchPropertyCountAsync(final VectorwsSearchCriteria criteria,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return searchPropertyCount(criteria, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchPropertyCount", result);
                }
            }
        }.execute();
    }
    
    public int searchPropertyCount(VectorwsSearchCriteria criteria){
        return searchPropertyCount(criteria, null);
    }
    
    public int searchPropertyCount(VectorwsSearchCriteria criteria,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchPropertyCount");
        soapReq.addProperty("criteria",criteria);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchPropertyCount", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchPropertyCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getFolderFoiComplaintListByFolderRSNAsync(int folderRSN,boolean folderRSNSpecified,int complaintFolderRSN,boolean complaintFolderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFoiComplaintListByFolderRSNAsync(folderRSN, folderRSNSpecified, complaintFolderRSN, complaintFolderRSNSpecified, null);
    }
    
    public void getFolderFoiComplaintListByFolderRSNAsync(final int folderRSN,final boolean folderRSNSpecified,final int complaintFolderRSN,final boolean complaintFolderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFoiComplaintFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFoiComplaintFolder doInBackground(Void... params) {
                return getFolderFoiComplaintListByFolderRSN(folderRSN, folderRSNSpecified, complaintFolderRSN, complaintFolderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFoiComplaintFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFoiComplaintListByFolderRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFoiComplaintFolder getFolderFoiComplaintListByFolderRSN(int folderRSN,boolean folderRSNSpecified,int complaintFolderRSN,boolean complaintFolderRSNSpecified){
        return getFolderFoiComplaintListByFolderRSN(folderRSN, folderRSNSpecified, complaintFolderRSN, complaintFolderRSNSpecified, null);
    }
    
    public VectorwsFoiComplaintFolder getFolderFoiComplaintListByFolderRSN(int folderRSN,boolean folderRSNSpecified,int complaintFolderRSN,boolean complaintFolderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFoiComplaintListByFolderRSN");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("complaintFolderRSN",complaintFolderRSN);
        soapReq.addProperty("complaintFolderRSNSpecified",complaintFolderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFoiComplaintListByFolderRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFoiComplaintListByFolderRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFoiComplaintFolder resultVariable = new VectorwsFoiComplaintFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateProcessAttachmentAsync(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateProcessAttachmentAsync(processRSN, processRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void updateProcessAttachmentAsync(final int processRSN,final boolean processRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateProcessAttachment(processRSN, processRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateProcessAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean updateProcessAttachment(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return updateProcessAttachment(processRSN, processRSNSpecified, attachment, attachmentContent, null);
    }
    
    public boolean updateProcessAttachment(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateProcessAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateProcessAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateProcessAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addFolderFreeformAsync(wsFolderFreeform wsFolderFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderFreeformAsync(wsFolderFreeform, null);
    }
    
    public void addFolderFreeformAsync(final wsFolderFreeform wsFolderFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolderFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolderFreeform doInBackground(Void... params) {
                return addFolderFreeform(wsFolderFreeform, headers);
            }
            @Override
            protected void onPostExecute(wsFolderFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderFreeform", result);
                }
            }
        }.execute();
    }
    
    public wsFolderFreeform addFolderFreeform(wsFolderFreeform wsFolderFreeform){
        return addFolderFreeform(wsFolderFreeform, null);
    }
    
    public wsFolderFreeform addFolderFreeform(wsFolderFreeform wsFolderFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderFreeform");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsFolderFreeform",new wsFolderFreeform().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("wsFolderFreeform",wsFolderFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolderFreeform resultVariable =  new wsFolderFreeform (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderInfoAsync(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderInfoAsync(folderRSN, folderRSNSpecified, displayOptions, null);
    }
    
    public void getFolderInfoAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsDisplayInfoOptionFlag displayOptions,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderInfo doInBackground(Void... params) {
                return getFolderInfo(folderRSN, folderRSNSpecified, displayOptions, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderInfo getFolderInfo(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions){
        return getFolderInfo(folderRSN, folderRSNSpecified, displayOptions, null);
    }
    
    public VectorwsFolderInfo getFolderInfo(int folderRSN,boolean folderRSNSpecified,VectorwsDisplayInfoOptionFlag displayOptions,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderInfo");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("displayOptions",displayOptions);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderInfo resultVariable = new VectorwsFolderInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidStreetTypesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidStreetTypesAsync(null);
    }
    
    public void getValidStreetTypesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidStreetType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidStreetType doInBackground(Void... params) {
                return getValidStreetTypes(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidStreetType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidStreetTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidStreetType getValidStreetTypes(){
        return getValidStreetTypes(null);
    }
    
    public VectorwsValidStreetType getValidStreetTypes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidStreetTypes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidStreetTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidStreetTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidStreetType resultVariable = new VectorwsValidStreetType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAssociatedPartiesAsync(int peopleRSN,boolean peopleRSNSpecified,int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAssociatedPartiesAsync(peopleRSN, peopleRSNSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public void getAssociatedPartiesAsync(final int peopleRSN,final boolean peopleRSNSpecified,final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAssociatedParty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAssociatedParty doInBackground(Void... params) {
                return getAssociatedParties(peopleRSN, peopleRSNSpecified, folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAssociatedParty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAssociatedParties", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAssociatedParty getAssociatedParties(int peopleRSN,boolean peopleRSNSpecified,int folderRSN,boolean folderRSNSpecified){
        return getAssociatedParties(peopleRSN, peopleRSNSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsAssociatedParty getAssociatedParties(int peopleRSN,boolean peopleRSNSpecified,int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAssociatedParties");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAssociatedParties", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAssociatedParties", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAssociatedParty resultVariable = new VectorwsAssociatedParty(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPeopleGroupAsync(wsPeopleGroupRequest wsPeopleGroupRequest) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleGroupAsync(wsPeopleGroupRequest, null);
    }
    
    public void getPeopleGroupAsync(final wsPeopleGroupRequest wsPeopleGroupRequest,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeopleGroup>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeopleGroup doInBackground(Void... params) {
                return getPeopleGroup(wsPeopleGroupRequest, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeopleGroup result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleGroup", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeopleGroup getPeopleGroup(wsPeopleGroupRequest wsPeopleGroupRequest){
        return getPeopleGroup(wsPeopleGroupRequest, null);
    }
    
    public VectorwsPeopleGroup getPeopleGroup(wsPeopleGroupRequest wsPeopleGroupRequest,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleGroup");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsPeopleGroupRequest",new wsPeopleGroupRequest().getClass());
        soapReq.addProperty("wsPeopleGroupRequest",wsPeopleGroupRequest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleGroup", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleGroup", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeopleGroup resultVariable = new VectorwsPeopleGroup(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderFeeAsync(VectorInt32 folderRSN,boolean unpaidOnly,boolean unpaidOnlySpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFeeAsync(folderRSN, unpaidOnly, unpaidOnlySpecified, null);
    }
    
    public void getFolderFeeAsync(final VectorInt32 folderRSN,final boolean unpaidOnly,final boolean unpaidOnlySpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFee doInBackground(Void... params) {
                return getFolderFee(folderRSN, unpaidOnly, unpaidOnlySpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFee", result);
                }
            }
        }.execute();
    }
    
    public wsFee getFolderFee(VectorInt32 folderRSN,boolean unpaidOnly,boolean unpaidOnlySpecified){
        return getFolderFee(folderRSN, unpaidOnly, unpaidOnlySpecified, null);
    }
    
    public wsFee getFolderFee(VectorInt32 folderRSN,boolean unpaidOnly,boolean unpaidOnlySpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFee");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("unpaidOnly",unpaidOnly);
        soapReq.addProperty("unpaidOnlySpecified",unpaidOnlySpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFee", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFee resultVariable =  new wsFee (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteAttachmentInfoAsync(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteAttachmentInfoAsync(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, null);
    }
    
    public void deleteAttachmentInfoAsync(final int attachmentRSN,final boolean attachmentRSNSpecified,final VectorInt32 attachmentInfoCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteAttachmentInfo(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteAttachmentInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteAttachmentInfo(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode){
        return deleteAttachmentInfo(attachmentRSN, attachmentRSNSpecified, attachmentInfoCode, null);
    }
    
    public boolean deleteAttachmentInfo(int attachmentRSN,boolean attachmentRSNSpecified,VectorInt32 attachmentInfoCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteAttachmentInfo");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapReq.addProperty("attachmentInfoCode",attachmentInfoCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteAttachmentInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteAttachmentInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidChargeUnitAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChargeUnitAsync(null);
    }
    
    public void getValidChargeUnitAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidChargeUnit>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidChargeUnit doInBackground(Void... params) {
                return getValidChargeUnit(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidChargeUnit result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidChargeUnit", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidChargeUnit getValidChargeUnit(){
        return getValidChargeUnit(null);
    }
    
    public VectorwsValidChargeUnit getValidChargeUnit(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidChargeUnit");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidChargeUnit", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidChargeUnit", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidChargeUnit resultVariable = new VectorwsValidChargeUnit(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void associateFolderProcessPeopleAsync(int peopleRSN,boolean peopleRSNSpecified,int processRSN,boolean processRSNSpecified,int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        associateFolderProcessPeopleAsync(peopleRSN, peopleRSNSpecified, processRSN, processRSNSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public void associateFolderProcessPeopleAsync(final int peopleRSN,final boolean peopleRSNSpecified,final int processRSN,final boolean processRSNSpecified,final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return associateFolderProcessPeople(peopleRSN, peopleRSNSpecified, processRSN, processRSNSpecified, folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("associateFolderProcessPeople", result);
                }
            }
        }.execute();
    }
    
    public boolean associateFolderProcessPeople(int peopleRSN,boolean peopleRSNSpecified,int processRSN,boolean processRSNSpecified,int folderRSN,boolean folderRSNSpecified){
        return associateFolderProcessPeople(peopleRSN, peopleRSNSpecified, processRSN, processRSNSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public boolean associateFolderProcessPeople(int peopleRSN,boolean peopleRSNSpecified,int processRSN,boolean processRSNSpecified,int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","associateFolderProcessPeople");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:associateFolderProcessPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:associateFolderProcessPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addNewJemsCivilCaseAsync(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addNewJemsCivilCaseAsync(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public void addNewJemsCivilCaseAsync(final wsFolder folder,final int peopleRSN,final boolean peopleRSNSpecified,final VectorwsFolderProperty folderProperty,final VectorwsFolderPeople folderPeople,final VectorwsFolderInfo folderInfo,final VectorwsFolderFixture folderFixture,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addNewJemsCivilCase(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addNewJemsCivilCase", result);
                }
            }
        }.execute();
    }
    
    public int addNewJemsCivilCase(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture){
        return addNewJemsCivilCase(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public int addNewJemsCivilCase(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addNewJemsCivilCase");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","folder",new wsFolder().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("folder",folder);
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("folderProperty",folderProperty);
        soapReq.addProperty("folderPeople",folderPeople);
        soapReq.addProperty("folderInfo",folderInfo);
        soapReq.addProperty("folderFixture",folderFixture);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addNewJemsCivilCase", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addNewJemsCivilCase", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void deletePropertyFreeformAsync(VectorwsPropertyFreeFormPK wsPropertyFreeformPK) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deletePropertyFreeformAsync(wsPropertyFreeformPK, null);
    }
    
    public void deletePropertyFreeformAsync(final VectorwsPropertyFreeFormPK wsPropertyFreeformPK,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deletePropertyFreeform(wsPropertyFreeformPK, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deletePropertyFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean deletePropertyFreeform(VectorwsPropertyFreeFormPK wsPropertyFreeformPK){
        return deletePropertyFreeform(wsPropertyFreeformPK, null);
    }
    
    public boolean deletePropertyFreeform(VectorwsPropertyFreeFormPK wsPropertyFreeformPK,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deletePropertyFreeform");
        soapReq.addProperty("wsPropertyFreeformPK",wsPropertyFreeformPK);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deletePropertyFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deletePropertyFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addFolderFixtureAsync(VectorwsFolderFixture folderFixtures) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderFixtureAsync(folderFixtures, null);
    }
    
    public void addFolderFixtureAsync(final VectorwsFolderFixture folderFixtures,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFolderFixture(folderFixtures, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderFixture", result);
                }
            }
        }.execute();
    }
    
    public boolean addFolderFixture(VectorwsFolderFixture folderFixtures){
        return addFolderFixture(folderFixtures, null);
    }
    
    public boolean addFolderFixture(VectorwsFolderFixture folderFixtures,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderFixture");
        soapReq.addProperty("folderFixtures",folderFixtures);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderFixture", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderFixture", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addNewFolderAsync(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addNewFolderAsync(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public void addNewFolderAsync(final wsFolder folder,final int peopleRSN,final boolean peopleRSNSpecified,final VectorwsFolderProperty folderProperty,final VectorwsFolderPeople folderPeople,final VectorwsFolderInfo folderInfo,final VectorwsFolderFixture folderFixture,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addNewFolder(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addNewFolder", result);
                }
            }
        }.execute();
    }
    
    public int addNewFolder(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture){
        return addNewFolder(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public int addNewFolder(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addNewFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","folder",new wsFolder().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("folder",folder);
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("folderProperty",folderProperty);
        soapReq.addProperty("folderPeople",folderPeople);
        soapReq.addProperty("folderInfo",folderInfo);
        soapReq.addProperty("folderFixture",folderFixture);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addNewFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addNewFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void deleteFolderFreeformAsync(VectorwsFolderFreeformPK wsFolderFreeformPK) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderFreeformAsync(wsFolderFreeformPK, null);
    }
    
    public void deleteFolderFreeformAsync(final VectorwsFolderFreeformPK wsFolderFreeformPK,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderFreeform(wsFolderFreeformPK, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderFreeform(VectorwsFolderFreeformPK wsFolderFreeformPK){
        return deleteFolderFreeform(wsFolderFreeformPK, null);
    }
    
    public boolean deleteFolderFreeform(VectorwsFolderFreeformPK wsFolderFreeformPK,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderFreeform");
        soapReq.addProperty("wsFolderFreeformPK",wsFolderFreeformPK);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidFolderStatusesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFolderStatusesAsync(null);
    }
    
    public void getValidFolderStatusesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderStatus>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderStatus doInBackground(Void... params) {
                return getValidFolderStatuses(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderStatus result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFolderStatuses", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderStatus getValidFolderStatuses(){
        return getValidFolderStatuses(null);
    }
    
    public VectorwsValidFolderStatus getValidFolderStatuses(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFolderStatuses");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFolderStatuses", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFolderStatuses", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderStatus resultVariable = new VectorwsValidFolderStatus(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addProcessFreeformAsync(wsProcessFreeForm wsProcessFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addProcessFreeformAsync(wsProcessFreeform, null);
    }
    
    public void addProcessFreeformAsync(final wsProcessFreeForm wsProcessFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsProcessFreeForm>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsProcessFreeForm doInBackground(Void... params) {
                return addProcessFreeform(wsProcessFreeform, headers);
            }
            @Override
            protected void onPostExecute(wsProcessFreeForm result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addProcessFreeform", result);
                }
            }
        }.execute();
    }
    
    public wsProcessFreeForm addProcessFreeform(wsProcessFreeForm wsProcessFreeform){
        return addProcessFreeform(wsProcessFreeform, null);
    }
    
    public wsProcessFreeForm addProcessFreeform(wsProcessFreeForm wsProcessFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addProcessFreeform");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsProcessFreeform",new wsProcessFreeForm().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("wsProcessFreeform",wsProcessFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addProcessFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addProcessFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsProcessFreeForm resultVariable =  new wsProcessFreeForm (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePropertyFreeformAsync(VectorwsPropertyFreeform wsPropertyFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePropertyFreeformAsync(wsPropertyFreeform, null);
    }
    
    public void updatePropertyFreeformAsync(final VectorwsPropertyFreeform wsPropertyFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePropertyFreeform(wsPropertyFreeform, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePropertyFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePropertyFreeform(VectorwsPropertyFreeform wsPropertyFreeform){
        return updatePropertyFreeform(wsPropertyFreeform, null);
    }
    
    public boolean updatePropertyFreeform(VectorwsPropertyFreeform wsPropertyFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePropertyFreeform");
        soapReq.addProperty("wsPropertyFreeform",wsPropertyFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePropertyFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePropertyFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getNextWorkingDateAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getNextWorkingDateAsync(null);
    }
    
    public void getNextWorkingDateAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getNextWorkingDate(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getNextWorkingDate", result);
                }
            }
        }.execute();
    }
    
    public void getNextWorkingDate(){
        getNextWorkingDate(null);
    }
    
    public void getNextWorkingDate(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getNextWorkingDate");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getNextWorkingDate", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getNextWorkingDate", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getDefaultConditionsAsync(VectorString folderType) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDefaultConditionsAsync(folderType, null);
    }
    
    public void getDefaultConditionsAsync(final VectorString folderType,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsDefaultCondition>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsDefaultCondition doInBackground(Void... params) {
                return getDefaultConditions(folderType, headers);
            }
            @Override
            protected void onPostExecute(VectorwsDefaultCondition result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDefaultConditions", result);
                }
            }
        }.execute();
    }
    
    public VectorwsDefaultCondition getDefaultConditions(VectorString folderType){
        return getDefaultConditions(folderType, null);
    }
    
    public VectorwsDefaultCondition getDefaultConditions(VectorString folderType,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getDefaultConditions");
        soapReq.addProperty("folderType",folderType);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getDefaultConditions", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getDefaultConditions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsDefaultCondition resultVariable = new VectorwsDefaultCondition(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderPropertyAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderPropertyAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderPropertyAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProperty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProperty doInBackground(Void... params) {
                return getFolderProperty(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProperty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderProperty", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProperty getFolderProperty(int folderRSN,boolean folderRSNSpecified){
        return getFolderProperty(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderProperty getFolderProperty(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderProperty");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProperty resultVariable = new VectorwsFolderProperty(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePeopleAttachmentAsync(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleAttachmentAsync(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void updatePeopleAttachmentAsync(final int peopleRSN,final boolean peopleRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeopleAttachment(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeopleAttachment", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeopleAttachment(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return updatePeopleAttachment(peopleRSN, peopleRSNSpecified, attachment, attachmentContent, null);
    }
    
    public boolean updatePeopleAttachment(int peopleRSN,boolean peopleRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeopleAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeopleAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeopleAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void updateFoiFolderAsync(wsFoiFolder argFolderFOI) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFoiFolderAsync(argFolderFOI, null);
    }
    
    public void updateFoiFolderAsync(final wsFoiFolder argFolderFOI,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFoiFolder(argFolderFOI, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFoiFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFoiFolder(wsFoiFolder argFolderFOI){
        return updateFoiFolder(argFolderFOI, null);
    }
    
    public boolean updateFoiFolder(wsFoiFolder argFolderFOI,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFoiFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOI",new wsFoiFolder().getClass());
        soapReq.addProperty("argFolderFOI",argFolderFOI);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFoiFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFoiFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderFreeFormAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFreeFormAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderFreeFormAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderFreeform doInBackground(Void... params) {
                return getFolderFreeForm(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderFreeform getFolderFreeForm(int folderRSN,boolean folderRSNSpecified){
        return getFolderFreeForm(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderFreeform getFolderFreeForm(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFreeForm");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderFreeform resultVariable = new VectorwsFolderFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void searchFolderCountAsync(VectorwsSearchCriteria criteria) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchFolderCountAsync(criteria, null);
    }
    
    public void searchFolderCountAsync(final VectorwsSearchCriteria criteria,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return searchFolderCount(criteria, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchFolderCount", result);
                }
            }
        }.execute();
    }
    
    public int searchFolderCount(VectorwsSearchCriteria criteria){
        return searchFolderCount(criteria, null);
    }
    
    public int searchFolderCount(VectorwsSearchCriteria criteria,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchFolderCount");
        soapReq.addProperty("criteria",criteria);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchFolderCount", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchFolderCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void getPeopleInfoAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleInfoAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getPeopleInfoAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeopleInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeopleInfo doInBackground(Void... params) {
                return getPeopleInfo(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeopleInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeopleInfo getPeopleInfo(int peopleRSN,boolean peopleRSNSpecified){
        return getPeopleInfo(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsPeopleInfo getPeopleInfo(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleInfo");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeopleInfo resultVariable = new VectorwsPeopleInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteLinkAsync(int myOfficeRSN,boolean myOfficeRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteLinkAsync(myOfficeRSN, myOfficeRSNSpecified, null);
    }
    
    public void deleteLinkAsync(final int myOfficeRSN,final boolean myOfficeRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteLink(myOfficeRSN, myOfficeRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteLink", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteLink(int myOfficeRSN,boolean myOfficeRSNSpecified){
        return deleteLink(myOfficeRSN, myOfficeRSNSpecified, null);
    }
    
    public boolean deleteLink(int myOfficeRSN,boolean myOfficeRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteLink");
        soapReq.addProperty("myOfficeRSN",myOfficeRSN);
        soapReq.addProperty("myOfficeRSNSpecified",myOfficeRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteLink", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteLink", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void deleteFolderPropertyAsync(VectorwsFolderProperty folderProperty) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderPropertyAsync(folderProperty, null);
    }
    
    public void deleteFolderPropertyAsync(final VectorwsFolderProperty folderProperty,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderProperty(folderProperty, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderProperty", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderProperty(VectorwsFolderProperty folderProperty){
        return deleteFolderProperty(folderProperty, null);
    }
    
    public boolean deleteFolderProperty(VectorwsFolderProperty folderProperty,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderProperty");
        soapReq.addProperty("folderProperty",folderProperty);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void searchPeopleAsync(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        searchPeopleAsync(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public void searchPeopleAsync(final VectorwsSearchCriteria criteria,final int startIndex,final boolean startIndexSpecified,final int count,final boolean countSpecified,final VectorString orderBy,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPeople>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPeople doInBackground(Void... params) {
                return searchPeople(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPeople result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("searchPeople", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPeople searchPeople(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy){
        return searchPeople(criteria, startIndex, startIndexSpecified, count, countSpecified, orderBy, null);
    }
    
    public VectorwsPeople searchPeople(VectorwsSearchCriteria criteria,int startIndex,boolean startIndexSpecified,int count,boolean countSpecified,VectorString orderBy,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","searchPeople");
        soapReq.addProperty("criteria",criteria);
        soapReq.addProperty("startIndex",startIndex);
        soapReq.addProperty("startIndexSpecified",startIndexSpecified);
        soapReq.addProperty("count",count);
        soapReq.addProperty("countSpecified",countSpecified);
        soapReq.addProperty("orderBy",orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:searchPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:searchPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPeople resultVariable = new VectorwsPeople(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidInfoValuesAsync(int infoCode,boolean infoCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidInfoValuesAsync(infoCode, infoCodeSpecified, null);
    }
    
    public void getValidInfoValuesAsync(final int infoCode,final boolean infoCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidInfoValue>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidInfoValue doInBackground(Void... params) {
                return getValidInfoValues(infoCode, infoCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidInfoValue result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidInfoValues", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidInfoValue getValidInfoValues(int infoCode,boolean infoCodeSpecified){
        return getValidInfoValues(infoCode, infoCodeSpecified, null);
    }
    
    public VectorwsValidInfoValue getValidInfoValues(int infoCode,boolean infoCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidInfoValues");
        soapReq.addProperty("infoCode",infoCode);
        soapReq.addProperty("infoCodeSpecified",infoCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidInfoValues", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidInfoValues", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidInfoValue resultVariable = new VectorwsValidInfoValue(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidSecurityQuestionsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidSecurityQuestionsAsync(null);
    }
    
    public void getValidSecurityQuestionsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidSecurityQuestion>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidSecurityQuestion doInBackground(Void... params) {
                return getValidSecurityQuestions(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidSecurityQuestion result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidSecurityQuestions", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidSecurityQuestion getValidSecurityQuestions(){
        return getValidSecurityQuestions(null);
    }
    
    public VectorwsValidSecurityQuestion getValidSecurityQuestions(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidSecurityQuestions");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidSecurityQuestions", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidSecurityQuestions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidSecurityQuestion resultVariable = new VectorwsValidSecurityQuestion(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getInspectionFolderAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getInspectionFolderAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getInspectionFolderAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return getInspectionFolder(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getInspectionFolder", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder getInspectionFolder(int peopleRSN,boolean peopleRSNSpecified){
        return getInspectionFolder(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsFolder getInspectionFolder(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getInspectionFolder");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getInspectionFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getInspectionFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateCheckListAsync(VectorwsFolderProcessChecklist folderProcessChecklists) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateCheckListAsync(folderProcessChecklists, null);
    }
    
    public void updateCheckListAsync(final VectorwsFolderProcessChecklist folderProcessChecklists,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateCheckList(folderProcessChecklists, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateCheckList", result);
                }
            }
        }.execute();
    }
    
    public boolean updateCheckList(VectorwsFolderProcessChecklist folderProcessChecklists){
        return updateCheckList(folderProcessChecklists, null);
    }
    
    public boolean updateCheckList(VectorwsFolderProcessChecklist folderProcessChecklists,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateCheckList");
        soapReq.addProperty("folderProcessChecklists",folderProcessChecklists);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateCheckList", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateCheckList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getProcessInfoAsync(VectorInt32 processRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessInfoAsync(processRSN, null);
    }
    
    public void getProcessInfoAsync(final VectorInt32 processRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessInfo doInBackground(Void... params) {
                return getProcessInfo(processRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessInfo getProcessInfo(VectorInt32 processRSN){
        return getProcessInfo(processRSN, null);
    }
    
    public VectorwsFolderProcessInfo getProcessInfo(VectorInt32 processRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessInfo");
        soapReq.addProperty("processRSN",processRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessInfo resultVariable = new VectorwsFolderProcessInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteFolderProcessAsync(int folderRSN,boolean folderRSNSpecified,VectorInt32 processRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderProcessAsync(folderRSN, folderRSNSpecified, processRSN, null);
    }
    
    public void deleteFolderProcessAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorInt32 processRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolderProcess(folderRSN, folderRSNSpecified, processRSN, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolderProcess", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolderProcess(int folderRSN,boolean folderRSNSpecified,VectorInt32 processRSN){
        return deleteFolderProcess(folderRSN, folderRSNSpecified, processRSN, null);
    }
    
    public boolean deleteFolderProcess(int folderRSN,boolean folderRSNSpecified,VectorInt32 processRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolderProcess");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("processRSN",processRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolderProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolderProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getPropertyInfoAsync(int propertyRSN,boolean propertyRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyInfoAsync(propertyRSN, propertyRSNSpecified, null);
    }
    
    public void getPropertyInfoAsync(final int propertyRSN,final boolean propertyRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPropertyInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPropertyInfo doInBackground(Void... params) {
                return getPropertyInfo(propertyRSN, propertyRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPropertyInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPropertyInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPropertyInfo getPropertyInfo(int propertyRSN,boolean propertyRSNSpecified){
        return getPropertyInfo(propertyRSN, propertyRSNSpecified, null);
    }
    
    public VectorwsPropertyInfo getPropertyInfo(int propertyRSN,boolean propertyRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPropertyInfo");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPropertyInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPropertyInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPropertyInfo resultVariable = new VectorwsPropertyInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAccountBillAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAccountBillAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getAccountBillAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAccountBill>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAccountBill doInBackground(Void... params) {
                return getAccountBill(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAccountBill result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAccountBill", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAccountBill getAccountBill(int folderRSN,boolean folderRSNSpecified){
        return getAccountBill(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsAccountBill getAccountBill(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAccountBill");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAccountBill", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAccountBill", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAccountBill resultVariable = new VectorwsAccountBill(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessByFreeFormAsync(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessByFreeFormAsync(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, null);
    }
    
    public void getProcessByFreeFormAsync(final int freeFormCode,final boolean freeFormCodeSpecified,final String freeFormColumn,final String freeFormValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return getProcessByFreeForm(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessByFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess getProcessByFreeForm(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue){
        return getProcessByFreeForm(freeFormCode, freeFormCodeSpecified, freeFormColumn, freeFormValue, null);
    }
    
    public VectorwsFolderProcess getProcessByFreeForm(int freeFormCode,boolean freeFormCodeSpecified,String freeFormColumn,String freeFormValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessByFreeForm");
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapReq.addProperty("freeFormCodeSpecified",freeFormCodeSpecified);
        soapReq.addProperty("freeFormColumn",freeFormColumn);
        soapReq.addProperty("freeFormValue",freeFormValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessByFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessByFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidAgencyAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidAgencyAsync(null);
    }
    
    public void getValidAgencyAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidAgency>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidAgency doInBackground(Void... params) {
                return getValidAgency(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidAgency result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidAgency", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidAgency getValidAgency(){
        return getValidAgency(null);
    }
    
    public VectorwsValidAgency getValidAgency(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidAgency");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidAgency", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidAgency", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidAgency resultVariable = new VectorwsValidAgency(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidCityAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidCityAsync(null);
    }
    
    public void getValidCityAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidCity>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidCity doInBackground(Void... params) {
                return getValidCity(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidCity result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidCity", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidCity getValidCity(){
        return getValidCity(null);
    }
    
    public VectorwsValidCity getValidCity(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidCity");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidCity", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidCity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidCity resultVariable = new VectorwsValidCity(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderAsync(wsFolder argFolder) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderAsync(argFolder, null);
    }
    
    public void updateFolderAsync(final wsFolder argFolder,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolder(argFolder, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolder(wsFolder argFolder){
        return updateFolder(argFolder, null);
    }
    
    public boolean updateFolder(wsFolder argFolder,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolder",new wsFolder().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("argFolder",argFolder);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderByPeopleAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderByPeopleAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getFolderByPeopleAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return getFolderByPeople(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderByPeople", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder getFolderByPeople(int peopleRSN,boolean peopleRSNSpecified){
        return getFolderByPeople(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsFolder getFolderByPeople(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderByPeople");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderByPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderByPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPropertyAsync(int propertyRSN,boolean propertyRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyAsync(propertyRSN, propertyRSNSpecified, null);
    }
    
    public void getPropertyAsync(final int propertyRSN,final boolean propertyRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsProperty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsProperty doInBackground(Void... params) {
                return getProperty(propertyRSN, propertyRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsProperty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProperty", result);
                }
            }
        }.execute();
    }
    
    public wsProperty getProperty(int propertyRSN,boolean propertyRSNSpecified){
        return getProperty(propertyRSN, propertyRSNSpecified, null);
    }
    
    public wsProperty getProperty(int propertyRSN,boolean propertyRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProperty");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsProperty resultVariable =  new wsProperty (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidChargeAsync(VectorString chargeTypes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChargeAsync(chargeTypes, null);
    }
    
    public void getValidChargeAsync(final VectorString chargeTypes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidCharge>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidCharge doInBackground(Void... params) {
                return getValidCharge(chargeTypes, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidCharge result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidCharge", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidCharge getValidCharge(VectorString chargeTypes){
        return getValidCharge(chargeTypes, null);
    }
    
    public VectorwsValidCharge getValidCharge(VectorString chargeTypes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidCharge");
        soapReq.addProperty("chargeTypes",chargeTypes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidCharge", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidCharge", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidCharge resultVariable = new VectorwsValidCharge(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateAttachmentInfoAsync(VectorwsAttachmentInfo attachmentInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateAttachmentInfoAsync(attachmentInfo, null);
    }
    
    public void updateAttachmentInfoAsync(final VectorwsAttachmentInfo attachmentInfo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateAttachmentInfo(attachmentInfo, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateAttachmentInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean updateAttachmentInfo(VectorwsAttachmentInfo attachmentInfo){
        return updateAttachmentInfo(attachmentInfo, null);
    }
    
    public boolean updateAttachmentInfo(VectorwsAttachmentInfo attachmentInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateAttachmentInfo");
        soapReq.addProperty("attachmentInfo",attachmentInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateAttachmentInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateAttachmentInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getProcessFeeAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessFeeAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getProcessFeeAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProcessFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProcessFee doInBackground(Void... params) {
                return getProcessFee(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProcessFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessFee", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProcessFee getProcessFee(int processRSN,boolean processRSNSpecified){
        return getProcessFee(processRSN, processRSNSpecified, null);
    }
    
    public VectorwsProcessFee getProcessFee(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessFee");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessFee", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProcessFee resultVariable = new VectorwsProcessFee(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void completeFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        completeFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void completeFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return completeFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("completeFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder completeFolder(int folderRSN,boolean folderRSNSpecified){
        return completeFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolder completeFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","completeFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:completeFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:completeFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAttachmentByInfoAsync(int attachmentInfoCode,boolean attachmentInfoCodeSpecified,String attachmentInfoValue) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAttachmentByInfoAsync(attachmentInfoCode, attachmentInfoCodeSpecified, attachmentInfoValue, null);
    }
    
    public void getAttachmentByInfoAsync(final int attachmentInfoCode,final boolean attachmentInfoCodeSpecified,final String attachmentInfoValue,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachment doInBackground(Void... params) {
                return getAttachmentByInfo(attachmentInfoCode, attachmentInfoCodeSpecified, attachmentInfoValue, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAttachmentByInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachment getAttachmentByInfo(int attachmentInfoCode,boolean attachmentInfoCodeSpecified,String attachmentInfoValue){
        return getAttachmentByInfo(attachmentInfoCode, attachmentInfoCodeSpecified, attachmentInfoValue, null);
    }
    
    public VectorwsAttachment getAttachmentByInfo(int attachmentInfoCode,boolean attachmentInfoCodeSpecified,String attachmentInfoValue,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAttachmentByInfo");
        soapReq.addProperty("attachmentInfoCode",attachmentInfoCode);
        soapReq.addProperty("attachmentInfoCodeSpecified",attachmentInfoCodeSpecified);
        soapReq.addProperty("attachmentInfoValue",attachmentInfoValue);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAttachmentByInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAttachmentByInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachment resultVariable = new VectorwsAttachment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePropertyAsync(wsProperty property) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePropertyAsync(property, null);
    }
    
    public void updatePropertyAsync(final wsProperty property,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateProperty(property, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateProperty", result);
                }
            }
        }.execute();
    }
    
    public boolean updateProperty(wsProperty property){
        return updateProperty(property, null);
    }
    
    public boolean updateProperty(wsProperty property,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateProperty");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","property",new wsProperty().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("property",property);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getProcessFreeFormAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessFreeFormAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getProcessFreeFormAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProcessFreeForm>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProcessFreeForm doInBackground(Void... params) {
                return getProcessFreeForm(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProcessFreeForm result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProcessFreeForm getProcessFreeForm(int processRSN,boolean processRSNSpecified){
        return getProcessFreeForm(processRSN, processRSNSpecified, null);
    }
    
    public VectorwsProcessFreeForm getProcessFreeForm(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessFreeForm");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProcessFreeForm resultVariable = new VectorwsProcessFreeForm(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessValidInfoByInfoCodeAsync(int infoCode,boolean infoCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessValidInfoByInfoCodeAsync(infoCode, infoCodeSpecified, null);
    }
    
    public void getProcessValidInfoByInfoCodeAsync(final int infoCode,final boolean infoCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsProcessValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsProcessValidInfo doInBackground(Void... params) {
                return getProcessValidInfoByInfoCode(infoCode, infoCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsProcessValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessValidInfoByInfoCode", result);
                }
            }
        }.execute();
    }
    
    public wsProcessValidInfo getProcessValidInfoByInfoCode(int infoCode,boolean infoCodeSpecified){
        return getProcessValidInfoByInfoCode(infoCode, infoCodeSpecified, null);
    }
    
    public wsProcessValidInfo getProcessValidInfoByInfoCode(int infoCode,boolean infoCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessValidInfoByInfoCode");
        soapReq.addProperty("infoCode",infoCode);
        soapReq.addProperty("infoCodeSpecified",infoCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessValidInfoByInfoCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessValidInfoByInfoCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsProcessValidInfo resultVariable =  new wsProcessValidInfo (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAttachmentValidInfoAsync(int attachmentRSN,boolean attachmentRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAttachmentValidInfoAsync(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public void getAttachmentValidInfoAsync(final int attachmentRSN,final boolean attachmentRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidAttachmentInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidAttachmentInfo doInBackground(Void... params) {
                return getAttachmentValidInfo(attachmentRSN, attachmentRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidAttachmentInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAttachmentValidInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidAttachmentInfo getAttachmentValidInfo(int attachmentRSN,boolean attachmentRSNSpecified){
        return getAttachmentValidInfo(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public VectorwsValidAttachmentInfo getAttachmentValidInfo(int attachmentRSN,boolean attachmentRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAttachmentValidInfo");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAttachmentValidInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAttachmentValidInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidAttachmentInfo resultVariable = new VectorwsValidAttachmentInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidAccountFeeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidAccountFeeAsync(null);
    }
    
    public void getValidAccountFeeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidAccountFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidAccountFee doInBackground(Void... params) {
                return getValidAccountFee(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidAccountFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidAccountFee", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidAccountFee getValidAccountFee(){
        return getValidAccountFee(null);
    }
    
    public VectorwsValidAccountFee getValidAccountFee(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidAccountFee");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidAccountFee", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidAccountFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidAccountFee resultVariable = new VectorwsValidAccountFee(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidFoiDispositionAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFoiDispositionAsync(null);
    }
    
    public void getValidFoiDispositionAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFoiDisposition>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFoiDisposition doInBackground(Void... params) {
                return getValidFoiDisposition(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFoiDisposition result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFoiDisposition", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFoiDisposition getValidFoiDisposition(){
        return getValidFoiDisposition(null);
    }
    
    public VectorwsValidFoiDisposition getValidFoiDisposition(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFoiDisposition");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFoiDisposition", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFoiDisposition", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFoiDisposition resultVariable = new VectorwsValidFoiDisposition(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderFixtureAsync(VectorwsFolderFixture folderFixtures) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderFixtureAsync(folderFixtures, null);
    }
    
    public void updateFolderFixtureAsync(final VectorwsFolderFixture folderFixtures,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderFixture(folderFixtures, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderFixture", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderFixture(VectorwsFolderFixture folderFixtures){
        return updateFolderFixture(folderFixtures, null);
    }
    
    public boolean updateFolderFixture(VectorwsFolderFixture folderFixtures,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderFixture");
        soapReq.addProperty("folderFixtures",folderFixtures);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderFixture", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderFixture", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void updateFolderFreeformAsync(VectorwsFolderFreeform wsFolderFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderFreeformAsync(wsFolderFreeform, null);
    }
    
    public void updateFolderFreeformAsync(final VectorwsFolderFreeform wsFolderFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderFreeform(wsFolderFreeform, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderFreeform(VectorwsFolderFreeform wsFolderFreeform){
        return updateFolderFreeform(wsFolderFreeform, null);
    }
    
    public boolean updateFolderFreeform(VectorwsFolderFreeform wsFolderFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderFreeform");
        soapReq.addProperty("wsFolderFreeform",wsFolderFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getPeopleWithFolderAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPeopleWithFolderAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getPeopleWithFolderAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPeopleFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsPeopleFolder doInBackground(Void... params) {
                return getPeopleWithFolder(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsPeopleFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPeopleWithFolder", result);
                }
            }
        }.execute();
    }
    
    public wsPeopleFolder getPeopleWithFolder(int peopleRSN,boolean peopleRSNSpecified){
        return getPeopleWithFolder(peopleRSN, peopleRSNSpecified, null);
    }
    
    public wsPeopleFolder getPeopleWithFolder(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPeopleWithFolder");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPeopleWithFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPeopleWithFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPeopleFolder resultVariable =  new wsPeopleFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addReviseFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addReviseFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void addReviseFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addReviseFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addReviseFolder", result);
                }
            }
        }.execute();
    }
    
    public int addReviseFolder(int folderRSN,boolean folderRSNSpecified){
        return addReviseFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public int addReviseFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addReviseFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addReviseFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addReviseFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void updatePropertyInfoAsync(int propertyRSN,boolean propertyRSNSpecified,VectorwsPropertyInfo propertyInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePropertyInfoAsync(propertyRSN, propertyRSNSpecified, propertyInfo, null);
    }
    
    public void updatePropertyInfoAsync(final int propertyRSN,final boolean propertyRSNSpecified,final VectorwsPropertyInfo propertyInfo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePropertyInfo(propertyRSN, propertyRSNSpecified, propertyInfo, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePropertyInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePropertyInfo(int propertyRSN,boolean propertyRSNSpecified,VectorwsPropertyInfo propertyInfo){
        return updatePropertyInfo(propertyRSN, propertyRSNSpecified, propertyInfo, null);
    }
    
    public boolean updatePropertyInfo(int propertyRSN,boolean propertyRSNSpecified,VectorwsPropertyInfo propertyInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePropertyInfo");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapReq.addProperty("propertyInfo",propertyInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePropertyInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePropertyInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderFoiByFolderRSNAsync(int folderRSN,int requesterRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFoiByFolderRSNAsync(folderRSN, requesterRSN, null);
    }
    
    public void getFolderFoiByFolderRSNAsync(final int folderRSN,final int requesterRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFoiFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFoiFolder doInBackground(Void... params) {
                return getFolderFoiByFolderRSN(folderRSN, requesterRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFoiFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFoiByFolderRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFoiFolder getFolderFoiByFolderRSN(int folderRSN,int requesterRSN){
        return getFolderFoiByFolderRSN(folderRSN, requesterRSN, null);
    }
    
    public VectorwsFoiFolder getFolderFoiByFolderRSN(int folderRSN,int requesterRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFoiByFolderRSN");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("requesterRSN",requesterRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFoiByFolderRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFoiByFolderRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFoiFolder resultVariable = new VectorwsFoiFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidUnitTypesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidUnitTypesAsync(null);
    }
    
    public void getValidUnitTypesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidUnitType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidUnitType doInBackground(Void... params) {
                return getValidUnitTypes(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidUnitType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidUnitTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidUnitType getValidUnitTypes(){
        return getValidUnitTypes(null);
    }
    
    public VectorwsValidUnitType getValidUnitTypes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidUnitTypes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidUnitTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidUnitTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidUnitType resultVariable = new VectorwsValidUnitType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPropertyFreeFormAsync(int propertyRSN,boolean propertyRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyFreeFormAsync(propertyRSN, propertyRSNSpecified, null);
    }
    
    public void getPropertyFreeFormAsync(final int propertyRSN,final boolean propertyRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPropertyFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPropertyFreeform doInBackground(Void... params) {
                return getPropertyFreeForm(propertyRSN, propertyRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPropertyFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPropertyFreeForm", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPropertyFreeform getPropertyFreeForm(int propertyRSN,boolean propertyRSNSpecified){
        return getPropertyFreeForm(propertyRSN, propertyRSNSpecified, null);
    }
    
    public VectorwsPropertyFreeform getPropertyFreeForm(int propertyRSN,boolean propertyRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPropertyFreeForm");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPropertyFreeForm", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPropertyFreeForm", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPropertyFreeform resultVariable = new VectorwsPropertyFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPropertyAsync(wsProperty property) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPropertyAsync(property, null);
    }
    
    public void addPropertyAsync(final wsProperty property,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsProperty>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsProperty doInBackground(Void... params) {
                return addProperty(property, headers);
            }
            @Override
            protected void onPostExecute(wsProperty result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addProperty", result);
                }
            }
        }.execute();
    }
    
    public wsProperty addProperty(wsProperty property){
        return addProperty(property, null);
    }
    
    public wsProperty addProperty(wsProperty property,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addProperty");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","property",new wsProperty().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("property",property);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsProperty resultVariable =  new wsProperty (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAttachmentInfoAsync(int attachmentRSN,boolean attachmentRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAttachmentInfoAsync(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public void getAttachmentInfoAsync(final int attachmentRSN,final boolean attachmentRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsAttachmentInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsAttachmentInfo doInBackground(Void... params) {
                return getAttachmentInfo(attachmentRSN, attachmentRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsAttachmentInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAttachmentInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsAttachmentInfo getAttachmentInfo(int attachmentRSN,boolean attachmentRSNSpecified){
        return getAttachmentInfo(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public VectorwsAttachmentInfo getAttachmentInfo(int attachmentRSN,boolean attachmentRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAttachmentInfo");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAttachmentInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAttachmentInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsAttachmentInfo resultVariable = new VectorwsAttachmentInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidBodyTypesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidBodyTypesAsync(null);
    }
    
    public void getValidBodyTypesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidBodyType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidBodyType doInBackground(Void... params) {
                return getValidBodyTypes(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidBodyType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidBodyTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidBodyType getValidBodyTypes(){
        return getValidBodyTypes(null);
    }
    
    public VectorwsValidBodyType getValidBodyTypes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidBodyTypes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidBodyTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidBodyTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidBodyType resultVariable = new VectorwsValidBodyType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidChecklistGroupsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChecklistGroupsAsync(null);
    }
    
    public void getValidChecklistGroupsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidChecklistGroup>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidChecklistGroup doInBackground(Void... params) {
                return getValidChecklistGroups(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidChecklistGroup result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidChecklistGroups", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidChecklistGroup getValidChecklistGroups(){
        return getValidChecklistGroups(null);
    }
    
    public VectorwsValidChecklistGroup getValidChecklistGroups(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidChecklistGroups");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidChecklistGroups", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidChecklistGroups", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidChecklistGroup resultVariable = new VectorwsValidChecklistGroup(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidProvincesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidProvincesAsync(null);
    }
    
    public void getValidProvincesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidProvinces>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidProvinces doInBackground(Void... params) {
                return getValidProvinces(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidProvinces result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidProvinces", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidProvinces getValidProvinces(){
        return getValidProvinces(null);
    }
    
    public VectorwsValidProvinces getValidProvinces(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidProvinces");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidProvinces", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidProvinces", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidProvinces resultVariable = new VectorwsValidProvinces(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addValidSecurityQuestionsAsync(VectorwsValidSecurityQuestion validSecurityQuestion) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addValidSecurityQuestionsAsync(validSecurityQuestion, null);
    }
    
    public void addValidSecurityQuestionsAsync(final VectorwsValidSecurityQuestion validSecurityQuestion,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addValidSecurityQuestions(validSecurityQuestion, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addValidSecurityQuestions", result);
                }
            }
        }.execute();
    }
    
    public boolean addValidSecurityQuestions(VectorwsValidSecurityQuestion validSecurityQuestion){
        return addValidSecurityQuestions(validSecurityQuestion, null);
    }
    
    public boolean addValidSecurityQuestions(VectorwsValidSecurityQuestion validSecurityQuestion,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addValidSecurityQuestions");
        soapReq.addProperty("ValidSecurityQuestion",validSecurityQuestion);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addValidSecurityQuestions", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addValidSecurityQuestions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addLinkAsync(wsValidUserMyOffice arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addLinkAsync(arg0, null);
    }
    
    public void addLinkAsync(final wsValidUserMyOffice arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsValidUserMyOffice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsValidUserMyOffice doInBackground(Void... params) {
                return addLink(arg0, headers);
            }
            @Override
            protected void onPostExecute(wsValidUserMyOffice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addLink", result);
                }
            }
        }.execute();
    }
    
    public wsValidUserMyOffice addLink(wsValidUserMyOffice arg0){
        return addLink(arg0, null);
    }
    
    public wsValidUserMyOffice addLink(wsValidUserMyOffice arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addLink");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","arg0",new wsValidUserMyOffice().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addLink", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addLink", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsValidUserMyOffice resultVariable =  new wsValidUserMyOffice (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderByProcessPeopleAsync(int peopleRSN,boolean peopleRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderByProcessPeopleAsync(peopleRSN, peopleRSNSpecified, null);
    }
    
    public void getFolderByProcessPeopleAsync(final int peopleRSN,final boolean peopleRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolder doInBackground(Void... params) {
                return getFolderByProcessPeople(peopleRSN, peopleRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderByProcessPeople", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolder getFolderByProcessPeople(int peopleRSN,boolean peopleRSNSpecified){
        return getFolderByProcessPeople(peopleRSN, peopleRSNSpecified, null);
    }
    
    public VectorwsFolder getFolderByProcessPeople(int peopleRSN,boolean peopleRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderByProcessPeople");
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderByProcessPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderByProcessPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolder resultVariable = new VectorwsFolder(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPropertyValidInfoAsync(int propertyRSN,boolean propertyRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyValidInfoAsync(propertyRSN, propertyRSNSpecified, null);
    }
    
    public void getPropertyValidInfoAsync(final int propertyRSN,final boolean propertyRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPropertyValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPropertyValidInfo doInBackground(Void... params) {
                return getPropertyValidInfo(propertyRSN, propertyRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPropertyValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPropertyValidInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPropertyValidInfo getPropertyValidInfo(int propertyRSN,boolean propertyRSNSpecified){
        return getPropertyValidInfo(propertyRSN, propertyRSNSpecified, null);
    }
    
    public VectorwsPropertyValidInfo getPropertyValidInfo(int propertyRSN,boolean propertyRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPropertyValidInfo");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPropertyValidInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPropertyValidInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPropertyValidInfo resultVariable = new VectorwsPropertyValidInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void generateCustomReportAsync(int customReportCode,boolean customReportCodeSpecified,VectorwsCustomReportParams parameters) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        generateCustomReportAsync(customReportCode, customReportCodeSpecified, parameters, null);
    }
    
    public void generateCustomReportAsync(final int customReportCode,final boolean customReportCodeSpecified,final VectorwsCustomReportParams parameters,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsCustomReport>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsCustomReport doInBackground(Void... params) {
                return generateCustomReport(customReportCode, customReportCodeSpecified, parameters, headers);
            }
            @Override
            protected void onPostExecute(wsCustomReport result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("generateCustomReport", result);
                }
            }
        }.execute();
    }
    
    public wsCustomReport generateCustomReport(int customReportCode,boolean customReportCodeSpecified,VectorwsCustomReportParams parameters){
        return generateCustomReport(customReportCode, customReportCodeSpecified, parameters, null);
    }
    
    public wsCustomReport generateCustomReport(int customReportCode,boolean customReportCodeSpecified,VectorwsCustomReportParams parameters,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","generateCustomReport");
        soapReq.addProperty("customReportCode",customReportCode);
        soapReq.addProperty("customReportCodeSpecified",customReportCodeSpecified);
        soapReq.addProperty("parameters",parameters);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:generateCustomReport", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:generateCustomReport", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsCustomReport resultVariable =  new wsCustomReport (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderPaymentAsync(VectorwsFolderPayment folderPaymentArray) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderPaymentAsync(folderPaymentArray, null);
    }
    
    public void addFolderPaymentAsync(final VectorwsFolderPayment folderPaymentArray,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderPayment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderPayment doInBackground(Void... params) {
                return addFolderPayment(folderPaymentArray, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderPayment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderPayment", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderPayment addFolderPayment(VectorwsFolderPayment folderPaymentArray){
        return addFolderPayment(folderPaymentArray, null);
    }
    
    public VectorwsFolderPayment addFolderPayment(VectorwsFolderPayment folderPaymentArray,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderPayment");
        soapReq.addProperty("folderPaymentArray",folderPaymentArray);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderPayment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderPayment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderPayment resultVariable = new VectorwsFolderPayment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderFeeAsync(VectorwsFolderFee folderFee) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderFeeAsync(folderFee, null);
    }
    
    public void addFolderFeeAsync(final VectorwsFolderFee folderFee,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderFee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderFee doInBackground(Void... params) {
                return addFolderFee(folderFee, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderFee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderFee", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderFee addFolderFee(VectorwsFolderFee folderFee){
        return addFolderFee(folderFee, null);
    }
    
    public VectorwsFolderFee addFolderFee(VectorwsFolderFee folderFee,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderFee");
        soapReq.addProperty("folderFee",folderFee);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderFee", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderFee resultVariable = new VectorwsFolderFee(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPeopleFreeformAsync(wsPeopleFreeform wsPeopleFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPeopleFreeformAsync(wsPeopleFreeform, null);
    }
    
    public void addPeopleFreeformAsync(final wsPeopleFreeform wsPeopleFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPeopleFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsPeopleFreeform doInBackground(Void... params) {
                return addPeopleFreeform(wsPeopleFreeform, headers);
            }
            @Override
            protected void onPostExecute(wsPeopleFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPeopleFreeform", result);
                }
            }
        }.execute();
    }
    
    public wsPeopleFreeform addPeopleFreeform(wsPeopleFreeform wsPeopleFreeform){
        return addPeopleFreeform(wsPeopleFreeform, null);
    }
    
    public wsPeopleFreeform addPeopleFreeform(wsPeopleFreeform wsPeopleFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPeopleFreeform");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsPeopleFreeform",new wsPeopleFreeform().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("wsPeopleFreeform",wsPeopleFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPeopleFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addPeopleFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPeopleFreeform resultVariable =  new wsPeopleFreeform (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderCorrespondenceBlobAsync(int correspondenceRSN,boolean correspondenceRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderCorrespondenceBlobAsync(correspondenceRSN, correspondenceRSNSpecified, null);
    }
    
    public void getFolderCorrespondenceBlobAsync(final int correspondenceRSN,final boolean correspondenceRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolderCorrespondenceBlob>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolderCorrespondenceBlob doInBackground(Void... params) {
                return getFolderCorrespondenceBlob(correspondenceRSN, correspondenceRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolderCorrespondenceBlob result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderCorrespondenceBlob", result);
                }
            }
        }.execute();
    }
    
    public wsFolderCorrespondenceBlob getFolderCorrespondenceBlob(int correspondenceRSN,boolean correspondenceRSNSpecified){
        return getFolderCorrespondenceBlob(correspondenceRSN, correspondenceRSNSpecified, null);
    }
    
    public wsFolderCorrespondenceBlob getFolderCorrespondenceBlob(int correspondenceRSN,boolean correspondenceRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderCorrespondenceBlob");
        soapReq.addProperty("correspondenceRSN",correspondenceRSN);
        soapReq.addProperty("correspondenceRSNSpecified",correspondenceRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderCorrespondenceBlob", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderCorrespondenceBlob", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolderCorrespondenceBlob resultVariable =  new wsFolderCorrespondenceBlob (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addCheckListAsync(VectorwsFolderProcessChecklist folderProcessChecklists) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addCheckListAsync(folderProcessChecklists, null);
    }
    
    public void addCheckListAsync(final VectorwsFolderProcessChecklist folderProcessChecklists,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcessChecklist>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcessChecklist doInBackground(Void... params) {
                return addCheckList(folderProcessChecklists, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcessChecklist result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addCheckList", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcessChecklist addCheckList(VectorwsFolderProcessChecklist folderProcessChecklists){
        return addCheckList(folderProcessChecklists, null);
    }
    
    public VectorwsFolderProcessChecklist addCheckList(VectorwsFolderProcessChecklist folderProcessChecklists,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addCheckList");
        soapReq.addProperty("folderProcessChecklists",folderProcessChecklists);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addCheckList", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addCheckList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcessChecklist resultVariable = new VectorwsFolderProcessChecklist(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAssignedProcessAsync(String assignedUser,String scheduleStartDate,boolean scheduleStartDateSpecified,String scheduleEndDate,boolean scheduleEndDateSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAssignedProcessAsync(assignedUser, scheduleStartDate, scheduleStartDateSpecified, scheduleEndDate, scheduleEndDateSpecified, null);
    }
    
    public void getAssignedProcessAsync(final String assignedUser,final String scheduleStartDate,final boolean scheduleStartDateSpecified,final String scheduleEndDate,final boolean scheduleEndDateSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return getAssignedProcess(assignedUser, scheduleStartDate, scheduleStartDateSpecified, scheduleEndDate, scheduleEndDateSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAssignedProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess getAssignedProcess(String assignedUser,String scheduleStartDate,boolean scheduleStartDateSpecified,String scheduleEndDate,boolean scheduleEndDateSpecified){
        return getAssignedProcess(assignedUser, scheduleStartDate, scheduleStartDateSpecified, scheduleEndDate, scheduleEndDateSpecified, null);
    }
    
    public VectorwsFolderProcess getAssignedProcess(String assignedUser,String scheduleStartDate,boolean scheduleStartDateSpecified,String scheduleEndDate,boolean scheduleEndDateSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAssignedProcess");
        soapReq.addProperty("assignedUser",assignedUser);
        soapReq.addProperty("scheduleStartDate",scheduleStartDate);
        soapReq.addProperty("scheduleStartDateSpecified",scheduleStartDateSpecified);
        soapReq.addProperty("scheduleEndDate",scheduleEndDate);
        soapReq.addProperty("scheduleEndDateSpecified",scheduleEndDateSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAssignedProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAssignedProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getInspectionProcessAsync(VectorInt32 folderRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getInspectionProcessAsync(folderRSN, null);
    }
    
    public void getInspectionProcessAsync(final VectorInt32 folderRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderProcess>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderProcess doInBackground(Void... params) {
                return getInspectionProcess(folderRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderProcess result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getInspectionProcess", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderProcess getInspectionProcess(VectorInt32 folderRSN){
        return getInspectionProcess(folderRSN, null);
    }
    
    public VectorwsFolderProcess getInspectionProcess(VectorInt32 folderRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getInspectionProcess");
        soapReq.addProperty("folderRSN",folderRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getInspectionProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getInspectionProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderProcess resultVariable = new VectorwsFolderProcess(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidPeopleTypesAsync(boolean webEnabledOnly,boolean webEnabledOnlySpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidPeopleTypesAsync(webEnabledOnly, webEnabledOnlySpecified, null);
    }
    
    public void getValidPeopleTypesAsync(final boolean webEnabledOnly,final boolean webEnabledOnlySpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidPeopleType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidPeopleType doInBackground(Void... params) {
                return getValidPeopleTypes(webEnabledOnly, webEnabledOnlySpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidPeopleType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidPeopleTypes", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidPeopleType getValidPeopleTypes(boolean webEnabledOnly,boolean webEnabledOnlySpecified){
        return getValidPeopleTypes(webEnabledOnly, webEnabledOnlySpecified, null);
    }
    
    public VectorwsValidPeopleType getValidPeopleTypes(boolean webEnabledOnly,boolean webEnabledOnlySpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidPeopleTypes");
        soapReq.addProperty("webEnabledOnly",webEnabledOnly);
        soapReq.addProperty("webEnabledOnlySpecified",webEnabledOnlySpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidPeopleTypes", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidPeopleTypes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidPeopleType resultVariable = new VectorwsValidPeopleType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFoiCorrectionFolderAsync(wsFoiCorrectionFolder argFolderFOICorrection) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFoiCorrectionFolderAsync(argFolderFOICorrection, null);
    }
    
    public void updateFoiCorrectionFolderAsync(final wsFoiCorrectionFolder argFolderFOICorrection,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFoiCorrectionFolder(argFolderFOICorrection, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFoiCorrectionFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFoiCorrectionFolder(wsFoiCorrectionFolder argFolderFOICorrection){
        return updateFoiCorrectionFolder(argFolderFOICorrection, null);
    }
    
    public boolean updateFoiCorrectionFolder(wsFoiCorrectionFolder argFolderFOICorrection,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFoiCorrectionFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","argFolderFOICorrection",new wsFoiCorrectionFolder().getClass());
        soapReq.addProperty("argFolderFOICorrection",argFolderFOICorrection);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFoiCorrectionFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFoiCorrectionFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidPeopleTitlesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidPeopleTitlesAsync(null);
    }
    
    public void getValidPeopleTitlesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidPeopleTitle>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidPeopleTitle doInBackground(Void... params) {
                return getValidPeopleTitles(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidPeopleTitle result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidPeopleTitles", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidPeopleTitle getValidPeopleTitles(){
        return getValidPeopleTitles(null);
    }
    
    public VectorwsValidPeopleTitle getValidPeopleTitles(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidPeopleTitles");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidPeopleTitles", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidPeopleTitles", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidPeopleTitle resultVariable = new VectorwsValidPeopleTitle(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void cancelInspectionAsync(int folderRSN,boolean folderRSNSpecified,int processRSN,boolean processRSNSpecified,int attemptResultCode,boolean attemptResultCodeSpecified,String comments) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        cancelInspectionAsync(folderRSN, folderRSNSpecified, processRSN, processRSNSpecified, attemptResultCode, attemptResultCodeSpecified, comments, null);
    }
    
    public void cancelInspectionAsync(final int folderRSN,final boolean folderRSNSpecified,final int processRSN,final boolean processRSNSpecified,final int attemptResultCode,final boolean attemptResultCodeSpecified,final String comments,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return cancelInspection(folderRSN, folderRSNSpecified, processRSN, processRSNSpecified, attemptResultCode, attemptResultCodeSpecified, comments, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("cancelInspection", result);
                }
            }
        }.execute();
    }
    
    public boolean cancelInspection(int folderRSN,boolean folderRSNSpecified,int processRSN,boolean processRSNSpecified,int attemptResultCode,boolean attemptResultCodeSpecified,String comments){
        return cancelInspection(folderRSN, folderRSNSpecified, processRSN, processRSNSpecified, attemptResultCode, attemptResultCodeSpecified, comments, null);
    }
    
    public boolean cancelInspection(int folderRSN,boolean folderRSNSpecified,int processRSN,boolean processRSNSpecified,int attemptResultCode,boolean attemptResultCodeSpecified,String comments,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","cancelInspection");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("attemptResultCode",attemptResultCode);
        soapReq.addProperty("attemptResultCodeSpecified",attemptResultCodeSpecified);
        soapReq.addProperty("comments",comments);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:cancelInspection", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:cancelInspection", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderWithPeopleAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderWithPeopleAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderWithPeopleAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderWithPeople>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderWithPeople doInBackground(Void... params) {
                return getFolderWithPeople(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderWithPeople result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderWithPeople", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderWithPeople getFolderWithPeople(int folderRSN,boolean folderRSNSpecified){
        return getFolderWithPeople(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderWithPeople getFolderWithPeople(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderWithPeople");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderWithPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderWithPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderWithPeople resultVariable = new VectorwsFolderWithPeople(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderPropertyAsync(VectorwsFolderProperty folderProperty) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderPropertyAsync(folderProperty, null);
    }
    
    public void updateFolderPropertyAsync(final VectorwsFolderProperty folderProperty,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderProperty(folderProperty, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderProperty", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderProperty(VectorwsFolderProperty folderProperty){
        return updateFolderProperty(folderProperty, null);
    }
    
    public boolean updateFolderProperty(VectorwsFolderProperty folderProperty,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderProperty");
        soapReq.addProperty("folderProperty",folderProperty);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addFolderPeopleAsync(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderPeopleAsync(folderRSN, folderRSNSpecified, folderPeople, null);
    }
    
    public void addFolderPeopleAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsFolderPeople folderPeople,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFolderPeople(folderRSN, folderRSNSpecified, folderPeople, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderPeople", result);
                }
            }
        }.execute();
    }
    
    public boolean addFolderPeople(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople){
        return addFolderPeople(folderRSN, folderRSNSpecified, folderPeople, null);
    }
    
    public boolean addFolderPeople(int folderRSN,boolean folderRSNSpecified,VectorwsFolderPeople folderPeople,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderPeople");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("folderPeople",folderPeople);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidChecklistsAsync(VectorInt32 checklistGroups) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidChecklistsAsync(checklistGroups, null);
    }
    
    public void getValidChecklistsAsync(final VectorInt32 checklistGroups,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidChecklist>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidChecklist doInBackground(Void... params) {
                return getValidChecklists(checklistGroups, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidChecklist result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidChecklists", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidChecklist getValidChecklists(VectorInt32 checklistGroups){
        return getValidChecklists(checklistGroups, null);
    }
    
    public VectorwsValidChecklist getValidChecklists(VectorInt32 checklistGroups,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidChecklists");
        soapReq.addProperty("checklistGroups",checklistGroups);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidChecklists", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidChecklists", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidChecklist resultVariable = new VectorwsValidChecklist(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getProcessValidInfoAsync(int processRSN,boolean processRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getProcessValidInfoAsync(processRSN, processRSNSpecified, null);
    }
    
    public void getProcessValidInfoAsync(final int processRSN,final boolean processRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsProcessValidInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsProcessValidInfo doInBackground(Void... params) {
                return getProcessValidInfo(processRSN, processRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsProcessValidInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getProcessValidInfo", result);
                }
            }
        }.execute();
    }
    
    public VectorwsProcessValidInfo getProcessValidInfo(int processRSN,boolean processRSNSpecified){
        return getProcessValidInfo(processRSN, processRSNSpecified, null);
    }
    
    public VectorwsProcessValidInfo getProcessValidInfo(int processRSN,boolean processRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getProcessValidInfo");
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getProcessValidInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getProcessValidInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsProcessValidInfo resultVariable = new VectorwsProcessValidInfo(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPeopleGroupMemberAsync(wsPeopleGroup wsPeopleGroup) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPeopleGroupMemberAsync(wsPeopleGroup, null);
    }
    
    public void addPeopleGroupMemberAsync(final wsPeopleGroup wsPeopleGroup,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addPeopleGroupMember(wsPeopleGroup, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPeopleGroupMember", result);
                }
            }
        }.execute();
    }
    
    public boolean addPeopleGroupMember(wsPeopleGroup wsPeopleGroup){
        return addPeopleGroupMember(wsPeopleGroup, null);
    }
    
    public boolean addPeopleGroupMember(wsPeopleGroup wsPeopleGroup,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPeopleGroupMember");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsPeopleGroup",new wsPeopleGroup().getClass());
        soapReq.addProperty("wsPeopleGroup",wsPeopleGroup);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPeopleGroupMember", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addPeopleGroupMember", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addBillAsync(VectorInt32 accountBillFeeRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addBillAsync(accountBillFeeRSN, null);
    }
    
    public void addBillAsync(final VectorInt32 accountBillFeeRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addBill(accountBillFeeRSN, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addBill", result);
                }
            }
        }.execute();
    }
    
    public int addBill(VectorInt32 accountBillFeeRSN){
        return addBill(accountBillFeeRSN, null);
    }
    
    public int addBill(VectorInt32 accountBillFeeRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addBill");
        soapReq.addProperty("accountBillFeeRSN",accountBillFeeRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addBill", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addBill", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void updateDeficiencyAsync(VectorwsFolderProcessDeficiency folderProcessDeficiency) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateDeficiencyAsync(folderProcessDeficiency, null);
    }
    
    public void updateDeficiencyAsync(final VectorwsFolderProcessDeficiency folderProcessDeficiency,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateDeficiency(folderProcessDeficiency, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateDeficiency", result);
                }
            }
        }.execute();
    }
    
    public boolean updateDeficiency(VectorwsFolderProcessDeficiency folderProcessDeficiency){
        return updateDeficiency(folderProcessDeficiency, null);
    }
    
    public boolean updateDeficiency(VectorwsFolderProcessDeficiency folderProcessDeficiency,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateDeficiency");
        soapReq.addProperty("folderProcessDeficiency",folderProcessDeficiency);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateDeficiency", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateDeficiency", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderFreeFormByCodeAsync(int folderRSN,boolean folderRSNSpecified,VectorInt32 freeFormCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderFreeFormByCodeAsync(folderRSN, folderRSNSpecified, freeFormCode, null);
    }
    
    public void getFolderFreeFormByCodeAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorInt32 freeFormCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderFreeform doInBackground(Void... params) {
                return getFolderFreeFormByCode(folderRSN, folderRSNSpecified, freeFormCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderFreeFormByCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderFreeform getFolderFreeFormByCode(int folderRSN,boolean folderRSNSpecified,VectorInt32 freeFormCode){
        return getFolderFreeFormByCode(folderRSN, folderRSNSpecified, freeFormCode, null);
    }
    
    public VectorwsFolderFreeform getFolderFreeFormByCode(int folderRSN,boolean folderRSNSpecified,VectorInt32 freeFormCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderFreeFormByCode");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderFreeFormByCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderFreeFormByCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderFreeform resultVariable = new VectorwsFolderFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updatePeopleFreeformAsync(VectorwsPeopleFreeform wsPeopleFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updatePeopleFreeformAsync(wsPeopleFreeform, null);
    }
    
    public void updatePeopleFreeformAsync(final VectorwsPeopleFreeform wsPeopleFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updatePeopleFreeform(wsPeopleFreeform, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updatePeopleFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean updatePeopleFreeform(VectorwsPeopleFreeform wsPeopleFreeform){
        return updatePeopleFreeform(wsPeopleFreeform, null);
    }
    
    public boolean updatePeopleFreeform(VectorwsPeopleFreeform wsPeopleFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updatePeopleFreeform");
        soapReq.addProperty("wsPeopleFreeform",wsPeopleFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updatePeopleFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updatePeopleFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderChargeByChargeRSNAsync(VectorInt32 chargeRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderChargeByChargeRSNAsync(chargeRSN, null);
    }
    
    public void getFolderChargeByChargeRSNAsync(final VectorInt32 chargeRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderCharge>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderCharge doInBackground(Void... params) {
                return getFolderChargeByChargeRSN(chargeRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderCharge result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderChargeByChargeRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderCharge getFolderChargeByChargeRSN(VectorInt32 chargeRSN){
        return getFolderChargeByChargeRSN(chargeRSN, null);
    }
    
    public VectorwsFolderCharge getFolderChargeByChargeRSN(VectorInt32 chargeRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderChargeByChargeRSN");
        soapReq.addProperty("chargeRSN",chargeRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderChargeByChargeRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderChargeByChargeRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderCharge resultVariable = new VectorwsFolderCharge(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void deleteFolderAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteFolderAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void deleteFolderAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deleteFolder(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteFolder", result);
                }
            }
        }.execute();
    }
    
    public boolean deleteFolder(int folderRSN,boolean folderRSNSpecified){
        return deleteFolder(folderRSN, folderRSNSpecified, null);
    }
    
    public boolean deleteFolder(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deleteFolder");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deleteFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deleteFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getTrustedUserAsync(String userId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getTrustedUserAsync(userId, null);
    }
    
    public void getTrustedUserAsync(final String userId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsTrustedUser>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsTrustedUser doInBackground(Void... params) {
                return getTrustedUser(userId, headers);
            }
            @Override
            protected void onPostExecute(VectorwsTrustedUser result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getTrustedUser", result);
                }
            }
        }.execute();
    }
    
    public VectorwsTrustedUser getTrustedUser(String userId){
        return getTrustedUser(userId, null);
    }
    
    public VectorwsTrustedUser getTrustedUser(String userId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getTrustedUser");
        soapReq.addProperty("userId",userId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getTrustedUser", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getTrustedUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsTrustedUser resultVariable = new VectorwsTrustedUser(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getWebPaymentLogAsync(VectorInt32 logRSN) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getWebPaymentLogAsync(logRSN, null);
    }
    
    public void getWebPaymentLogAsync(final VectorInt32 logRSN,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsWebPaymentLog>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsWebPaymentLog doInBackground(Void... params) {
                return getWebPaymentLog(logRSN, headers);
            }
            @Override
            protected void onPostExecute(VectorwsWebPaymentLog result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getWebPaymentLog", result);
                }
            }
        }.execute();
    }
    
    public VectorwsWebPaymentLog getWebPaymentLog(VectorInt32 logRSN){
        return getWebPaymentLog(logRSN, null);
    }
    
    public VectorwsWebPaymentLog getWebPaymentLog(VectorInt32 logRSN,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getWebPaymentLog");
        soapReq.addProperty("logRSN",logRSN);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getWebPaymentLog", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getWebPaymentLog", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsWebPaymentLog resultVariable = new VectorwsWebPaymentLog(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderInfoAsync(int folderRSN,boolean folderRSNSpecified,VectorwsFolderInfo folderInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderInfoAsync(folderRSN, folderRSNSpecified, folderInfo, null);
    }
    
    public void updateFolderInfoAsync(final int folderRSN,final boolean folderRSNSpecified,final VectorwsFolderInfo folderInfo,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderInfo(folderRSN, folderRSNSpecified, folderInfo, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderInfo", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderInfo(int folderRSN,boolean folderRSNSpecified,VectorwsFolderInfo folderInfo){
        return updateFolderInfo(folderRSN, folderRSNSpecified, folderInfo, null);
    }
    
    public boolean updateFolderInfo(int folderRSN,boolean folderRSNSpecified,VectorwsFolderInfo folderInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderInfo");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("folderInfo",folderInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getValidFolderWorkAsync(String folderType,int subCode,boolean subCodeSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidFolderWorkAsync(folderType, subCode, subCodeSpecified, null);
    }
    
    public void getValidFolderWorkAsync(final String folderType,final int subCode,final boolean subCodeSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidFolderWork>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidFolderWork doInBackground(Void... params) {
                return getValidFolderWork(folderType, subCode, subCodeSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidFolderWork result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidFolderWork", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidFolderWork getValidFolderWork(String folderType,int subCode,boolean subCodeSpecified){
        return getValidFolderWork(folderType, subCode, subCodeSpecified, null);
    }
    
    public VectorwsValidFolderWork getValidFolderWork(String folderType,int subCode,boolean subCodeSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidFolderWork");
        soapReq.addProperty("folderType",folderType);
        soapReq.addProperty("subCode",subCode);
        soapReq.addProperty("subCodeSpecified",subCodeSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidFolderWork", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidFolderWork", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidFolderWork resultVariable = new VectorwsValidFolderWork(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getValidPleaTypeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidPleaTypeAsync(null);
    }
    
    public void getValidPleaTypeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidPleaType>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidPleaType doInBackground(Void... params) {
                return getValidPleaType(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidPleaType result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidPleaType", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidPleaType getValidPleaType(){
        return getValidPleaType(null);
    }
    
    public VectorwsValidPleaType getValidPleaType(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidPleaType");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidPleaType", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidPleaType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidPleaType resultVariable = new VectorwsValidPleaType(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void executeCustomTransactionAsync(int transactionCode,boolean transactionCodeSpecified,VectorwsTransactionRequest transactionParameters) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        executeCustomTransactionAsync(transactionCode, transactionCodeSpecified, transactionParameters, null);
    }
    
    public void executeCustomTransactionAsync(final int transactionCode,final boolean transactionCodeSpecified,final VectorwsTransactionRequest transactionParameters,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsTransactionResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsTransactionResponse doInBackground(Void... params) {
                return executeCustomTransaction(transactionCode, transactionCodeSpecified, transactionParameters, headers);
            }
            @Override
            protected void onPostExecute(VectorwsTransactionResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("executeCustomTransaction", result);
                }
            }
        }.execute();
    }
    
    public VectorwsTransactionResponse executeCustomTransaction(int transactionCode,boolean transactionCodeSpecified,VectorwsTransactionRequest transactionParameters){
        return executeCustomTransaction(transactionCode, transactionCodeSpecified, transactionParameters, null);
    }
    
    public VectorwsTransactionResponse executeCustomTransaction(int transactionCode,boolean transactionCodeSpecified,VectorwsTransactionRequest transactionParameters,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","executeCustomTransaction");
        soapReq.addProperty("transactionCode",transactionCode);
        soapReq.addProperty("transactionCodeSpecified",transactionCodeSpecified);
        soapReq.addProperty("transactionParameters",transactionParameters);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:executeCustomTransaction", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:executeCustomTransaction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsTransactionResponse resultVariable = new VectorwsTransactionResponse(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPropertyFreeFormByCodeAsync(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 freeFormCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPropertyFreeFormByCodeAsync(propertyRSN, propertyRSNSpecified, freeFormCode, null);
    }
    
    public void getPropertyFreeFormByCodeAsync(final int propertyRSN,final boolean propertyRSNSpecified,final VectorInt32 freeFormCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsPropertyFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsPropertyFreeform doInBackground(Void... params) {
                return getPropertyFreeFormByCode(propertyRSN, propertyRSNSpecified, freeFormCode, headers);
            }
            @Override
            protected void onPostExecute(VectorwsPropertyFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPropertyFreeFormByCode", result);
                }
            }
        }.execute();
    }
    
    public VectorwsPropertyFreeform getPropertyFreeFormByCode(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 freeFormCode){
        return getPropertyFreeFormByCode(propertyRSN, propertyRSNSpecified, freeFormCode, null);
    }
    
    public VectorwsPropertyFreeform getPropertyFreeFormByCode(int propertyRSN,boolean propertyRSNSpecified,VectorInt32 freeFormCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getPropertyFreeFormByCode");
        soapReq.addProperty("propertyRSN",propertyRSN);
        soapReq.addProperty("propertyRSNSpecified",propertyRSNSpecified);
        soapReq.addProperty("freeFormCode",freeFormCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getPropertyFreeFormByCode", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getPropertyFreeFormByCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsPropertyFreeform resultVariable = new VectorwsPropertyFreeform(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateFolderProcessAsync(VectorwsFolderProcess processes) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateFolderProcessAsync(processes, null);
    }
    
    public void updateFolderProcessAsync(final VectorwsFolderProcess processes,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return updateFolderProcess(processes, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateFolderProcess", result);
                }
            }
        }.execute();
    }
    
    public boolean updateFolderProcess(VectorwsFolderProcess processes){
        return updateFolderProcess(processes, null);
    }
    
    public boolean updateFolderProcess(VectorwsFolderProcess processes,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","updateFolderProcess");
        soapReq.addProperty("processes",processes);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateFolderProcess", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateFolderProcess", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addPropertyFreeformAsync(wsPropertyFreeform wsPropertyFreeform) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPropertyFreeformAsync(wsPropertyFreeform, null);
    }
    
    public void addPropertyFreeformAsync(final wsPropertyFreeform wsPropertyFreeform,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsPropertyFreeform>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsPropertyFreeform doInBackground(Void... params) {
                return addPropertyFreeform(wsPropertyFreeform, headers);
            }
            @Override
            protected void onPostExecute(wsPropertyFreeform result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPropertyFreeform", result);
                }
            }
        }.execute();
    }
    
    public wsPropertyFreeform addPropertyFreeform(wsPropertyFreeform wsPropertyFreeform){
        return addPropertyFreeform(wsPropertyFreeform, null);
    }
    
    public wsPropertyFreeform addPropertyFreeform(wsPropertyFreeform wsPropertyFreeform,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addPropertyFreeform");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","wsPropertyFreeform",new wsPropertyFreeform().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("wsPropertyFreeform",wsPropertyFreeform);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addPropertyFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addPropertyFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsPropertyFreeform resultVariable =  new wsPropertyFreeform (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void clearCacheAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        clearCacheAsync(null);
    }
    
    public void clearCacheAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                clearCache(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("clearCache", result);
                }
            }
        }.execute();
    }
    
    public void clearCache(){
        clearCache(null);
    }
    
    public void clearCache(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","clearCache");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:clearCache", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:clearCache", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getValidDispositionAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getValidDispositionAsync(null);
    }
    
    public void getValidDispositionAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsValidDisposition>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsValidDisposition doInBackground(Void... params) {
                return getValidDisposition(headers);
            }
            @Override
            protected void onPostExecute(VectorwsValidDisposition result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getValidDisposition", result);
                }
            }
        }.execute();
    }
    
    public VectorwsValidDisposition getValidDisposition(){
        return getValidDisposition(null);
    }
    
    public VectorwsValidDisposition getValidDisposition(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getValidDisposition");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getValidDisposition", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getValidDisposition", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsValidDisposition resultVariable = new VectorwsValidDisposition(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getFolderCorrespondenceAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderCorrespondenceAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderCorrespondenceAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderCorrespondence>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderCorrespondence doInBackground(Void... params) {
                return getFolderCorrespondence(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderCorrespondence result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderCorrespondence", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderCorrespondence getFolderCorrespondence(int folderRSN,boolean folderRSNSpecified){
        return getFolderCorrespondence(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderCorrespondence getFolderCorrespondence(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderCorrespondence");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderCorrespondence", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderCorrespondence", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderCorrespondence resultVariable = new VectorwsFolderCorrespondence(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getAttachmentContentAsync(int attachmentRSN,boolean attachmentRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAttachmentContentAsync(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public void getAttachmentContentAsync(final int attachmentRSN,final boolean attachmentRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsAttachmentContent>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsAttachmentContent doInBackground(Void... params) {
                return getAttachmentContent(attachmentRSN, attachmentRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsAttachmentContent result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAttachmentContent", result);
                }
            }
        }.execute();
    }
    
    public wsAttachmentContent getAttachmentContent(int attachmentRSN,boolean attachmentRSNSpecified){
        return getAttachmentContent(attachmentRSN, attachmentRSNSpecified, null);
    }
    
    public wsAttachmentContent getAttachmentContent(int attachmentRSN,boolean attachmentRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getAttachmentContent");
        soapReq.addProperty("attachmentRSN",attachmentRSN);
        soapReq.addProperty("attachmentRSNSpecified",attachmentRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAttachmentContent", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAttachmentContent", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsAttachmentContent resultVariable =  new wsAttachmentContent (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void initializeNewFolderAsync(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        initializeNewFolderAsync(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public void initializeNewFolderAsync(final wsFolder folder,final int peopleRSN,final boolean peopleRSNSpecified,final VectorwsFolderProperty folderProperty,final VectorwsFolderPeople folderPeople,final VectorwsFolderInfo folderInfo,final VectorwsFolderFixture folderFixture,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolder>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolder doInBackground(Void... params) {
                return initializeNewFolder(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, headers);
            }
            @Override
            protected void onPostExecute(wsFolder result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("initializeNewFolder", result);
                }
            }
        }.execute();
    }
    
    public wsFolder initializeNewFolder(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture){
        return initializeNewFolder(folder, peopleRSN, peopleRSNSpecified, folderProperty, folderPeople, folderInfo, folderFixture, null);
    }
    
    public wsFolder initializeNewFolder(wsFolder folder,int peopleRSN,boolean peopleRSNSpecified,VectorwsFolderProperty folderProperty,VectorwsFolderPeople folderPeople,VectorwsFolderInfo folderInfo,VectorwsFolderFixture folderFixture,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","initializeNewFolder");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","folder",new wsFolder().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("folder",folder);
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("folderProperty",folderProperty);
        soapReq.addProperty("folderPeople",folderPeople);
        soapReq.addProperty("folderInfo",folderInfo);
        soapReq.addProperty("folderFixture",folderFixture);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:initializeNewFolder", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:initializeNewFolder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolder resultVariable =  new wsFolder (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addFolderPropertyAsync(VectorwsFolderProperty folderProperty) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addFolderPropertyAsync(folderProperty, null);
    }
    
    public void addFolderPropertyAsync(final VectorwsFolderProperty folderProperty,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return addFolderProperty(folderProperty, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addFolderProperty", result);
                }
            }
        }.execute();
    }
    
    public boolean addFolderProperty(VectorwsFolderProperty folderProperty){
        return addFolderProperty(folderProperty, null);
    }
    
    public boolean addFolderProperty(VectorwsFolderProperty folderProperty,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addFolderProperty");
        soapReq.addProperty("folderProperty",folderProperty);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addFolderProperty", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addFolderProperty", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void generateFolderReportAsync(int customReportCode,boolean customReportCodeSpecified,int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        generateFolderReportAsync(customReportCode, customReportCodeSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public void generateFolderReportAsync(final int customReportCode,final boolean customReportCodeSpecified,final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, wsFolderReport>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected wsFolderReport doInBackground(Void... params) {
                return generateFolderReport(customReportCode, customReportCodeSpecified, folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(wsFolderReport result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("generateFolderReport", result);
                }
            }
        }.execute();
    }
    
    public wsFolderReport generateFolderReport(int customReportCode,boolean customReportCodeSpecified,int folderRSN,boolean folderRSNSpecified){
        return generateFolderReport(customReportCode, customReportCodeSpecified, folderRSN, folderRSNSpecified, null);
    }
    
    public wsFolderReport generateFolderReport(int customReportCode,boolean customReportCodeSpecified,int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","generateFolderReport");
        soapReq.addProperty("customReportCode",customReportCode);
        soapReq.addProperty("customReportCodeSpecified",customReportCodeSpecified);
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:generateFolderReport", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:generateFolderReport", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    wsFolderReport resultVariable =  new wsFolderReport (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addProcessAttachmentAsync(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addProcessAttachmentAsync(processRSN, processRSNSpecified, attachment, attachmentContent, null);
    }
    
    public void addProcessAttachmentAsync(final int processRSN,final boolean processRSNSpecified,final wsAttachment attachment,final wsAttachmentContent attachmentContent,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return addProcessAttachment(processRSN, processRSNSpecified, attachment, attachmentContent, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addProcessAttachment", result);
                }
            }
        }.execute();
    }
    
    public int addProcessAttachment(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent){
        return addProcessAttachment(processRSN, processRSNSpecified, attachment, attachmentContent, null);
    }
    
    public int addProcessAttachment(int processRSN,boolean processRSNSpecified,wsAttachment attachment,wsAttachmentContent attachmentContent,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","addProcessAttachment");
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachment",new wsAttachment().getClass());
        soapEnvelope.addMapping("http://webservice.amanda.csdcsystems.com","attachmentContent",new wsAttachmentContent().getClass());
        soapReq.addProperty("processRSN",processRSN);
        soapReq.addProperty("processRSNSpecified",processRSNSpecified);
        soapReq.addProperty("attachment",attachment);
        soapReq.addProperty("attachmentContent",attachmentContent);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:addProcessAttachment", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:addProcessAttachment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void associatePartyToPeopleAsync(int folderRSN,boolean folderRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,VectorInt32 peopleRSNToBeAssociated) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        associatePartyToPeopleAsync(folderRSN, folderRSNSpecified, peopleRSN, peopleRSNSpecified, peopleRSNToBeAssociated, null);
    }
    
    public void associatePartyToPeopleAsync(final int folderRSN,final boolean folderRSNSpecified,final int peopleRSN,final boolean peopleRSNSpecified,final VectorInt32 peopleRSNToBeAssociated,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return associatePartyToPeople(folderRSN, folderRSNSpecified, peopleRSN, peopleRSNSpecified, peopleRSNToBeAssociated, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("associatePartyToPeople", result);
                }
            }
        }.execute();
    }
    
    public boolean associatePartyToPeople(int folderRSN,boolean folderRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,VectorInt32 peopleRSNToBeAssociated){
        return associatePartyToPeople(folderRSN, folderRSNSpecified, peopleRSN, peopleRSNSpecified, peopleRSNToBeAssociated, null);
    }
    
    public boolean associatePartyToPeople(int folderRSN,boolean folderRSNSpecified,int peopleRSN,boolean peopleRSNSpecified,VectorInt32 peopleRSNToBeAssociated,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","associatePartyToPeople");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapReq.addProperty("peopleRSN",peopleRSN);
        soapReq.addProperty("peopleRSNSpecified",peopleRSNSpecified);
        soapReq.addProperty("peopleRSNToBeAssociated",peopleRSNToBeAssociated);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:associatePartyToPeople", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:associatePartyToPeople", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void deletePeopleFreeformAsync(VectorwsPeopleFreeFormPK wsPeopleFreeformPK) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deletePeopleFreeformAsync(wsPeopleFreeformPK, null);
    }
    
    public void deletePeopleFreeformAsync(final VectorwsPeopleFreeFormPK wsPeopleFreeformPK,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return deletePeopleFreeform(wsPeopleFreeformPK, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deletePeopleFreeform", result);
                }
            }
        }.execute();
    }
    
    public boolean deletePeopleFreeform(VectorwsPeopleFreeFormPK wsPeopleFreeformPK){
        return deletePeopleFreeform(wsPeopleFreeformPK, null);
    }
    
    public boolean deletePeopleFreeform(VectorwsPeopleFreeFormPK wsPeopleFreeformPK,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","deletePeopleFreeform");
        soapReq.addProperty("wsPeopleFreeformPK",wsPeopleFreeformPK);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:deletePeopleFreeform", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:deletePeopleFreeform", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getFolderChargeByFolderRSNAsync(int folderRSN,boolean folderRSNSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getFolderChargeByFolderRSNAsync(folderRSN, folderRSNSpecified, null);
    }
    
    public void getFolderChargeByFolderRSNAsync(final int folderRSN,final boolean folderRSNSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorwsFolderCharge>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorwsFolderCharge doInBackground(Void... params) {
                return getFolderChargeByFolderRSN(folderRSN, folderRSNSpecified, headers);
            }
            @Override
            protected void onPostExecute(VectorwsFolderCharge result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getFolderChargeByFolderRSN", result);
                }
            }
        }.execute();
    }
    
    public VectorwsFolderCharge getFolderChargeByFolderRSN(int folderRSN,boolean folderRSNSpecified){
        return getFolderChargeByFolderRSN(folderRSN, folderRSNSpecified, null);
    }
    
    public VectorwsFolderCharge getFolderChargeByFolderRSN(int folderRSN,boolean folderRSNSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://webservice.amanda.csdcsystems.com","getFolderChargeByFolderRSN");
        soapReq.addProperty("folderRSN",folderRSN);
        soapReq.addProperty("folderRSNSpecified",folderRSNSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getFolderChargeByFolderRSN", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getFolderChargeByFolderRSN", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorwsFolderCharge resultVariable = new VectorwsFolderCharge(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
