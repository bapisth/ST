package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsSearchCriteria;
import com.Wsdl2Code.WebServices.WSAmandaService.VectorString;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class searchPeopleAttachment implements KvmSerializable_ws {
    
    public VectorwsSearchCriteria criteria;
    public int startIndex;
    public boolean startIndexSpecified;
    public int count;
    public boolean countSpecified;
    public VectorString orderBy;
    
    public searchPeopleAttachment(){}
    
    public searchPeopleAttachment(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("criteria"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("criteria");
            criteria = new VectorwsSearchCriteria(j);
        }
        if (soapObject.hasProperty("startIndex"))
        {
            Object obj = soapObject.getProperty("startIndex");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startIndex = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                startIndex = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("startIndexSpecified"))
        {
            Object obj = soapObject.getProperty("startIndexSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startIndexSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startIndexSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("count"))
        {
            Object obj = soapObject.getProperty("count");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                count = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                count = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("countSpecified"))
        {
            Object obj = soapObject.getProperty("countSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                countSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderBy"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("orderBy");
            orderBy = new VectorString(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return criteria;
            case 1:
                return startIndex;
            case 2:
                return startIndexSpecified;
            case 3:
                return count;
            case 4:
                return countSpecified;
            case 5:
                return orderBy;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 6;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "criteria";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "startIndex";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "startIndexSpecified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "count";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "countSpecified";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "orderBy";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
