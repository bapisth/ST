package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.timestamp;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class webPaymentLogRecord implements KvmSerializable_ws {
    
    public String feeAmountList;
    public String feeRSNList;
    public String folderRSNList;
    public int groupRSN;
    public boolean groupRSNSpecified;
    public String lId;
    public int logRSN;
    public boolean logRSNSpecified;
    public String paymentData1;
    public String paymentData2;
    public String paymentData3;
    public String paymentData4;
    public int peopleRSN;
    public boolean peopleRSNSpecified;
    public timestamp responseDate;
    public String responseStatus;
    public String responseString;
    public timestamp sendDate;
    public timestamp stampDate;
    public String stampUser;
    public String token;
    public double totalAmount;
    public boolean totalAmountSpecified;
    
    public webPaymentLogRecord(){}
    
    public webPaymentLogRecord(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("feeAmountList"))
        {
            Object obj = soapObject.getProperty("feeAmountList");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeAmountList = j.toString();
            }else if (obj!= null && obj instanceof String){
                feeAmountList = (String) obj;
            }
        }
        if (soapObject.hasProperty("feeRSNList"))
        {
            Object obj = soapObject.getProperty("feeRSNList");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeRSNList = j.toString();
            }else if (obj!= null && obj instanceof String){
                feeRSNList = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNList"))
        {
            Object obj = soapObject.getProperty("folderRSNList");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNList = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderRSNList = (String) obj;
            }
        }
        if (soapObject.hasProperty("groupRSN"))
        {
            Object obj = soapObject.getProperty("groupRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                groupRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("groupRSNSpecified"))
        {
            Object obj = soapObject.getProperty("groupRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                groupRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("LId"))
        {
            Object obj = soapObject.getProperty("LId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lId = j.toString();
            }else if (obj!= null && obj instanceof String){
                lId = (String) obj;
            }
        }
        if (soapObject.hasProperty("logRSN"))
        {
            Object obj = soapObject.getProperty("logRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                logRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                logRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("logRSNSpecified"))
        {
            Object obj = soapObject.getProperty("logRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                logRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                logRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("paymentData1"))
        {
            Object obj = soapObject.getProperty("paymentData1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentData1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentData1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentData2"))
        {
            Object obj = soapObject.getProperty("paymentData2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentData2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentData2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentData3"))
        {
            Object obj = soapObject.getProperty("paymentData3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentData3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentData3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentData4"))
        {
            Object obj = soapObject.getProperty("paymentData4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentData4 = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentData4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSN"))
        {
            Object obj = soapObject.getProperty("peopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("peopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("responseDate"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("responseDate");
            responseDate =  new timestamp (j);
            
        }
        if (soapObject.hasProperty("responseStatus"))
        {
            Object obj = soapObject.getProperty("responseStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseStatus = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseStatus = (String) obj;
            }
        }
        if (soapObject.hasProperty("responseString"))
        {
            Object obj = soapObject.getProperty("responseString");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseString = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseString = (String) obj;
            }
        }
        if (soapObject.hasProperty("sendDate"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("sendDate");
            sendDate =  new timestamp (j);
            
        }
        if (soapObject.hasProperty("stampDate"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("stampDate");
            stampDate =  new timestamp (j);
            
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("token"))
        {
            Object obj = soapObject.getProperty("token");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                token = j.toString();
            }else if (obj!= null && obj instanceof String){
                token = (String) obj;
            }
        }
        if (soapObject.hasProperty("totalAmount"))
        {
            Object obj = soapObject.getProperty("totalAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalAmountSpecified"))
        {
            Object obj = soapObject.getProperty("totalAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalAmountSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return feeAmountList;
            case 1:
                return feeRSNList;
            case 2:
                return folderRSNList;
            case 3:
                return groupRSN;
            case 4:
                return groupRSNSpecified;
            case 5:
                return lId;
            case 6:
                return logRSN;
            case 7:
                return logRSNSpecified;
            case 8:
                return paymentData1;
            case 9:
                return paymentData2;
            case 10:
                return paymentData3;
            case 11:
                return paymentData4;
            case 12:
                return peopleRSN;
            case 13:
                return peopleRSNSpecified;
            case 14:
                return responseDate;
            case 15:
                return responseStatus;
            case 16:
                return responseString;
            case 17:
                return sendDate;
            case 18:
                return stampDate;
            case 19:
                return stampUser;
            case 20:
                return token;
            case 21:
                return totalAmount;
            case 22:
                return totalAmountSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 23;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "feeAmountList";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "feeRSNList";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderRSNList";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "groupRSN";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "groupRSNSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LId";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "logRSN";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "logRSNSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentData1";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentData2";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentData3";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentData4";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleRSN";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleRSNSpecified";
                break;
            case 14:
                info.type = timestamp.class;
                info.name = "responseDate";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseStatus";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseString";
                break;
            case 17:
                info.type = timestamp.class;
                info.name = "sendDate";
                break;
            case 18:
                info.type = timestamp.class;
                info.name = "stampDate";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "token";
                break;
            case 21:
                info.type = Double.class;
                info.name = "totalAmount";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalAmountSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
