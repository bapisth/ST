package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsAccountBill implements KvmSerializable_ws {
    
    public double billAmount;
    public boolean billAmountSpecified;
    public String billDesc;
    public int billNumber;
    public boolean billNumberSpecified;
    public String dateGenerated;
    public boolean dateGeneratedSpecified;
    public String dueDate;
    public boolean dueDateSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String paidInFullFlag;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public double totalPaid;
    public boolean totalPaidSpecified;
    
    public wsAccountBill(){}
    
    public wsAccountBill(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("billAmount"))
        {
            Object obj = soapObject.getProperty("billAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                billAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("billAmountSpecified"))
        {
            Object obj = soapObject.getProperty("billAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                billAmountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("billDesc"))
        {
            Object obj = soapObject.getProperty("billDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                billDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("billNumber"))
        {
            Object obj = soapObject.getProperty("billNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                billNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("billNumberSpecified"))
        {
            Object obj = soapObject.getProperty("billNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                billNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateGenerated"))
        {
            Object obj = soapObject.getProperty("dateGenerated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateGenerated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateGenerated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateGeneratedSpecified"))
        {
            Object obj = soapObject.getProperty("dateGeneratedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateGeneratedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateGeneratedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dueDate"))
        {
            Object obj = soapObject.getProperty("dueDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dueDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                dueDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("dueDateSpecified"))
        {
            Object obj = soapObject.getProperty("dueDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dueDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dueDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("paidInFullFlag"))
        {
            Object obj = soapObject.getProperty("paidInFullFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paidInFullFlag = j.toString();
            }else if (obj!= null && obj instanceof String){
                paidInFullFlag = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("totalPaid"))
        {
            Object obj = soapObject.getProperty("totalPaid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalPaid = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalPaid = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalPaidSpecified"))
        {
            Object obj = soapObject.getProperty("totalPaidSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalPaidSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalPaidSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return billAmount;
            case 1:
                return billAmountSpecified;
            case 2:
                return billDesc;
            case 3:
                return billNumber;
            case 4:
                return billNumberSpecified;
            case 5:
                return dateGenerated;
            case 6:
                return dateGeneratedSpecified;
            case 7:
                return dueDate;
            case 8:
                return dueDateSpecified;
            case 9:
                return folderRSN;
            case 10:
                return folderRSNSpecified;
            case 11:
                return paidInFullFlag;
            case 12:
                return stampDate;
            case 13:
                return stampDateSpecified;
            case 14:
                return stampUser;
            case 15:
                return totalPaid;
            case 16:
                return totalPaidSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 17;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Double.class;
                info.name = "billAmount";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "billAmountSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "billDesc";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "billNumber";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "billNumberSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateGenerated";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateGeneratedSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dueDate";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dueDateSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paidInFullFlag";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 15:
                info.type = Double.class;
                info.name = "totalPaid";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalPaidSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
