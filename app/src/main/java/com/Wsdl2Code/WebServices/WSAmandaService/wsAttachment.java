package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsAttachment implements KvmSerializable_ws {
    
    public String assignedUser;
    public int attachmentCode;
    public boolean attachmentCodeSpecified;
    public String attachmentDesc;
    public String attachmentDetail;
    public String attachmentFileAlias;
    public String attachmentFileSuffix;
    public int attachmentRSN;
    public boolean attachmentRSNSpecified;
    public int attachmentStatusCode;
    public boolean attachmentStatusCodeSpecified;
    public String attachmentStatusDesc;
    public String attachmentTypeDesc;
    public boolean currentVersionFlag;
    public boolean currentVersionFlagSpecified;
    public String dosPath;
    public String edmsID;
    public int linkCode;
    public boolean linkCodeSpecified;
    public String oldDOSPath;
    public String stampDate;
    public boolean stampDateSpecified;
    public String tableName;
    public int tableRSN;
    public boolean tableRSNSpecified;
    
    public wsAttachment(){}
    
    public wsAttachment(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("assignedUser"))
        {
            Object obj = soapObject.getProperty("assignedUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                assignedUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                assignedUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentCode"))
        {
            Object obj = soapObject.getProperty("attachmentCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                attachmentCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("attachmentCodeSpecified"))
        {
            Object obj = soapObject.getProperty("attachmentCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                attachmentCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("attachmentDesc"))
        {
            Object obj = soapObject.getProperty("attachmentDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentDetail"))
        {
            Object obj = soapObject.getProperty("attachmentDetail");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentDetail = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentDetail = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentFileAlias"))
        {
            Object obj = soapObject.getProperty("attachmentFileAlias");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentFileAlias = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentFileAlias = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentFileSuffix"))
        {
            Object obj = soapObject.getProperty("attachmentFileSuffix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentFileSuffix = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentFileSuffix = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentRSN"))
        {
            Object obj = soapObject.getProperty("attachmentRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                attachmentRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("attachmentRSNSpecified"))
        {
            Object obj = soapObject.getProperty("attachmentRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                attachmentRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("attachmentStatusCode"))
        {
            Object obj = soapObject.getProperty("attachmentStatusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentStatusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                attachmentStatusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("attachmentStatusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("attachmentStatusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentStatusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                attachmentStatusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("attachmentStatusDesc"))
        {
            Object obj = soapObject.getProperty("attachmentStatusDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentStatusDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentStatusDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("attachmentTypeDesc"))
        {
            Object obj = soapObject.getProperty("attachmentTypeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentTypeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                attachmentTypeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("currentVersionFlag"))
        {
            Object obj = soapObject.getProperty("currentVersionFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentVersionFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                currentVersionFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("currentVersionFlagSpecified"))
        {
            Object obj = soapObject.getProperty("currentVersionFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentVersionFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                currentVersionFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dosPath"))
        {
            Object obj = soapObject.getProperty("dosPath");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dosPath = j.toString();
            }else if (obj!= null && obj instanceof String){
                dosPath = (String) obj;
            }
        }
        if (soapObject.hasProperty("edmsID"))
        {
            Object obj = soapObject.getProperty("edmsID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                edmsID = j.toString();
            }else if (obj!= null && obj instanceof String){
                edmsID = (String) obj;
            }
        }
        if (soapObject.hasProperty("linkCode"))
        {
            Object obj = soapObject.getProperty("linkCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                linkCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                linkCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("linkCodeSpecified"))
        {
            Object obj = soapObject.getProperty("linkCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                linkCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                linkCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oldDOSPath"))
        {
            Object obj = soapObject.getProperty("oldDOSPath");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oldDOSPath = j.toString();
            }else if (obj!= null && obj instanceof String){
                oldDOSPath = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("tableName"))
        {
            Object obj = soapObject.getProperty("tableName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tableName = j.toString();
            }else if (obj!= null && obj instanceof String){
                tableName = (String) obj;
            }
        }
        if (soapObject.hasProperty("tableRSN"))
        {
            Object obj = soapObject.getProperty("tableRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tableRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                tableRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("tableRSNSpecified"))
        {
            Object obj = soapObject.getProperty("tableRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tableRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                tableRSNSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return assignedUser;
            case 1:
                return attachmentCode;
            case 2:
                return attachmentCodeSpecified;
            case 3:
                return attachmentDesc;
            case 4:
                return attachmentDetail;
            case 5:
                return attachmentFileAlias;
            case 6:
                return attachmentFileSuffix;
            case 7:
                return attachmentRSN;
            case 8:
                return attachmentRSNSpecified;
            case 9:
                return attachmentStatusCode;
            case 10:
                return attachmentStatusCodeSpecified;
            case 11:
                return attachmentStatusDesc;
            case 12:
                return attachmentTypeDesc;
            case 13:
                return currentVersionFlag;
            case 14:
                return currentVersionFlagSpecified;
            case 15:
                return dosPath;
            case 16:
                return edmsID;
            case 17:
                return linkCode;
            case 18:
                return linkCodeSpecified;
            case 19:
                return oldDOSPath;
            case 20:
                return stampDate;
            case 21:
                return stampDateSpecified;
            case 22:
                return tableName;
            case 23:
                return tableRSN;
            case 24:
                return tableRSNSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 25;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "assignedUser";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "attachmentCode";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "attachmentCodeSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentDesc";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentDetail";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentFileAlias";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentFileSuffix";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "attachmentRSN";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "attachmentRSNSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "attachmentStatusCode";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "attachmentStatusCodeSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentStatusDesc";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "attachmentTypeDesc";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "currentVersionFlag";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "currentVersionFlagSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dosPath";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "edmsID";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "linkCode";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "linkCodeSpecified";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oldDOSPath";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tableName";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "tableRSN";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "tableRSNSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
