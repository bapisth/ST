package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsFolderFee;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFee implements KvmSerializable_ws {
    
    public double billedBalanceDue;
    public double billedExcludingVoidAndCancelledField;
    public VectorwsFolderFee folderFees;
    public double nsf;
    public double paidToDate;
    public double postDated;
    public double refund;
    public double subTotal;
    public double totalBalanceDue;
    public double totalOutstanding;
    public double transfer;
    public double voidDoubleField;
    
    public wsFee(){}
    
    public wsFee(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("billedBalanceDue"))
        {
            Object obj = soapObject.getProperty("billedBalanceDue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billedBalanceDue = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                billedBalanceDue = (Double) obj;
            }
        }
        if (soapObject.hasProperty("billedExcludingVoidAndCancelled"))
        {
            Object obj = soapObject.getProperty("billedExcludingVoidAndCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                billedExcludingVoidAndCancelledField = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                billedExcludingVoidAndCancelledField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("folderFees"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("folderFees");
            folderFees = new VectorwsFolderFee(j);
        }
        if (soapObject.hasProperty("nsf"))
        {
            Object obj = soapObject.getProperty("nsf");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nsf = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                nsf = (Double) obj;
            }
        }
        if (soapObject.hasProperty("paidToDate"))
        {
            Object obj = soapObject.getProperty("paidToDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paidToDate = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                paidToDate = (Double) obj;
            }
        }
        if (soapObject.hasProperty("postDated"))
        {
            Object obj = soapObject.getProperty("postDated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                postDated = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                postDated = (Double) obj;
            }
        }
        if (soapObject.hasProperty("refund"))
        {
            Object obj = soapObject.getProperty("refund");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                refund = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                refund = (Double) obj;
            }
        }
        if (soapObject.hasProperty("subTotal"))
        {
            Object obj = soapObject.getProperty("subTotal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subTotal = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                subTotal = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalBalanceDue"))
        {
            Object obj = soapObject.getProperty("totalBalanceDue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalBalanceDue = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalBalanceDue = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalOutstanding"))
        {
            Object obj = soapObject.getProperty("totalOutstanding");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalOutstanding = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalOutstanding = (Double) obj;
            }
        }
        if (soapObject.hasProperty("transfer"))
        {
            Object obj = soapObject.getProperty("transfer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transfer = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                transfer = (Double) obj;
            }
        }
        if (soapObject.hasProperty("voidDouble"))
        {
            Object obj = soapObject.getProperty("voidDouble");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                voidDoubleField = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                voidDoubleField = (Double) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return billedBalanceDue;
            case 1:
                return billedExcludingVoidAndCancelledField;
            case 2:
                return folderFees;
            case 3:
                return nsf;
            case 4:
                return paidToDate;
            case 5:
                return postDated;
            case 6:
                return refund;
            case 7:
                return subTotal;
            case 8:
                return totalBalanceDue;
            case 9:
                return totalOutstanding;
            case 10:
                return transfer;
            case 11:
                return voidDoubleField;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Double.class;
                info.name = "billedBalanceDue";
                break;
            case 1:
                info.type = Double.class;
                info.name = "billedExcludingVoidAndCancelled";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "folderFees";
                break;
            case 3:
                info.type = Double.class;
                info.name = "nsf";
                break;
            case 4:
                info.type = Double.class;
                info.name = "paidToDate";
                break;
            case 5:
                info.type = Double.class;
                info.name = "postDated";
                break;
            case 6:
                info.type = Double.class;
                info.name = "refund";
                break;
            case 7:
                info.type = Double.class;
                info.name = "subTotal";
                break;
            case 8:
                info.type = Double.class;
                info.name = "totalBalanceDue";
                break;
            case 9:
                info.type = Double.class;
                info.name = "totalOutstanding";
                break;
            case 10:
                info.type = Double.class;
                info.name = "transfer";
                break;
            case 11:
                info.type = Double.class;
                info.name = "voidDouble";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
