package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFoiComplaintFolder implements KvmSerializable_ws {
    
    public String commissionerFileNumber;
    public String complainantName;
    public String complaintCloseDate;
    public boolean complaintCloseDateSpecified;
    public int complaintFolderRSN;
    public String complaintNumber;
    public String complaintReceived;
    public boolean complaintReceivedSpecified;
    public String complaintText;
    public String customFolderNumber;
    public String finding;
    public String findingDate;
    public boolean findingDateSpecified;
    public int folderRSN;
    public String folderType;
    public String investigator;
    public String officer;
    public String reason;
    public String receivedByCommissioner;
    public boolean receivedByCommissionerSpecified;
    public String result;
    
    public wsFoiComplaintFolder(){}
    
    public wsFoiComplaintFolder(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("commissionerFileNumber"))
        {
            Object obj = soapObject.getProperty("commissionerFileNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commissionerFileNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                commissionerFileNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("complainantName"))
        {
            Object obj = soapObject.getProperty("complainantName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complainantName = j.toString();
            }else if (obj!= null && obj instanceof String){
                complainantName = (String) obj;
            }
        }
        if (soapObject.hasProperty("complaintCloseDate"))
        {
            Object obj = soapObject.getProperty("complaintCloseDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintCloseDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                complaintCloseDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("complaintCloseDateSpecified"))
        {
            Object obj = soapObject.getProperty("complaintCloseDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintCloseDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                complaintCloseDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("complaintFolderRSN"))
        {
            Object obj = soapObject.getProperty("complaintFolderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintFolderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                complaintFolderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("complaintNumber"))
        {
            Object obj = soapObject.getProperty("complaintNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                complaintNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("complaintReceived"))
        {
            Object obj = soapObject.getProperty("complaintReceived");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintReceived = j.toString();
            }else if (obj!= null && obj instanceof String){
                complaintReceived = (String) obj;
            }
        }
        if (soapObject.hasProperty("complaintReceivedSpecified"))
        {
            Object obj = soapObject.getProperty("complaintReceivedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintReceivedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                complaintReceivedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("complaintText"))
        {
            Object obj = soapObject.getProperty("complaintText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complaintText = j.toString();
            }else if (obj!= null && obj instanceof String){
                complaintText = (String) obj;
            }
        }
        if (soapObject.hasProperty("customFolderNumber"))
        {
            Object obj = soapObject.getProperty("customFolderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customFolderNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                customFolderNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("finding"))
        {
            Object obj = soapObject.getProperty("finding");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                finding = j.toString();
            }else if (obj!= null && obj instanceof String){
                finding = (String) obj;
            }
        }
        if (soapObject.hasProperty("findingDate"))
        {
            Object obj = soapObject.getProperty("findingDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                findingDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                findingDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("findingDateSpecified"))
        {
            Object obj = soapObject.getProperty("findingDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                findingDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                findingDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderType"))
        {
            Object obj = soapObject.getProperty("folderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderType = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderType = (String) obj;
            }
        }
        if (soapObject.hasProperty("investigator"))
        {
            Object obj = soapObject.getProperty("investigator");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                investigator = j.toString();
            }else if (obj!= null && obj instanceof String){
                investigator = (String) obj;
            }
        }
        if (soapObject.hasProperty("officer"))
        {
            Object obj = soapObject.getProperty("officer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                officer = j.toString();
            }else if (obj!= null && obj instanceof String){
                officer = (String) obj;
            }
        }
        if (soapObject.hasProperty("reason"))
        {
            Object obj = soapObject.getProperty("reason");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reason = j.toString();
            }else if (obj!= null && obj instanceof String){
                reason = (String) obj;
            }
        }
        if (soapObject.hasProperty("receivedByCommissioner"))
        {
            Object obj = soapObject.getProperty("receivedByCommissioner");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                receivedByCommissioner = j.toString();
            }else if (obj!= null && obj instanceof String){
                receivedByCommissioner = (String) obj;
            }
        }
        if (soapObject.hasProperty("receivedByCommissionerSpecified"))
        {
            Object obj = soapObject.getProperty("receivedByCommissionerSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                receivedByCommissionerSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                receivedByCommissionerSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("result"))
        {
            Object obj = soapObject.getProperty("result");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                result = j.toString();
            }else if (obj!= null && obj instanceof String){
                result = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return commissionerFileNumber;
            case 1:
                return complainantName;
            case 2:
                return complaintCloseDate;
            case 3:
                return complaintCloseDateSpecified;
            case 4:
                return complaintFolderRSN;
            case 5:
                return complaintNumber;
            case 6:
                return complaintReceived;
            case 7:
                return complaintReceivedSpecified;
            case 8:
                return complaintText;
            case 9:
                return customFolderNumber;
            case 10:
                return finding;
            case 11:
                return findingDate;
            case 12:
                return findingDateSpecified;
            case 13:
                return folderRSN;
            case 14:
                return folderType;
            case 15:
                return investigator;
            case 16:
                return officer;
            case 17:
                return reason;
            case 18:
                return receivedByCommissioner;
            case 19:
                return receivedByCommissionerSpecified;
            case 20:
                return result;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 21;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "commissionerFileNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complainantName";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complaintCloseDate";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "complaintCloseDateSpecified";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "complaintFolderRSN";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complaintNumber";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complaintReceived";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "complaintReceivedSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complaintText";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "customFolderNumber";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "finding";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "findingDate";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "findingDateSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderType";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "investigator";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "officer";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reason";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "receivedByCommissioner";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "receivedByCommissionerSpecified";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "result";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
