package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFoiCorrectionFolder implements KvmSerializable_ws {
    
    public String correctionCloseDate;
    public boolean correctionCloseDateSpecified;
    public int correctionFolderRSN;
    public String correctionMade;
    public boolean correctionMadeSpecified;
    public String correctionMadeType;
    public String correctionRequested;
    public boolean correctionRequestedSpecified;
    public String correctionText;
    public String customFolderNumber;
    public int folderRSN;
    public String folderType;
    public String notationAttached;
    public boolean notationAttachedSpecified;
    public String officer;
    public String question1;
    public String question2;
    public String statementOfDisagreement;
    
    public wsFoiCorrectionFolder(){}
    
    public wsFoiCorrectionFolder(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("correctionCloseDate"))
        {
            Object obj = soapObject.getProperty("correctionCloseDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionCloseDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                correctionCloseDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("correctionCloseDateSpecified"))
        {
            Object obj = soapObject.getProperty("correctionCloseDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionCloseDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                correctionCloseDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("correctionFolderRSN"))
        {
            Object obj = soapObject.getProperty("correctionFolderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionFolderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                correctionFolderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("correctionMade"))
        {
            Object obj = soapObject.getProperty("correctionMade");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionMade = j.toString();
            }else if (obj!= null && obj instanceof String){
                correctionMade = (String) obj;
            }
        }
        if (soapObject.hasProperty("correctionMadeSpecified"))
        {
            Object obj = soapObject.getProperty("correctionMadeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionMadeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                correctionMadeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("correctionMadeType"))
        {
            Object obj = soapObject.getProperty("correctionMadeType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionMadeType = j.toString();
            }else if (obj!= null && obj instanceof String){
                correctionMadeType = (String) obj;
            }
        }
        if (soapObject.hasProperty("correctionRequested"))
        {
            Object obj = soapObject.getProperty("correctionRequested");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionRequested = j.toString();
            }else if (obj!= null && obj instanceof String){
                correctionRequested = (String) obj;
            }
        }
        if (soapObject.hasProperty("correctionRequestedSpecified"))
        {
            Object obj = soapObject.getProperty("correctionRequestedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionRequestedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                correctionRequestedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("correctionText"))
        {
            Object obj = soapObject.getProperty("correctionText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correctionText = j.toString();
            }else if (obj!= null && obj instanceof String){
                correctionText = (String) obj;
            }
        }
        if (soapObject.hasProperty("customFolderNumber"))
        {
            Object obj = soapObject.getProperty("customFolderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customFolderNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                customFolderNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderType"))
        {
            Object obj = soapObject.getProperty("folderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderType = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderType = (String) obj;
            }
        }
        if (soapObject.hasProperty("notationAttached"))
        {
            Object obj = soapObject.getProperty("notationAttached");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notationAttached = j.toString();
            }else if (obj!= null && obj instanceof String){
                notationAttached = (String) obj;
            }
        }
        if (soapObject.hasProperty("notationAttachedSpecified"))
        {
            Object obj = soapObject.getProperty("notationAttachedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notationAttachedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                notationAttachedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("officer"))
        {
            Object obj = soapObject.getProperty("officer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                officer = j.toString();
            }else if (obj!= null && obj instanceof String){
                officer = (String) obj;
            }
        }
        if (soapObject.hasProperty("question1"))
        {
            Object obj = soapObject.getProperty("question1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                question1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                question1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("question2"))
        {
            Object obj = soapObject.getProperty("question2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                question2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                question2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("statementOfDisagreement"))
        {
            Object obj = soapObject.getProperty("statementOfDisagreement");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statementOfDisagreement = j.toString();
            }else if (obj!= null && obj instanceof String){
                statementOfDisagreement = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return correctionCloseDate;
            case 1:
                return correctionCloseDateSpecified;
            case 2:
                return correctionFolderRSN;
            case 3:
                return correctionMade;
            case 4:
                return correctionMadeSpecified;
            case 5:
                return correctionMadeType;
            case 6:
                return correctionRequested;
            case 7:
                return correctionRequestedSpecified;
            case 8:
                return correctionText;
            case 9:
                return customFolderNumber;
            case 10:
                return folderRSN;
            case 11:
                return folderType;
            case 12:
                return notationAttached;
            case 13:
                return notationAttachedSpecified;
            case 14:
                return officer;
            case 15:
                return question1;
            case 16:
                return question2;
            case 17:
                return statementOfDisagreement;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 18;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correctionCloseDate";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "correctionCloseDateSpecified";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "correctionFolderRSN";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correctionMade";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "correctionMadeSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correctionMadeType";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correctionRequested";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "correctionRequestedSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correctionText";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "customFolderNumber";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderType";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "notationAttached";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "notationAttachedSpecified";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "officer";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "question1";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "question2";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statementOfDisagreement";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
