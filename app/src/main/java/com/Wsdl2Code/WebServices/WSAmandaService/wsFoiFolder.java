package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFoiFolder implements KvmSerializable_ws {
    
    public int actCode;
    public String agencyUser;
    public int century;
    public boolean centurySpecified;
    public String customFolderNumber;
    public String dateClosed;
    public boolean dateClosedSpecified;
    public String dateCompleteReceived;
    public boolean dateCompleteReceivedSpecified;
    public String dateDue;
    public boolean dateDueSpecified;
    public String dateInitialRecevied;
    public boolean dateInitialReceviedSpecified;
    public String dateOnDocument;
    public boolean dateOnDocumentSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String folderRevision;
    public String folderSection;
    public String folderType;
    public String fullText;
    public int requesterRSN;
    public boolean requesterRSNSpecified;
    public String sequence;
    public int sourceCode;
    public boolean sourceCodeSpecified;
    public String sourceDescription;
    public String status;
    public String year;
    
    public wsFoiFolder(){}
    
    public wsFoiFolder(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("actCode"))
        {
            Object obj = soapObject.getProperty("actCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                actCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                actCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("agencyUser"))
        {
            Object obj = soapObject.getProperty("agencyUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agencyUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                agencyUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("century"))
        {
            Object obj = soapObject.getProperty("century");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                century = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                century = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("centurySpecified"))
        {
            Object obj = soapObject.getProperty("centurySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                centurySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                centurySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("customFolderNumber"))
        {
            Object obj = soapObject.getProperty("customFolderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customFolderNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                customFolderNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateClosed"))
        {
            Object obj = soapObject.getProperty("dateClosed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateClosed = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateClosed = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateClosedSpecified"))
        {
            Object obj = soapObject.getProperty("dateClosedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateClosedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateClosedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateCompleteReceived"))
        {
            Object obj = soapObject.getProperty("dateCompleteReceived");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCompleteReceived = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateCompleteReceived = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCompleteReceivedSpecified"))
        {
            Object obj = soapObject.getProperty("dateCompleteReceivedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCompleteReceivedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateCompleteReceivedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateDue"))
        {
            Object obj = soapObject.getProperty("dateDue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDue = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateDue = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateDueSpecified"))
        {
            Object obj = soapObject.getProperty("dateDueSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDueSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateDueSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateInitialRecevied"))
        {
            Object obj = soapObject.getProperty("dateInitialRecevied");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateInitialRecevied = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateInitialRecevied = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateInitialReceviedSpecified"))
        {
            Object obj = soapObject.getProperty("dateInitialReceviedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateInitialReceviedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateInitialReceviedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateOnDocument"))
        {
            Object obj = soapObject.getProperty("dateOnDocument");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateOnDocument = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateOnDocument = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateOnDocumentSpecified"))
        {
            Object obj = soapObject.getProperty("dateOnDocumentSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateOnDocumentSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateOnDocumentSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRevision"))
        {
            Object obj = soapObject.getProperty("folderRevision");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRevision = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderRevision = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderSection"))
        {
            Object obj = soapObject.getProperty("folderSection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderSection = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderSection = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderType"))
        {
            Object obj = soapObject.getProperty("folderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderType = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderType = (String) obj;
            }
        }
        if (soapObject.hasProperty("fullText"))
        {
            Object obj = soapObject.getProperty("fullText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fullText = j.toString();
            }else if (obj!= null && obj instanceof String){
                fullText = (String) obj;
            }
        }
        if (soapObject.hasProperty("requesterRSN"))
        {
            Object obj = soapObject.getProperty("requesterRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                requesterRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                requesterRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("requesterRSNSpecified"))
        {
            Object obj = soapObject.getProperty("requesterRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                requesterRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                requesterRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sequence"))
        {
            Object obj = soapObject.getProperty("sequence");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sequence = j.toString();
            }else if (obj!= null && obj instanceof String){
                sequence = (String) obj;
            }
        }
        if (soapObject.hasProperty("sourceCode"))
        {
            Object obj = soapObject.getProperty("sourceCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sourceCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                sourceCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("sourceCodeSpecified"))
        {
            Object obj = soapObject.getProperty("sourceCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sourceCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sourceCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sourceDescription"))
        {
            Object obj = soapObject.getProperty("sourceDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sourceDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                sourceDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("status"))
        {
            Object obj = soapObject.getProperty("status");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                status = j.toString();
            }else if (obj!= null && obj instanceof String){
                status = (String) obj;
            }
        }
        if (soapObject.hasProperty("year"))
        {
            Object obj = soapObject.getProperty("year");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                year = j.toString();
            }else if (obj!= null && obj instanceof String){
                year = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return actCode;
            case 1:
                return agencyUser;
            case 2:
                return century;
            case 3:
                return centurySpecified;
            case 4:
                return customFolderNumber;
            case 5:
                return dateClosed;
            case 6:
                return dateClosedSpecified;
            case 7:
                return dateCompleteReceived;
            case 8:
                return dateCompleteReceivedSpecified;
            case 9:
                return dateDue;
            case 10:
                return dateDueSpecified;
            case 11:
                return dateInitialRecevied;
            case 12:
                return dateInitialReceviedSpecified;
            case 13:
                return dateOnDocument;
            case 14:
                return dateOnDocumentSpecified;
            case 15:
                return folderRSN;
            case 16:
                return folderRSNSpecified;
            case 17:
                return folderRevision;
            case 18:
                return folderSection;
            case 19:
                return folderType;
            case 20:
                return fullText;
            case 21:
                return requesterRSN;
            case 22:
                return requesterRSNSpecified;
            case 23:
                return sequence;
            case 24:
                return sourceCode;
            case 25:
                return sourceCodeSpecified;
            case 26:
                return sourceDescription;
            case 27:
                return status;
            case 28:
                return year;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 29;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "actCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "agencyUser";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "century";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "centurySpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "customFolderNumber";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateClosed";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateClosedSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateCompleteReceived";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateCompleteReceivedSpecified";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateDue";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateDueSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateInitialRecevied";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateInitialReceviedSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateOnDocument";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateOnDocumentSpecified";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderRevision";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderSection";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderType";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fullText";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "requesterRSN";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "requesterRSNSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sequence";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "sourceCode";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sourceCodeSpecified";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sourceDescription";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "status";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "year";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
