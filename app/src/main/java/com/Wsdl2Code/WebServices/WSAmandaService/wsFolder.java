package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:22 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolder implements KvmSerializable_ws {
    
    public String agencyType;
    public String copyFlag;
    public String customFolderNumber;
    public String dateFolderPrinted;
    public boolean dateFolderPrintedSpecified;
    public String expiryDate;
    public boolean expiryDateSpecified;
    public String finalDate;
    public boolean finalDateSpecified;
    public int folderCentury;
    public boolean folderCenturySpecified;
    public String folderCondition;
    public String folderDesc;
    public String folderDescription;
    public int folderGroupCode;
    public boolean folderGroupCodeSpecified;
    public String folderGroupDesc;
    public String folderName;
    public String folderNumber;
    public String folderPropertyUnit;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String folderRevision;
    public String folderSection;
    public String folderSequence;
    public String folderType;
    public String folderTypeDesc;
    public String folderYear;
    public int groupTypeCode;
    public boolean groupTypeCodeSpecified;
    public String indate;
    public boolean indateSpecified;
    public String issueDate;
    public boolean issueDateSpecified;
    public String issueUser;
    public String issueUserName;
    public boolean issuedFlag;
    public boolean issuedFlagSpecified;
    public int lrPropertyRSN;
    public boolean lrPropertyRSNSpecified;
    public int oldFolderRSN;
    public boolean oldFolderRSNSpecified;
    public String operationName;
    public int parentRSN;
    public boolean parentRSNSpecified;
    public int priority;
    public boolean prioritySpecified;
    public String projectLeadUserID;
    public String projectLeadUserName;
    public String propertyLocation;
    public int propertyRSN;
    public boolean propertyRSNSpecified;
    public String referenceFile;
    public String referenceFile2;
    public String referenceFile3;
    public String referenceFile4;
    public String referenceFile5;
    public String referenceFile6;
    public String referenceFile7;
    public String renewalPrintDate;
    public boolean renewalPrintDateSpecified;
    public int securityCode;
    public boolean securityCodeSpecified;
    public int statCanArea;
    public boolean statCanAreaSpecified;
    public int statCanUnitChanged;
    public boolean statCanUnitChangedSpecified;
    public int statCanUnits;
    public boolean statCanUnitsSpecified;
    public double statCanValuation;
    public boolean statCanValuationSpecified;
    public int statusCode;
    public boolean statusCodeSpecified;
    public String statusDesc;
    public int subCode;
    public boolean subCodeSpecified;
    public String subCodeDesc;
    public int vehicleRSN;
    public boolean vehicleRSNSpecified;
    public int workCode;
    public boolean workCodeSpecified;
    public String workCodeDesc;
    
    public wsFolder(){}
    
    public wsFolder(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("agencyType"))
        {
            Object obj = soapObject.getProperty("agencyType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agencyType = j.toString();
            }else if (obj!= null && obj instanceof String){
                agencyType = (String) obj;
            }
        }
        if (soapObject.hasProperty("copyFlag"))
        {
            Object obj = soapObject.getProperty("copyFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                copyFlag = j.toString();
            }else if (obj!= null && obj instanceof String){
                copyFlag = (String) obj;
            }
        }
        if (soapObject.hasProperty("customFolderNumber"))
        {
            Object obj = soapObject.getProperty("customFolderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customFolderNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                customFolderNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateFolderPrinted"))
        {
            Object obj = soapObject.getProperty("dateFolderPrinted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateFolderPrinted = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateFolderPrinted = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateFolderPrintedSpecified"))
        {
            Object obj = soapObject.getProperty("dateFolderPrintedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateFolderPrintedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateFolderPrintedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("expiryDate"))
        {
            Object obj = soapObject.getProperty("expiryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expiryDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                expiryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("expiryDateSpecified"))
        {
            Object obj = soapObject.getProperty("expiryDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expiryDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                expiryDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("finalDate"))
        {
            Object obj = soapObject.getProperty("finalDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                finalDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                finalDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("finalDateSpecified"))
        {
            Object obj = soapObject.getProperty("finalDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                finalDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                finalDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderCentury"))
        {
            Object obj = soapObject.getProperty("folderCentury");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderCentury = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderCentury = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderCenturySpecified"))
        {
            Object obj = soapObject.getProperty("folderCenturySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderCenturySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderCenturySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderCondition"))
        {
            Object obj = soapObject.getProperty("folderCondition");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderCondition = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderCondition = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderDesc"))
        {
            Object obj = soapObject.getProperty("folderDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderDescription"))
        {
            Object obj = soapObject.getProperty("folderDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderGroupCode"))
        {
            Object obj = soapObject.getProperty("folderGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderGroupCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderGroupCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderGroupCodeSpecified"))
        {
            Object obj = soapObject.getProperty("folderGroupCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderGroupCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderGroupCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderGroupDesc"))
        {
            Object obj = soapObject.getProperty("folderGroupDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderGroupDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderGroupDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderName"))
        {
            Object obj = soapObject.getProperty("folderName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderName = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderName = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderNumber"))
        {
            Object obj = soapObject.getProperty("folderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderPropertyUnit"))
        {
            Object obj = soapObject.getProperty("folderPropertyUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderPropertyUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderPropertyUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRevision"))
        {
            Object obj = soapObject.getProperty("folderRevision");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRevision = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderRevision = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderSection"))
        {
            Object obj = soapObject.getProperty("folderSection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderSection = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderSection = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderSequence"))
        {
            Object obj = soapObject.getProperty("folderSequence");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderSequence = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderSequence = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderType"))
        {
            Object obj = soapObject.getProperty("folderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderType = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderType = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderTypeDesc"))
        {
            Object obj = soapObject.getProperty("folderTypeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderTypeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderTypeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderYear"))
        {
            Object obj = soapObject.getProperty("folderYear");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderYear = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderYear = (String) obj;
            }
        }
        if (soapObject.hasProperty("groupTypeCode"))
        {
            Object obj = soapObject.getProperty("groupTypeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupTypeCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                groupTypeCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("groupTypeCodeSpecified"))
        {
            Object obj = soapObject.getProperty("groupTypeCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupTypeCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                groupTypeCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("indate"))
        {
            Object obj = soapObject.getProperty("indate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                indate = j.toString();
            }else if (obj!= null && obj instanceof String){
                indate = (String) obj;
            }
        }
        if (soapObject.hasProperty("indateSpecified"))
        {
            Object obj = soapObject.getProperty("indateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                indateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                indateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("issueDate"))
        {
            Object obj = soapObject.getProperty("issueDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issueDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                issueDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("issueDateSpecified"))
        {
            Object obj = soapObject.getProperty("issueDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issueDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                issueDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("issueUser"))
        {
            Object obj = soapObject.getProperty("issueUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issueUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                issueUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("issueUserName"))
        {
            Object obj = soapObject.getProperty("issueUserName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issueUserName = j.toString();
            }else if (obj!= null && obj instanceof String){
                issueUserName = (String) obj;
            }
        }
        if (soapObject.hasProperty("issuedFlag"))
        {
            Object obj = soapObject.getProperty("issuedFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issuedFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                issuedFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("issuedFlagSpecified"))
        {
            Object obj = soapObject.getProperty("issuedFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                issuedFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                issuedFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("lrPropertyRSN"))
        {
            Object obj = soapObject.getProperty("lrPropertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lrPropertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lrPropertyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("lrPropertyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("lrPropertyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lrPropertyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                lrPropertyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oldFolderRSN"))
        {
            Object obj = soapObject.getProperty("oldFolderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oldFolderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                oldFolderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("oldFolderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("oldFolderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oldFolderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                oldFolderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("operationName"))
        {
            Object obj = soapObject.getProperty("operationName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                operationName = j.toString();
            }else if (obj!= null && obj instanceof String){
                operationName = (String) obj;
            }
        }
        if (soapObject.hasProperty("parentRSN"))
        {
            Object obj = soapObject.getProperty("parentRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parentRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("parentRSNSpecified"))
        {
            Object obj = soapObject.getProperty("parentRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parentRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("priority"))
        {
            Object obj = soapObject.getProperty("priority");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                priority = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                priority = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("prioritySpecified"))
        {
            Object obj = soapObject.getProperty("prioritySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                prioritySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                prioritySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("projectLeadUserID"))
        {
            Object obj = soapObject.getProperty("projectLeadUserID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                projectLeadUserID = j.toString();
            }else if (obj!= null && obj instanceof String){
                projectLeadUserID = (String) obj;
            }
        }
        if (soapObject.hasProperty("projectLeadUserName"))
        {
            Object obj = soapObject.getProperty("projectLeadUserName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                projectLeadUserName = j.toString();
            }else if (obj!= null && obj instanceof String){
                projectLeadUserName = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyLocation"))
        {
            Object obj = soapObject.getProperty("propertyLocation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyLocation = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyLocation = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSN"))
        {
            Object obj = soapObject.getProperty("propertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("propertyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile"))
        {
            Object obj = soapObject.getProperty("referenceFile");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile2"))
        {
            Object obj = soapObject.getProperty("referenceFile2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile3"))
        {
            Object obj = soapObject.getProperty("referenceFile3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile4"))
        {
            Object obj = soapObject.getProperty("referenceFile4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile4 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile5"))
        {
            Object obj = soapObject.getProperty("referenceFile5");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile5 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile5 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile6"))
        {
            Object obj = soapObject.getProperty("referenceFile6");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile6 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile6 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile7"))
        {
            Object obj = soapObject.getProperty("referenceFile7");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile7 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile7 = (String) obj;
            }
        }
        if (soapObject.hasProperty("renewalPrintDate"))
        {
            Object obj = soapObject.getProperty("renewalPrintDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                renewalPrintDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                renewalPrintDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("renewalPrintDateSpecified"))
        {
            Object obj = soapObject.getProperty("renewalPrintDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                renewalPrintDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                renewalPrintDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("securityCode"))
        {
            Object obj = soapObject.getProperty("securityCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                securityCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("securityCodeSpecified"))
        {
            Object obj = soapObject.getProperty("securityCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                securityCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statCanArea"))
        {
            Object obj = soapObject.getProperty("statCanArea");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanArea = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statCanArea = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statCanAreaSpecified"))
        {
            Object obj = soapObject.getProperty("statCanAreaSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanAreaSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statCanAreaSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statCanUnitChanged"))
        {
            Object obj = soapObject.getProperty("statCanUnitChanged");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanUnitChanged = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statCanUnitChanged = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statCanUnitChangedSpecified"))
        {
            Object obj = soapObject.getProperty("statCanUnitChangedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanUnitChangedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statCanUnitChangedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statCanUnits"))
        {
            Object obj = soapObject.getProperty("statCanUnits");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanUnits = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statCanUnits = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statCanUnitsSpecified"))
        {
            Object obj = soapObject.getProperty("statCanUnitsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanUnitsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statCanUnitsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statCanValuation"))
        {
            Object obj = soapObject.getProperty("statCanValuation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanValuation = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statCanValuation = (Double) obj;
            }
        }
        if (soapObject.hasProperty("statCanValuationSpecified"))
        {
            Object obj = soapObject.getProperty("statCanValuationSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statCanValuationSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statCanValuationSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusCode"))
        {
            Object obj = soapObject.getProperty("statusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("statusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusDesc"))
        {
            Object obj = soapObject.getProperty("statusDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                statusDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("subCode"))
        {
            Object obj = soapObject.getProperty("subCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                subCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("subCodeSpecified"))
        {
            Object obj = soapObject.getProperty("subCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                subCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("subCodeDesc"))
        {
            Object obj = soapObject.getProperty("subCodeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subCodeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                subCodeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("vehicleRSN"))
        {
            Object obj = soapObject.getProperty("vehicleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                vehicleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                vehicleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("vehicleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("vehicleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                vehicleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                vehicleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("workCode"))
        {
            Object obj = soapObject.getProperty("workCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                workCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                workCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("workCodeSpecified"))
        {
            Object obj = soapObject.getProperty("workCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                workCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                workCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("workCodeDesc"))
        {
            Object obj = soapObject.getProperty("workCodeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                workCodeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                workCodeDesc = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return agencyType;
            case 1:
                return copyFlag;
            case 2:
                return customFolderNumber;
            case 3:
                return dateFolderPrinted;
            case 4:
                return dateFolderPrintedSpecified;
            case 5:
                return expiryDate;
            case 6:
                return expiryDateSpecified;
            case 7:
                return finalDate;
            case 8:
                return finalDateSpecified;
            case 9:
                return folderCentury;
            case 10:
                return folderCenturySpecified;
            case 11:
                return folderCondition;
            case 12:
                return folderDesc;
            case 13:
                return folderDescription;
            case 14:
                return folderGroupCode;
            case 15:
                return folderGroupCodeSpecified;
            case 16:
                return folderGroupDesc;
            case 17:
                return folderName;
            case 18:
                return folderNumber;
            case 19:
                return folderPropertyUnit;
            case 20:
                return folderRSN;
            case 21:
                return folderRSNSpecified;
            case 22:
                return folderRevision;
            case 23:
                return folderSection;
            case 24:
                return folderSequence;
            case 25:
                return folderType;
            case 26:
                return folderTypeDesc;
            case 27:
                return folderYear;
            case 28:
                return groupTypeCode;
            case 29:
                return groupTypeCodeSpecified;
            case 30:
                return indate;
            case 31:
                return indateSpecified;
            case 32:
                return issueDate;
            case 33:
                return issueDateSpecified;
            case 34:
                return issueUser;
            case 35:
                return issueUserName;
            case 36:
                return issuedFlag;
            case 37:
                return issuedFlagSpecified;
            case 38:
                return lrPropertyRSN;
            case 39:
                return lrPropertyRSNSpecified;
            case 40:
                return oldFolderRSN;
            case 41:
                return oldFolderRSNSpecified;
            case 42:
                return operationName;
            case 43:
                return parentRSN;
            case 44:
                return parentRSNSpecified;
            case 45:
                return priority;
            case 46:
                return prioritySpecified;
            case 47:
                return projectLeadUserID;
            case 48:
                return projectLeadUserName;
            case 49:
                return propertyLocation;
            case 50:
                return propertyRSN;
            case 51:
                return propertyRSNSpecified;
            case 52:
                return referenceFile;
            case 53:
                return referenceFile2;
            case 54:
                return referenceFile3;
            case 55:
                return referenceFile4;
            case 56:
                return referenceFile5;
            case 57:
                return referenceFile6;
            case 58:
                return referenceFile7;
            case 59:
                return renewalPrintDate;
            case 60:
                return renewalPrintDateSpecified;
            case 61:
                return securityCode;
            case 62:
                return securityCodeSpecified;
            case 63:
                return statCanArea;
            case 64:
                return statCanAreaSpecified;
            case 65:
                return statCanUnitChanged;
            case 66:
                return statCanUnitChangedSpecified;
            case 67:
                return statCanUnits;
            case 68:
                return statCanUnitsSpecified;
            case 69:
                return statCanValuation;
            case 70:
                return statCanValuationSpecified;
            case 71:
                return statusCode;
            case 72:
                return statusCodeSpecified;
            case 73:
                return statusDesc;
            case 74:
                return subCode;
            case 75:
                return subCodeSpecified;
            case 76:
                return subCodeDesc;
            case 77:
                return vehicleRSN;
            case 78:
                return vehicleRSNSpecified;
            case 79:
                return workCode;
            case 80:
                return workCodeSpecified;
            case 81:
                return workCodeDesc;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 82;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "agencyType";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "copyFlag";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "customFolderNumber";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateFolderPrinted";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateFolderPrintedSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "expiryDate";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "expiryDateSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "finalDate";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "finalDateSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderCentury";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderCenturySpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderCondition";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderDesc";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderDescription";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderGroupCode";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderGroupCodeSpecified";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderGroupDesc";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderName";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderNumber";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderPropertyUnit";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderRevision";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderSection";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderSequence";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderType";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderTypeDesc";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderYear";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "groupTypeCode";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "groupTypeCodeSpecified";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "indate";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "indateSpecified";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "issueDate";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "issueDateSpecified";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "issueUser";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "issueUserName";
                break;
            case 36:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "issuedFlag";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "issuedFlagSpecified";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "lrPropertyRSN";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "lrPropertyRSNSpecified";
                break;
            case 40:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "oldFolderRSN";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "oldFolderRSNSpecified";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "operationName";
                break;
            case 43:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "parentRSN";
                break;
            case 44:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parentRSNSpecified";
                break;
            case 45:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "priority";
                break;
            case 46:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "prioritySpecified";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "projectLeadUserID";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "projectLeadUserName";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyLocation";
                break;
            case 50:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyRSN";
                break;
            case 51:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyRSNSpecified";
                break;
            case 52:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile";
                break;
            case 53:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile2";
                break;
            case 54:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile3";
                break;
            case 55:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile4";
                break;
            case 56:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile5";
                break;
            case 57:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile6";
                break;
            case 58:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile7";
                break;
            case 59:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "renewalPrintDate";
                break;
            case 60:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "renewalPrintDateSpecified";
                break;
            case 61:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "securityCode";
                break;
            case 62:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "securityCodeSpecified";
                break;
            case 63:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statCanArea";
                break;
            case 64:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statCanAreaSpecified";
                break;
            case 65:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statCanUnitChanged";
                break;
            case 66:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statCanUnitChangedSpecified";
                break;
            case 67:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statCanUnits";
                break;
            case 68:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statCanUnitsSpecified";
                break;
            case 69:
                info.type = Double.class;
                info.name = "statCanValuation";
                break;
            case 70:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statCanValuationSpecified";
                break;
            case 71:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statusCode";
                break;
            case 72:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statusCodeSpecified";
                break;
            case 73:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statusDesc";
                break;
            case 74:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "subCode";
                break;
            case 75:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "subCodeSpecified";
                break;
            case 76:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "subCodeDesc";
                break;
            case 77:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "vehicleRSN";
                break;
            case 78:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "vehicleRSNSpecified";
                break;
            case 79:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "workCode";
                break;
            case 80:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "workCodeSpecified";
                break;
            case 81:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "workCodeDesc";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
