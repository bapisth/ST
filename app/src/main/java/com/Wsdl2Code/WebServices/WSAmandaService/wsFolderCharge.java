package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderCharge implements KvmSerializable_ws {
    
    public String chargeCode;
    public String chargeDescription;
    public int chargeRSN;
    public boolean chargeRSNSpecified;
    public String citation;
    public boolean citationSigned;
    public boolean citationSignedSpecified;
    public int costAccountBillFeeRSN;
    public boolean costAccountBillFeeRSNSpecified;
    public int courtCosts;
    public boolean courtCostsSpecified;
    public int defendantPeopleRSN;
    public boolean defendantPeopleRSNSpecified;
    public int deferralAttemptRSN;
    public boolean deferralAttemptRSNSpecified;
    public String deferralDate;
    public boolean deferralDateSpecified;
    public String deferralDesc;
    public String deferralType;
    public int dispositionAttemptRSN;
    public boolean dispositionAttemptRSNSpecified;
    public String dispositionDate;
    public boolean dispositionDateSpecified;
    public String dispositionDesc;
    public String dispositionJudge;
    public String dispositionType;
    public String effectiveDate;
    public boolean effectiveDateSpecified;
    public int fineAccountBillFeeRSN;
    public boolean fineAccountBillFeeRSNSpecified;
    public double fineAmount;
    public boolean fineAmountSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String offenceDateFrom;
    public boolean offenceDateFromSpecified;
    public String offenceDateTo;
    public boolean offenceDateToSpecified;
    public int pleaAttemptRSN;
    public boolean pleaAttemptRSNSpecified;
    public String pleaDate;
    public boolean pleaDateSpecified;
    public String pleaDesc;
    public String pleaType;
    public int processRSN;
    public boolean processRSNSpecified;
    public int rank;
    public boolean rankSpecified;
    public String reason;
    public String severityDesc;
    public String severityType;
    
    public wsFolderCharge(){}
    
    public wsFolderCharge(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("chargeCode"))
        {
            Object obj = soapObject.getProperty("chargeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                chargeCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                chargeCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("chargeDescription"))
        {
            Object obj = soapObject.getProperty("chargeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                chargeDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                chargeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("chargeRSN"))
        {
            Object obj = soapObject.getProperty("chargeRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                chargeRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                chargeRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("chargeRSNSpecified"))
        {
            Object obj = soapObject.getProperty("chargeRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                chargeRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                chargeRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("citation"))
        {
            Object obj = soapObject.getProperty("citation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                citation = j.toString();
            }else if (obj!= null && obj instanceof String){
                citation = (String) obj;
            }
        }
        if (soapObject.hasProperty("citationSigned"))
        {
            Object obj = soapObject.getProperty("citationSigned");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                citationSigned = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                citationSigned = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("citationSignedSpecified"))
        {
            Object obj = soapObject.getProperty("citationSignedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                citationSignedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                citationSignedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("costAccountBillFeeRSN"))
        {
            Object obj = soapObject.getProperty("costAccountBillFeeRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                costAccountBillFeeRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                costAccountBillFeeRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("costAccountBillFeeRSNSpecified"))
        {
            Object obj = soapObject.getProperty("costAccountBillFeeRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                costAccountBillFeeRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                costAccountBillFeeRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("courtCosts"))
        {
            Object obj = soapObject.getProperty("courtCosts");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                courtCosts = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                courtCosts = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("courtCostsSpecified"))
        {
            Object obj = soapObject.getProperty("courtCostsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                courtCostsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                courtCostsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("defendantPeopleRSN"))
        {
            Object obj = soapObject.getProperty("defendantPeopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                defendantPeopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                defendantPeopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("defendantPeopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("defendantPeopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                defendantPeopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                defendantPeopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deferralAttemptRSN"))
        {
            Object obj = soapObject.getProperty("deferralAttemptRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralAttemptRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                deferralAttemptRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("deferralAttemptRSNSpecified"))
        {
            Object obj = soapObject.getProperty("deferralAttemptRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralAttemptRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                deferralAttemptRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deferralDate"))
        {
            Object obj = soapObject.getProperty("deferralDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                deferralDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("deferralDateSpecified"))
        {
            Object obj = soapObject.getProperty("deferralDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                deferralDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deferralDesc"))
        {
            Object obj = soapObject.getProperty("deferralDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                deferralDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("deferralType"))
        {
            Object obj = soapObject.getProperty("deferralType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deferralType = j.toString();
            }else if (obj!= null && obj instanceof String){
                deferralType = (String) obj;
            }
        }
        if (soapObject.hasProperty("dispositionAttemptRSN"))
        {
            Object obj = soapObject.getProperty("dispositionAttemptRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionAttemptRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                dispositionAttemptRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("dispositionAttemptRSNSpecified"))
        {
            Object obj = soapObject.getProperty("dispositionAttemptRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionAttemptRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dispositionAttemptRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dispositionDate"))
        {
            Object obj = soapObject.getProperty("dispositionDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                dispositionDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("dispositionDateSpecified"))
        {
            Object obj = soapObject.getProperty("dispositionDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dispositionDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dispositionDesc"))
        {
            Object obj = soapObject.getProperty("dispositionDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                dispositionDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("dispositionJudge"))
        {
            Object obj = soapObject.getProperty("dispositionJudge");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionJudge = j.toString();
            }else if (obj!= null && obj instanceof String){
                dispositionJudge = (String) obj;
            }
        }
        if (soapObject.hasProperty("dispositionType"))
        {
            Object obj = soapObject.getProperty("dispositionType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dispositionType = j.toString();
            }else if (obj!= null && obj instanceof String){
                dispositionType = (String) obj;
            }
        }
        if (soapObject.hasProperty("effectiveDate"))
        {
            Object obj = soapObject.getProperty("effectiveDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                effectiveDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                effectiveDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("effectiveDateSpecified"))
        {
            Object obj = soapObject.getProperty("effectiveDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                effectiveDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                effectiveDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fineAccountBillFeeRSN"))
        {
            Object obj = soapObject.getProperty("fineAccountBillFeeRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fineAccountBillFeeRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fineAccountBillFeeRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("fineAccountBillFeeRSNSpecified"))
        {
            Object obj = soapObject.getProperty("fineAccountBillFeeRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fineAccountBillFeeRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fineAccountBillFeeRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fineAmount"))
        {
            Object obj = soapObject.getProperty("fineAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fineAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fineAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("fineAmountSpecified"))
        {
            Object obj = soapObject.getProperty("fineAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fineAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fineAmountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("offenceDateFrom"))
        {
            Object obj = soapObject.getProperty("offenceDateFrom");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                offenceDateFrom = j.toString();
            }else if (obj!= null && obj instanceof String){
                offenceDateFrom = (String) obj;
            }
        }
        if (soapObject.hasProperty("offenceDateFromSpecified"))
        {
            Object obj = soapObject.getProperty("offenceDateFromSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                offenceDateFromSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                offenceDateFromSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("offenceDateTo"))
        {
            Object obj = soapObject.getProperty("offenceDateTo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                offenceDateTo = j.toString();
            }else if (obj!= null && obj instanceof String){
                offenceDateTo = (String) obj;
            }
        }
        if (soapObject.hasProperty("offenceDateToSpecified"))
        {
            Object obj = soapObject.getProperty("offenceDateToSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                offenceDateToSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                offenceDateToSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("pleaAttemptRSN"))
        {
            Object obj = soapObject.getProperty("pleaAttemptRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaAttemptRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                pleaAttemptRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("pleaAttemptRSNSpecified"))
        {
            Object obj = soapObject.getProperty("pleaAttemptRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaAttemptRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                pleaAttemptRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("pleaDate"))
        {
            Object obj = soapObject.getProperty("pleaDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                pleaDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("pleaDateSpecified"))
        {
            Object obj = soapObject.getProperty("pleaDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                pleaDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("pleaDesc"))
        {
            Object obj = soapObject.getProperty("pleaDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                pleaDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("pleaType"))
        {
            Object obj = soapObject.getProperty("pleaType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pleaType = j.toString();
            }else if (obj!= null && obj instanceof String){
                pleaType = (String) obj;
            }
        }
        if (soapObject.hasProperty("processRSN"))
        {
            Object obj = soapObject.getProperty("processRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processRSNSpecified"))
        {
            Object obj = soapObject.getProperty("processRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("rank"))
        {
            Object obj = soapObject.getProperty("rank");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rank = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rank = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("rankSpecified"))
        {
            Object obj = soapObject.getProperty("rankSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rankSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                rankSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("reason"))
        {
            Object obj = soapObject.getProperty("reason");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reason = j.toString();
            }else if (obj!= null && obj instanceof String){
                reason = (String) obj;
            }
        }
        if (soapObject.hasProperty("severityDesc"))
        {
            Object obj = soapObject.getProperty("severityDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                severityDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                severityDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("severityType"))
        {
            Object obj = soapObject.getProperty("severityType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                severityType = j.toString();
            }else if (obj!= null && obj instanceof String){
                severityType = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return chargeCode;
            case 1:
                return chargeDescription;
            case 2:
                return chargeRSN;
            case 3:
                return chargeRSNSpecified;
            case 4:
                return citation;
            case 5:
                return citationSigned;
            case 6:
                return citationSignedSpecified;
            case 7:
                return costAccountBillFeeRSN;
            case 8:
                return costAccountBillFeeRSNSpecified;
            case 9:
                return courtCosts;
            case 10:
                return courtCostsSpecified;
            case 11:
                return defendantPeopleRSN;
            case 12:
                return defendantPeopleRSNSpecified;
            case 13:
                return deferralAttemptRSN;
            case 14:
                return deferralAttemptRSNSpecified;
            case 15:
                return deferralDate;
            case 16:
                return deferralDateSpecified;
            case 17:
                return deferralDesc;
            case 18:
                return deferralType;
            case 19:
                return dispositionAttemptRSN;
            case 20:
                return dispositionAttemptRSNSpecified;
            case 21:
                return dispositionDate;
            case 22:
                return dispositionDateSpecified;
            case 23:
                return dispositionDesc;
            case 24:
                return dispositionJudge;
            case 25:
                return dispositionType;
            case 26:
                return effectiveDate;
            case 27:
                return effectiveDateSpecified;
            case 28:
                return fineAccountBillFeeRSN;
            case 29:
                return fineAccountBillFeeRSNSpecified;
            case 30:
                return fineAmount;
            case 31:
                return fineAmountSpecified;
            case 32:
                return folderRSN;
            case 33:
                return folderRSNSpecified;
            case 34:
                return offenceDateFrom;
            case 35:
                return offenceDateFromSpecified;
            case 36:
                return offenceDateTo;
            case 37:
                return offenceDateToSpecified;
            case 38:
                return pleaAttemptRSN;
            case 39:
                return pleaAttemptRSNSpecified;
            case 40:
                return pleaDate;
            case 41:
                return pleaDateSpecified;
            case 42:
                return pleaDesc;
            case 43:
                return pleaType;
            case 44:
                return processRSN;
            case 45:
                return processRSNSpecified;
            case 46:
                return rank;
            case 47:
                return rankSpecified;
            case 48:
                return reason;
            case 49:
                return severityDesc;
            case 50:
                return severityType;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 51;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "chargeCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "chargeDescription";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "chargeRSN";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "chargeRSNSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "citation";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "citationSigned";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "citationSignedSpecified";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "costAccountBillFeeRSN";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "costAccountBillFeeRSNSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "courtCosts";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "courtCostsSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "defendantPeopleRSN";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "defendantPeopleRSNSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "deferralAttemptRSN";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "deferralAttemptRSNSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deferralDate";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "deferralDateSpecified";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deferralDesc";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deferralType";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "dispositionAttemptRSN";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dispositionAttemptRSNSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dispositionDate";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dispositionDateSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dispositionDesc";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dispositionJudge";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dispositionType";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "effectiveDate";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "effectiveDateSpecified";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "fineAccountBillFeeRSN";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fineAccountBillFeeRSNSpecified";
                break;
            case 30:
                info.type = Double.class;
                info.name = "fineAmount";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fineAmountSpecified";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "offenceDateFrom";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "offenceDateFromSpecified";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "offenceDateTo";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "offenceDateToSpecified";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "pleaAttemptRSN";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "pleaAttemptRSNSpecified";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "pleaDate";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "pleaDateSpecified";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "pleaDesc";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "pleaType";
                break;
            case 44:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processRSN";
                break;
            case 45:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processRSNSpecified";
                break;
            case 46:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "rank";
                break;
            case 47:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "rankSpecified";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reason";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "severityDesc";
                break;
            case 50:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "severityType";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
