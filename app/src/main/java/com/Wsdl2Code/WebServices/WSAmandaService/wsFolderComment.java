package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderComment implements KvmSerializable_ws {
    
    public String commentDate;
    public boolean commentDateSpecified;
    public int commentGroupCode;
    public boolean commentGroupCodeSpecified;
    public String commentUser;
    public String comments;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public boolean includeOnToDo;
    public boolean includeOnToDoSpecified;
    public String referenceFile1;
    public String referenceFile2;
    public String reminderDate;
    public boolean reminderDateSpecified;
    public int securityCode;
    public boolean securityCodeSpecified;
    
    public wsFolderComment(){}
    
    public wsFolderComment(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("commentDate"))
        {
            Object obj = soapObject.getProperty("commentDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                commentDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("commentDateSpecified"))
        {
            Object obj = soapObject.getProperty("commentDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                commentDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("commentGroupCode"))
        {
            Object obj = soapObject.getProperty("commentGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentGroupCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                commentGroupCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("commentGroupCodeSpecified"))
        {
            Object obj = soapObject.getProperty("commentGroupCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentGroupCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                commentGroupCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("commentUser"))
        {
            Object obj = soapObject.getProperty("commentUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                commentUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("includeOnToDo"))
        {
            Object obj = soapObject.getProperty("includeOnToDo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                includeOnToDo = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                includeOnToDo = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("includeOnToDoSpecified"))
        {
            Object obj = soapObject.getProperty("includeOnToDoSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                includeOnToDoSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                includeOnToDoSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile1"))
        {
            Object obj = soapObject.getProperty("referenceFile1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile2"))
        {
            Object obj = soapObject.getProperty("referenceFile2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("reminderDate"))
        {
            Object obj = soapObject.getProperty("reminderDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reminderDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                reminderDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("reminderDateSpecified"))
        {
            Object obj = soapObject.getProperty("reminderDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reminderDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                reminderDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("securityCode"))
        {
            Object obj = soapObject.getProperty("securityCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                securityCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("securityCodeSpecified"))
        {
            Object obj = soapObject.getProperty("securityCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                securityCodeSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return commentDate;
            case 1:
                return commentDateSpecified;
            case 2:
                return commentGroupCode;
            case 3:
                return commentGroupCodeSpecified;
            case 4:
                return commentUser;
            case 5:
                return comments;
            case 6:
                return folderRSN;
            case 7:
                return folderRSNSpecified;
            case 8:
                return includeOnToDo;
            case 9:
                return includeOnToDoSpecified;
            case 10:
                return referenceFile1;
            case 11:
                return referenceFile2;
            case 12:
                return reminderDate;
            case 13:
                return reminderDateSpecified;
            case 14:
                return securityCode;
            case 15:
                return securityCodeSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "commentDate";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "commentDateSpecified";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "commentGroupCode";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "commentGroupCodeSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "commentUser";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "includeOnToDo";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "includeOnToDoSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile1";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile2";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reminderDate";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "reminderDateSpecified";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "securityCode";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "securityCodeSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
