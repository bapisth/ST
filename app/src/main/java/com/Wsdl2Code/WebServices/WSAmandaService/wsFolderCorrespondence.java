package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderCorrespondence implements KvmSerializable_ws {
    
    public int attachmentRSN;
    public boolean attachmentRSNSpecified;
    public String correspondenceDesc;
    public int correspondenceRSN;
    public boolean correspondenceRSNSpecified;
    public int documentRSN;
    public boolean documentRSNSpecified;
    public int emailRSN;
    public boolean emailRSNSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String inOutflag;
    
    public wsFolderCorrespondence(){}
    
    public wsFolderCorrespondence(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("attachmentRSN"))
        {
            Object obj = soapObject.getProperty("attachmentRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                attachmentRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("attachmentRSNSpecified"))
        {
            Object obj = soapObject.getProperty("attachmentRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attachmentRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                attachmentRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("correspondenceDesc"))
        {
            Object obj = soapObject.getProperty("correspondenceDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correspondenceDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                correspondenceDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("correspondenceRSN"))
        {
            Object obj = soapObject.getProperty("correspondenceRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correspondenceRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                correspondenceRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("correspondenceRSNSpecified"))
        {
            Object obj = soapObject.getProperty("correspondenceRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                correspondenceRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                correspondenceRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("documentRSN"))
        {
            Object obj = soapObject.getProperty("documentRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                documentRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                documentRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("documentRSNSpecified"))
        {
            Object obj = soapObject.getProperty("documentRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                documentRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                documentRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("emailRSN"))
        {
            Object obj = soapObject.getProperty("emailRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                emailRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("emailRSNSpecified"))
        {
            Object obj = soapObject.getProperty("emailRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                emailRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("inOutflag"))
        {
            Object obj = soapObject.getProperty("inOutflag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inOutflag = j.toString();
            }else if (obj!= null && obj instanceof String){
                inOutflag = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return attachmentRSN;
            case 1:
                return attachmentRSNSpecified;
            case 2:
                return correspondenceDesc;
            case 3:
                return correspondenceRSN;
            case 4:
                return correspondenceRSNSpecified;
            case 5:
                return documentRSN;
            case 6:
                return documentRSNSpecified;
            case 7:
                return emailRSN;
            case 8:
                return emailRSNSpecified;
            case 9:
                return folderRSN;
            case 10:
                return folderRSNSpecified;
            case 11:
                return inOutflag;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "attachmentRSN";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "attachmentRSNSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "correspondenceDesc";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "correspondenceRSN";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "correspondenceRSNSpecified";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "documentRSN";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "documentRSNSpecified";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "emailRSN";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "emailRSNSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "inOutflag";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
