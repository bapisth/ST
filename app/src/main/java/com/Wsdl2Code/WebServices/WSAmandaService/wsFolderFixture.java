package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderFixture implements KvmSerializable_ws {
    
    public int displayOrder;
    public boolean displayOrderSpecified;
    public String fixtureClassField;
    public int fixtureCode;
    public boolean fixtureCodeSpecified;
    public String fixtureDesc;
    public int fixtureSize;
    public boolean fixtureSizeSpecified;
    public String fixtureUnit;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public int quantity;
    public boolean quantitySpecified;
    public String remark;
    public int securityCode;
    public boolean securityCodeSpecified;
    
    public wsFolderFixture(){}
    
    public wsFolderFixture(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fixtureClass"))
        {
            Object obj = soapObject.getProperty("fixtureClass");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureClassField = j.toString();
            }else if (obj!= null && obj instanceof String){
                fixtureClassField = (String) obj;
            }
        }
        if (soapObject.hasProperty("fixtureCode"))
        {
            Object obj = soapObject.getProperty("fixtureCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fixtureCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("fixtureCodeSpecified"))
        {
            Object obj = soapObject.getProperty("fixtureCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fixtureCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fixtureDesc"))
        {
            Object obj = soapObject.getProperty("fixtureDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                fixtureDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("fixtureSize"))
        {
            Object obj = soapObject.getProperty("fixtureSize");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureSize = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fixtureSize = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("fixtureSizeSpecified"))
        {
            Object obj = soapObject.getProperty("fixtureSizeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureSizeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fixtureSizeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fixtureUnit"))
        {
            Object obj = soapObject.getProperty("fixtureUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fixtureUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                fixtureUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("quantity"))
        {
            Object obj = soapObject.getProperty("quantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                quantity = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                quantity = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("quantitySpecified"))
        {
            Object obj = soapObject.getProperty("quantitySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                quantitySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                quantitySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("remark"))
        {
            Object obj = soapObject.getProperty("remark");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                remark = j.toString();
            }else if (obj!= null && obj instanceof String){
                remark = (String) obj;
            }
        }
        if (soapObject.hasProperty("securityCode"))
        {
            Object obj = soapObject.getProperty("securityCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                securityCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("securityCodeSpecified"))
        {
            Object obj = soapObject.getProperty("securityCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                securityCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                securityCodeSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return displayOrder;
            case 1:
                return displayOrderSpecified;
            case 2:
                return fixtureClassField;
            case 3:
                return fixtureCode;
            case 4:
                return fixtureCodeSpecified;
            case 5:
                return fixtureDesc;
            case 6:
                return fixtureSize;
            case 7:
                return fixtureSizeSpecified;
            case 8:
                return fixtureUnit;
            case 9:
                return folderRSN;
            case 10:
                return folderRSNSpecified;
            case 11:
                return quantity;
            case 12:
                return quantitySpecified;
            case 13:
                return remark;
            case 14:
                return securityCode;
            case 15:
                return securityCodeSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fixtureClass";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "fixtureCode";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fixtureCodeSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fixtureDesc";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "fixtureSize";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fixtureSizeSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fixtureUnit";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "quantity";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "quantitySpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "remark";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "securityCode";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "securityCodeSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
