package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderInspectionRequest implements KvmSerializable_ws {
    
    public String callReceivedDate;
    public boolean callReceivedDateSpecified;
    public String comments;
    public String contactEmail;
    public String contactName;
    public String contactPhone;
    public boolean emailFlag;
    public boolean emailFlagSpecified;
    public String inspector;
    public int peopleRSN;
    public boolean peopleRSNSpecified;
    public int processRSN;
    public boolean processRSNSpecified;
    public String requestedForDate;
    public boolean requestedForDateSpecified;
    public String scheduledDate;
    public boolean scheduledDateSpecified;
    public String scheduledEndTime;
    public boolean smsFlag;
    public boolean smsFlagSpecified;
    public String sourceApp;
    public String timeIndicator;
    
    public wsFolderInspectionRequest(){}
    
    public wsFolderInspectionRequest(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("callReceivedDate"))
        {
            Object obj = soapObject.getProperty("callReceivedDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                callReceivedDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                callReceivedDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("callReceivedDateSpecified"))
        {
            Object obj = soapObject.getProperty("callReceivedDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                callReceivedDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                callReceivedDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("contactEmail"))
        {
            Object obj = soapObject.getProperty("contactEmail");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                contactEmail = j.toString();
            }else if (obj!= null && obj instanceof String){
                contactEmail = (String) obj;
            }
        }
        if (soapObject.hasProperty("contactName"))
        {
            Object obj = soapObject.getProperty("contactName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                contactName = j.toString();
            }else if (obj!= null && obj instanceof String){
                contactName = (String) obj;
            }
        }
        if (soapObject.hasProperty("contactPhone"))
        {
            Object obj = soapObject.getProperty("contactPhone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                contactPhone = j.toString();
            }else if (obj!= null && obj instanceof String){
                contactPhone = (String) obj;
            }
        }
        if (soapObject.hasProperty("emailFlag"))
        {
            Object obj = soapObject.getProperty("emailFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                emailFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("emailFlagSpecified"))
        {
            Object obj = soapObject.getProperty("emailFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                emailFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("inspector"))
        {
            Object obj = soapObject.getProperty("inspector");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspector = j.toString();
            }else if (obj!= null && obj instanceof String){
                inspector = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSN"))
        {
            Object obj = soapObject.getProperty("peopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("peopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processRSN"))
        {
            Object obj = soapObject.getProperty("processRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processRSNSpecified"))
        {
            Object obj = soapObject.getProperty("processRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("requestedForDate"))
        {
            Object obj = soapObject.getProperty("requestedForDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                requestedForDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                requestedForDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("requestedForDateSpecified"))
        {
            Object obj = soapObject.getProperty("requestedForDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                requestedForDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                requestedForDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("scheduledDate"))
        {
            Object obj = soapObject.getProperty("scheduledDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduledDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                scheduledDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("scheduledDateSpecified"))
        {
            Object obj = soapObject.getProperty("scheduledDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduledDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                scheduledDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("scheduledEndTime"))
        {
            Object obj = soapObject.getProperty("scheduledEndTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduledEndTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                scheduledEndTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("smsFlag"))
        {
            Object obj = soapObject.getProperty("smsFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                smsFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                smsFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("smsFlagSpecified"))
        {
            Object obj = soapObject.getProperty("smsFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                smsFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                smsFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("sourceApp"))
        {
            Object obj = soapObject.getProperty("sourceApp");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sourceApp = j.toString();
            }else if (obj!= null && obj instanceof String){
                sourceApp = (String) obj;
            }
        }
        if (soapObject.hasProperty("timeIndicator"))
        {
            Object obj = soapObject.getProperty("timeIndicator");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                timeIndicator = j.toString();
            }else if (obj!= null && obj instanceof String){
                timeIndicator = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return callReceivedDate;
            case 1:
                return callReceivedDateSpecified;
            case 2:
                return comments;
            case 3:
                return contactEmail;
            case 4:
                return contactName;
            case 5:
                return contactPhone;
            case 6:
                return emailFlag;
            case 7:
                return emailFlagSpecified;
            case 8:
                return inspector;
            case 9:
                return peopleRSN;
            case 10:
                return peopleRSNSpecified;
            case 11:
                return processRSN;
            case 12:
                return processRSNSpecified;
            case 13:
                return requestedForDate;
            case 14:
                return requestedForDateSpecified;
            case 15:
                return scheduledDate;
            case 16:
                return scheduledDateSpecified;
            case 17:
                return scheduledEndTime;
            case 18:
                return smsFlag;
            case 19:
                return smsFlagSpecified;
            case 20:
                return sourceApp;
            case 21:
                return timeIndicator;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 22;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "callReceivedDate";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "callReceivedDateSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "contactEmail";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "contactName";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "contactPhone";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "emailFlag";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "emailFlagSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "inspector";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleRSN";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleRSNSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processRSN";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processRSNSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "requestedForDate";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "requestedForDateSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "scheduledDate";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "scheduledDateSpecified";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "scheduledEndTime";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "smsFlag";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "smsFlagSpecified";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sourceApp";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "timeIndicator";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
