package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderProcess implements KvmSerializable_ws {
    
    public int adminMinutes;
    public boolean adminMinutesSpecified;
    public String assignFlag;
    public String assignedUser;
    public String baseLineEndDate;
    public boolean baseLineEndDateSpecified;
    public String baselineStartDate;
    public boolean baselineStartDateSpecified;
    public String calendarID;
    public boolean conditionalOccupancy;
    public boolean conditionalOccupancySpecified;
    public boolean currentProcessFlag;
    public boolean currentProcessFlagSpecified;
    public int disciplineCode;
    public boolean disciplineCodeSpecified;
    public String disciplineDesc;
    public int displayOrder;
    public boolean displayOrderSpecified;
    public String endDate;
    public boolean endDateSpecified;
    public int fileLocationCode;
    public boolean fileLocationCodeSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public int inspMinutes;
    public boolean inspMinutesSpecified;
    public long inspectionNumber;
    public boolean inspectionNumberSpecified;
    public boolean mandatoryFlag;
    public boolean mandatoryFlagSpecified;
    public boolean orderComplied;
    public boolean orderCompliedSpecified;
    public boolean orderIssued;
    public boolean orderIssuedSpecified;
    public boolean passedFlag;
    public boolean passedFlagSpecified;
    public boolean printFlag;
    public boolean printFlagSpecified;
    public int priority;
    public boolean prioritySpecified;
    public int processCode;
    public boolean processCodeSpecified;
    public String processComment;
    public String processDesc;
    public int processGroupCode;
    public boolean processGroupCodeSpecified;
    public String processGroupDesc;
    public int processRSN;
    public boolean processRSNSpecified;
    public String reference;
    public String reviewerUser;
    public String scheduleDate;
    public boolean scheduleDateSpecified;
    public String scheduleEndDate;
    public boolean scheduleEndDateSpecified;
    public boolean signOff;
    public boolean signOffSpecified;
    public String signoffUser;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public String startDate;
    public boolean startDateSpecified;
    public int statusCode;
    public boolean statusCodeSpecified;
    public String statusDesc;
    public String timeIndicator;
    public boolean workOrderFlag;
    public boolean workOrderFlagSpecified;
    
    public wsFolderProcess(){}
    
    public wsFolderProcess(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("adminMinutes"))
        {
            Object obj = soapObject.getProperty("adminMinutes");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                adminMinutes = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                adminMinutes = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("adminMinutesSpecified"))
        {
            Object obj = soapObject.getProperty("adminMinutesSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                adminMinutesSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                adminMinutesSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("assignFlag"))
        {
            Object obj = soapObject.getProperty("assignFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                assignFlag = j.toString();
            }else if (obj!= null && obj instanceof String){
                assignFlag = (String) obj;
            }
        }
        if (soapObject.hasProperty("assignedUser"))
        {
            Object obj = soapObject.getProperty("assignedUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                assignedUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                assignedUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("baseLineEndDate"))
        {
            Object obj = soapObject.getProperty("baseLineEndDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                baseLineEndDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                baseLineEndDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("baseLineEndDateSpecified"))
        {
            Object obj = soapObject.getProperty("baseLineEndDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                baseLineEndDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                baseLineEndDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("baselineStartDate"))
        {
            Object obj = soapObject.getProperty("baselineStartDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                baselineStartDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                baselineStartDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("baselineStartDateSpecified"))
        {
            Object obj = soapObject.getProperty("baselineStartDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                baselineStartDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                baselineStartDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("calendarID"))
        {
            Object obj = soapObject.getProperty("calendarID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                calendarID = j.toString();
            }else if (obj!= null && obj instanceof String){
                calendarID = (String) obj;
            }
        }
        if (soapObject.hasProperty("conditionalOccupancy"))
        {
            Object obj = soapObject.getProperty("conditionalOccupancy");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conditionalOccupancy = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conditionalOccupancy = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("conditionalOccupancySpecified"))
        {
            Object obj = soapObject.getProperty("conditionalOccupancySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conditionalOccupancySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conditionalOccupancySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("currentProcessFlag"))
        {
            Object obj = soapObject.getProperty("currentProcessFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentProcessFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                currentProcessFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("currentProcessFlagSpecified"))
        {
            Object obj = soapObject.getProperty("currentProcessFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                currentProcessFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                currentProcessFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("disciplineCode"))
        {
            Object obj = soapObject.getProperty("disciplineCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                disciplineCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                disciplineCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("disciplineCodeSpecified"))
        {
            Object obj = soapObject.getProperty("disciplineCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                disciplineCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                disciplineCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("disciplineDesc"))
        {
            Object obj = soapObject.getProperty("disciplineDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                disciplineDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                disciplineDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("endDate"))
        {
            Object obj = soapObject.getProperty("endDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                endDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                endDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("endDateSpecified"))
        {
            Object obj = soapObject.getProperty("endDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                endDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                endDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("fileLocationCode"))
        {
            Object obj = soapObject.getProperty("fileLocationCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fileLocationCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fileLocationCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("fileLocationCodeSpecified"))
        {
            Object obj = soapObject.getProperty("fileLocationCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fileLocationCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fileLocationCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("inspMinutes"))
        {
            Object obj = soapObject.getProperty("inspMinutes");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspMinutes = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                inspMinutes = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("inspMinutesSpecified"))
        {
            Object obj = soapObject.getProperty("inspMinutesSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspMinutesSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                inspMinutesSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("inspectionNumber"))
        {
            Object obj = soapObject.getProperty("inspectionNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspectionNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                inspectionNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("inspectionNumberSpecified"))
        {
            Object obj = soapObject.getProperty("inspectionNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspectionNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                inspectionNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatoryFlag"))
        {
            Object obj = soapObject.getProperty("mandatoryFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatoryFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatoryFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatoryFlagSpecified"))
        {
            Object obj = soapObject.getProperty("mandatoryFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatoryFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatoryFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderComplied"))
        {
            Object obj = soapObject.getProperty("orderComplied");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderComplied = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderComplied = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderCompliedSpecified"))
        {
            Object obj = soapObject.getProperty("orderCompliedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderCompliedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderCompliedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderIssued"))
        {
            Object obj = soapObject.getProperty("orderIssued");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderIssued = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderIssued = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderIssuedSpecified"))
        {
            Object obj = soapObject.getProperty("orderIssuedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderIssuedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderIssuedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("passedFlag"))
        {
            Object obj = soapObject.getProperty("passedFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                passedFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                passedFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("passedFlagSpecified"))
        {
            Object obj = soapObject.getProperty("passedFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                passedFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                passedFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("printFlag"))
        {
            Object obj = soapObject.getProperty("printFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                printFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                printFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("printFlagSpecified"))
        {
            Object obj = soapObject.getProperty("printFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                printFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                printFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("priority"))
        {
            Object obj = soapObject.getProperty("priority");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                priority = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                priority = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("prioritySpecified"))
        {
            Object obj = soapObject.getProperty("prioritySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                prioritySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                prioritySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processCode"))
        {
            Object obj = soapObject.getProperty("processCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processCodeSpecified"))
        {
            Object obj = soapObject.getProperty("processCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processComment"))
        {
            Object obj = soapObject.getProperty("processComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                processComment = (String) obj;
            }
        }
        if (soapObject.hasProperty("processDesc"))
        {
            Object obj = soapObject.getProperty("processDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                processDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("processGroupCode"))
        {
            Object obj = soapObject.getProperty("processGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processGroupCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processGroupCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processGroupCodeSpecified"))
        {
            Object obj = soapObject.getProperty("processGroupCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processGroupCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processGroupCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processGroupDesc"))
        {
            Object obj = soapObject.getProperty("processGroupDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processGroupDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                processGroupDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("processRSN"))
        {
            Object obj = soapObject.getProperty("processRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processRSNSpecified"))
        {
            Object obj = soapObject.getProperty("processRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("reference"))
        {
            Object obj = soapObject.getProperty("reference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reference = j.toString();
            }else if (obj!= null && obj instanceof String){
                reference = (String) obj;
            }
        }
        if (soapObject.hasProperty("reviewerUser"))
        {
            Object obj = soapObject.getProperty("reviewerUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reviewerUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                reviewerUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("scheduleDate"))
        {
            Object obj = soapObject.getProperty("scheduleDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduleDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                scheduleDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("scheduleDateSpecified"))
        {
            Object obj = soapObject.getProperty("scheduleDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduleDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                scheduleDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("scheduleEndDate"))
        {
            Object obj = soapObject.getProperty("scheduleEndDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduleEndDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                scheduleEndDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("scheduleEndDateSpecified"))
        {
            Object obj = soapObject.getProperty("scheduleEndDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                scheduleEndDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                scheduleEndDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("signOff"))
        {
            Object obj = soapObject.getProperty("signOff");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                signOff = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                signOff = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("signOffSpecified"))
        {
            Object obj = soapObject.getProperty("signOffSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                signOffSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                signOffSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("signoffUser"))
        {
            Object obj = soapObject.getProperty("signoffUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                signoffUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                signoffUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("startDate"))
        {
            Object obj = soapObject.getProperty("startDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                startDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("startDateSpecified"))
        {
            Object obj = soapObject.getProperty("startDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusCode"))
        {
            Object obj = soapObject.getProperty("statusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("statusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusDesc"))
        {
            Object obj = soapObject.getProperty("statusDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                statusDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("timeIndicator"))
        {
            Object obj = soapObject.getProperty("timeIndicator");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                timeIndicator = j.toString();
            }else if (obj!= null && obj instanceof String){
                timeIndicator = (String) obj;
            }
        }
        if (soapObject.hasProperty("workOrderFlag"))
        {
            Object obj = soapObject.getProperty("workOrderFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                workOrderFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                workOrderFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("workOrderFlagSpecified"))
        {
            Object obj = soapObject.getProperty("workOrderFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                workOrderFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                workOrderFlagSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return adminMinutes;
            case 1:
                return adminMinutesSpecified;
            case 2:
                return assignFlag;
            case 3:
                return assignedUser;
            case 4:
                return baseLineEndDate;
            case 5:
                return baseLineEndDateSpecified;
            case 6:
                return baselineStartDate;
            case 7:
                return baselineStartDateSpecified;
            case 8:
                return calendarID;
            case 9:
                return conditionalOccupancy;
            case 10:
                return conditionalOccupancySpecified;
            case 11:
                return currentProcessFlag;
            case 12:
                return currentProcessFlagSpecified;
            case 13:
                return disciplineCode;
            case 14:
                return disciplineCodeSpecified;
            case 15:
                return disciplineDesc;
            case 16:
                return displayOrder;
            case 17:
                return displayOrderSpecified;
            case 18:
                return endDate;
            case 19:
                return endDateSpecified;
            case 20:
                return fileLocationCode;
            case 21:
                return fileLocationCodeSpecified;
            case 22:
                return folderRSN;
            case 23:
                return folderRSNSpecified;
            case 24:
                return inspMinutes;
            case 25:
                return inspMinutesSpecified;
            case 26:
                return inspectionNumber;
            case 27:
                return inspectionNumberSpecified;
            case 28:
                return mandatoryFlag;
            case 29:
                return mandatoryFlagSpecified;
            case 30:
                return orderComplied;
            case 31:
                return orderCompliedSpecified;
            case 32:
                return orderIssued;
            case 33:
                return orderIssuedSpecified;
            case 34:
                return passedFlag;
            case 35:
                return passedFlagSpecified;
            case 36:
                return printFlag;
            case 37:
                return printFlagSpecified;
            case 38:
                return priority;
            case 39:
                return prioritySpecified;
            case 40:
                return processCode;
            case 41:
                return processCodeSpecified;
            case 42:
                return processComment;
            case 43:
                return processDesc;
            case 44:
                return processGroupCode;
            case 45:
                return processGroupCodeSpecified;
            case 46:
                return processGroupDesc;
            case 47:
                return processRSN;
            case 48:
                return processRSNSpecified;
            case 49:
                return reference;
            case 50:
                return reviewerUser;
            case 51:
                return scheduleDate;
            case 52:
                return scheduleDateSpecified;
            case 53:
                return scheduleEndDate;
            case 54:
                return scheduleEndDateSpecified;
            case 55:
                return signOff;
            case 56:
                return signOffSpecified;
            case 57:
                return signoffUser;
            case 58:
                return stampDate;
            case 59:
                return stampDateSpecified;
            case 60:
                return stampUser;
            case 61:
                return startDate;
            case 62:
                return startDateSpecified;
            case 63:
                return statusCode;
            case 64:
                return statusCodeSpecified;
            case 65:
                return statusDesc;
            case 66:
                return timeIndicator;
            case 67:
                return workOrderFlag;
            case 68:
                return workOrderFlagSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 69;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "adminMinutes";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "adminMinutesSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "assignFlag";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "assignedUser";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "baseLineEndDate";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "baseLineEndDateSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "baselineStartDate";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "baselineStartDateSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "calendarID";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conditionalOccupancy";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conditionalOccupancySpecified";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "currentProcessFlag";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "currentProcessFlagSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "disciplineCode";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "disciplineCodeSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "disciplineDesc";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "endDate";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "endDateSpecified";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "fileLocationCode";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fileLocationCodeSpecified";
                break;
            case 22:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "inspMinutes";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "inspMinutesSpecified";
                break;
            case 26:
                info.type = Long.class;
                info.name = "inspectionNumber";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "inspectionNumberSpecified";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatoryFlag";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatoryFlagSpecified";
                break;
            case 30:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderComplied";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderCompliedSpecified";
                break;
            case 32:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderIssued";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderIssuedSpecified";
                break;
            case 34:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "passedFlag";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "passedFlagSpecified";
                break;
            case 36:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "printFlag";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "printFlagSpecified";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "priority";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "prioritySpecified";
                break;
            case 40:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processCode";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processCodeSpecified";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "processComment";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "processDesc";
                break;
            case 44:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processGroupCode";
                break;
            case 45:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processGroupCodeSpecified";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "processGroupDesc";
                break;
            case 47:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processRSN";
                break;
            case 48:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processRSNSpecified";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reference";
                break;
            case 50:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "reviewerUser";
                break;
            case 51:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "scheduleDate";
                break;
            case 52:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "scheduleDateSpecified";
                break;
            case 53:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "scheduleEndDate";
                break;
            case 54:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "scheduleEndDateSpecified";
                break;
            case 55:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "signOff";
                break;
            case 56:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "signOffSpecified";
                break;
            case 57:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "signoffUser";
                break;
            case 58:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 59:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 60:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 61:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "startDate";
                break;
            case 62:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "startDateSpecified";
                break;
            case 63:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statusCode";
                break;
            case 64:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statusCodeSpecified";
                break;
            case 65:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statusDesc";
                break;
            case 66:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "timeIndicator";
                break;
            case 67:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "workOrderFlag";
                break;
            case 68:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "workOrderFlagSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
