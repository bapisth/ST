package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderProcessChecklist implements KvmSerializable_ws {
    
    public int checkListCode;
    public boolean checkListCodeSpecified;
    public String checkListComment;
    public String checkListDesc;
    public int checkListDisplayOrder;
    public boolean checkListDisplayOrderSpecified;
    public String endDate;
    public boolean endDateSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public boolean mandatory;
    public boolean mandatorySpecified;
    public boolean notApplicableFlag;
    public boolean notApplicableFlagSpecified;
    public boolean passed;
    public boolean passedSpecified;
    public int processCode;
    public boolean processCodeSpecified;
    public String processDesc;
    public int processRSN;
    public boolean processRSNSpecified;
    public String startDate;
    public boolean startDateSpecified;
    
    public wsFolderProcessChecklist(){}
    
    public wsFolderProcessChecklist(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("checkListCode"))
        {
            Object obj = soapObject.getProperty("checkListCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                checkListCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("checkListCodeSpecified"))
        {
            Object obj = soapObject.getProperty("checkListCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                checkListCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("checkListComment"))
        {
            Object obj = soapObject.getProperty("checkListComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                checkListComment = (String) obj;
            }
        }
        if (soapObject.hasProperty("checkListDesc"))
        {
            Object obj = soapObject.getProperty("checkListDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                checkListDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("checkListDisplayOrder"))
        {
            Object obj = soapObject.getProperty("checkListDisplayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListDisplayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                checkListDisplayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("checkListDisplayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("checkListDisplayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                checkListDisplayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                checkListDisplayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("endDate"))
        {
            Object obj = soapObject.getProperty("endDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                endDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                endDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("endDateSpecified"))
        {
            Object obj = soapObject.getProperty("endDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                endDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                endDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatory"))
        {
            Object obj = soapObject.getProperty("mandatory");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatory = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatory = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatorySpecified"))
        {
            Object obj = soapObject.getProperty("mandatorySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatorySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatorySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("notApplicableFlag"))
        {
            Object obj = soapObject.getProperty("notApplicableFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notApplicableFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                notApplicableFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("notApplicableFlagSpecified"))
        {
            Object obj = soapObject.getProperty("notApplicableFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notApplicableFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                notApplicableFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("passed"))
        {
            Object obj = soapObject.getProperty("passed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                passed = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                passed = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("passedSpecified"))
        {
            Object obj = soapObject.getProperty("passedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                passedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                passedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processCode"))
        {
            Object obj = soapObject.getProperty("processCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processCodeSpecified"))
        {
            Object obj = soapObject.getProperty("processCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processDesc"))
        {
            Object obj = soapObject.getProperty("processDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                processDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("processRSN"))
        {
            Object obj = soapObject.getProperty("processRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processRSNSpecified"))
        {
            Object obj = soapObject.getProperty("processRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("startDate"))
        {
            Object obj = soapObject.getProperty("startDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                startDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("startDateSpecified"))
        {
            Object obj = soapObject.getProperty("startDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startDateSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return checkListCode;
            case 1:
                return checkListCodeSpecified;
            case 2:
                return checkListComment;
            case 3:
                return checkListDesc;
            case 4:
                return checkListDisplayOrder;
            case 5:
                return checkListDisplayOrderSpecified;
            case 6:
                return endDate;
            case 7:
                return endDateSpecified;
            case 8:
                return folderRSN;
            case 9:
                return folderRSNSpecified;
            case 10:
                return mandatory;
            case 11:
                return mandatorySpecified;
            case 12:
                return notApplicableFlag;
            case 13:
                return notApplicableFlagSpecified;
            case 14:
                return passed;
            case 15:
                return passedSpecified;
            case 16:
                return processCode;
            case 17:
                return processCodeSpecified;
            case 18:
                return processDesc;
            case 19:
                return processRSN;
            case 20:
                return processRSNSpecified;
            case 21:
                return startDate;
            case 22:
                return startDateSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 23;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "checkListCode";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "checkListCodeSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "checkListComment";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "checkListDesc";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "checkListDisplayOrder";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "checkListDisplayOrderSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "endDate";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "endDateSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatory";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatorySpecified";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "notApplicableFlag";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "notApplicableFlagSpecified";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "passed";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "passedSpecified";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processCode";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processCodeSpecified";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "processDesc";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processRSN";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processRSNSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "startDate";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "startDateSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
