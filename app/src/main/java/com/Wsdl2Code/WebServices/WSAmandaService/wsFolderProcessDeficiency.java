package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderProcessDeficiency implements KvmSerializable_ws {
    
    public int actionCode;
    public boolean actionCodeSpecified;
    public String actionDesc;
    public String assignedUser;
    public String complyByDate;
    public boolean complyByDateSpecified;
    public String dateComplied;
    public boolean dateCompliedSpecified;
    public int deficiencyCode;
    public boolean deficiencyCodeSpecified;
    public String deficiencyDesc;
    public int deficiencyID;
    public boolean deficiencyIDSpecified;
    public String deficiencyText;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String insertDate;
    public boolean insertDateSpecified;
    public String locationDesc;
    public int occuranceCount;
    public boolean occuranceCountSpecified;
    public int processCode;
    public boolean processCodeSpecified;
    public String processDesc;
    public int processRSN;
    public boolean processRSNSpecified;
    public String referenceNum;
    public String remedyText;
    public int severityCode;
    public boolean severityCodeSpecified;
    public String severityDesc;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public int statusCode;
    public boolean statusCodeSpecified;
    public String statusDesc;
    public String subLocationDesc;
    
    public wsFolderProcessDeficiency(){}
    
    public wsFolderProcessDeficiency(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("actionCode"))
        {
            Object obj = soapObject.getProperty("actionCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                actionCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                actionCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("actionCodeSpecified"))
        {
            Object obj = soapObject.getProperty("actionCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                actionCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                actionCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("actionDesc"))
        {
            Object obj = soapObject.getProperty("actionDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                actionDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                actionDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("assignedUser"))
        {
            Object obj = soapObject.getProperty("assignedUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                assignedUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                assignedUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("complyByDate"))
        {
            Object obj = soapObject.getProperty("complyByDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complyByDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                complyByDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("complyByDateSpecified"))
        {
            Object obj = soapObject.getProperty("complyByDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                complyByDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                complyByDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateComplied"))
        {
            Object obj = soapObject.getProperty("dateComplied");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateComplied = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateComplied = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCompliedSpecified"))
        {
            Object obj = soapObject.getProperty("dateCompliedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCompliedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateCompliedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyCode"))
        {
            Object obj = soapObject.getProperty("deficiencyCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                deficiencyCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyCodeSpecified"))
        {
            Object obj = soapObject.getProperty("deficiencyCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                deficiencyCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyDesc"))
        {
            Object obj = soapObject.getProperty("deficiencyDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                deficiencyDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyID"))
        {
            Object obj = soapObject.getProperty("deficiencyID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                deficiencyID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyIDSpecified"))
        {
            Object obj = soapObject.getProperty("deficiencyIDSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyIDSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                deficiencyIDSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("deficiencyText"))
        {
            Object obj = soapObject.getProperty("deficiencyText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                deficiencyText = j.toString();
            }else if (obj!= null && obj instanceof String){
                deficiencyText = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("insertDate"))
        {
            Object obj = soapObject.getProperty("insertDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                insertDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                insertDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("insertDateSpecified"))
        {
            Object obj = soapObject.getProperty("insertDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                insertDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                insertDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("locationDesc"))
        {
            Object obj = soapObject.getProperty("locationDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                locationDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                locationDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("occuranceCount"))
        {
            Object obj = soapObject.getProperty("occuranceCount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                occuranceCount = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                occuranceCount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("occuranceCountSpecified"))
        {
            Object obj = soapObject.getProperty("occuranceCountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                occuranceCountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                occuranceCountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processCode"))
        {
            Object obj = soapObject.getProperty("processCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processCodeSpecified"))
        {
            Object obj = soapObject.getProperty("processCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("processDesc"))
        {
            Object obj = soapObject.getProperty("processDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                processDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("processRSN"))
        {
            Object obj = soapObject.getProperty("processRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                processRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("processRSNSpecified"))
        {
            Object obj = soapObject.getProperty("processRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                processRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                processRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("referenceNum"))
        {
            Object obj = soapObject.getProperty("referenceNum");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceNum = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceNum = (String) obj;
            }
        }
        if (soapObject.hasProperty("remedyText"))
        {
            Object obj = soapObject.getProperty("remedyText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                remedyText = j.toString();
            }else if (obj!= null && obj instanceof String){
                remedyText = (String) obj;
            }
        }
        if (soapObject.hasProperty("severityCode"))
        {
            Object obj = soapObject.getProperty("severityCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                severityCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                severityCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("severityCodeSpecified"))
        {
            Object obj = soapObject.getProperty("severityCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                severityCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                severityCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("severityDesc"))
        {
            Object obj = soapObject.getProperty("severityDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                severityDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                severityDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("statusCode"))
        {
            Object obj = soapObject.getProperty("statusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("statusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusDesc"))
        {
            Object obj = soapObject.getProperty("statusDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                statusDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("subLocationDesc"))
        {
            Object obj = soapObject.getProperty("subLocationDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                subLocationDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                subLocationDesc = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return actionCode;
            case 1:
                return actionCodeSpecified;
            case 2:
                return actionDesc;
            case 3:
                return assignedUser;
            case 4:
                return complyByDate;
            case 5:
                return complyByDateSpecified;
            case 6:
                return dateComplied;
            case 7:
                return dateCompliedSpecified;
            case 8:
                return deficiencyCode;
            case 9:
                return deficiencyCodeSpecified;
            case 10:
                return deficiencyDesc;
            case 11:
                return deficiencyID;
            case 12:
                return deficiencyIDSpecified;
            case 13:
                return deficiencyText;
            case 14:
                return folderRSN;
            case 15:
                return folderRSNSpecified;
            case 16:
                return insertDate;
            case 17:
                return insertDateSpecified;
            case 18:
                return locationDesc;
            case 19:
                return occuranceCount;
            case 20:
                return occuranceCountSpecified;
            case 21:
                return processCode;
            case 22:
                return processCodeSpecified;
            case 23:
                return processDesc;
            case 24:
                return processRSN;
            case 25:
                return processRSNSpecified;
            case 26:
                return referenceNum;
            case 27:
                return remedyText;
            case 28:
                return severityCode;
            case 29:
                return severityCodeSpecified;
            case 30:
                return severityDesc;
            case 31:
                return stampDate;
            case 32:
                return stampDateSpecified;
            case 33:
                return stampUser;
            case 34:
                return statusCode;
            case 35:
                return statusCodeSpecified;
            case 36:
                return statusDesc;
            case 37:
                return subLocationDesc;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 38;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "actionCode";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "actionCodeSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "actionDesc";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "assignedUser";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "complyByDate";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "complyByDateSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateComplied";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateCompliedSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "deficiencyCode";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "deficiencyCodeSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deficiencyDesc";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "deficiencyID";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "deficiencyIDSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deficiencyText";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "insertDate";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "insertDateSpecified";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "locationDesc";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "occuranceCount";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "occuranceCountSpecified";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processCode";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processCodeSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "processDesc";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "processRSN";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "processRSNSpecified";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceNum";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "remedyText";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "severityCode";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "severityCodeSpecified";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "severityDesc";
                break;
            case 31:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 32:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 34:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statusCode";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statusCodeSpecified";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statusDesc";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "subLocationDesc";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
