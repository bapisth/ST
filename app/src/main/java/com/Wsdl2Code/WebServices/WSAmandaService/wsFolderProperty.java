package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsFolderProperty implements KvmSerializable_ws {
    
    public String comments;
    public String folderPropertyUnit;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public int propertyRSN;
    public boolean propertyRSNSpecified;
    public int propertyRelationCode;
    public boolean propertyRelationCodeSpecified;
    public String propertyRelationDesc;
    
    public wsFolderProperty(){}
    
    public wsFolderProperty(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderPropertyUnit"))
        {
            Object obj = soapObject.getProperty("folderPropertyUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderPropertyUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderPropertyUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSN"))
        {
            Object obj = soapObject.getProperty("propertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("propertyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyRelationCode"))
        {
            Object obj = soapObject.getProperty("propertyRelationCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRelationCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyRelationCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propertyRelationCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propertyRelationCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRelationCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyRelationCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyRelationDesc"))
        {
            Object obj = soapObject.getProperty("propertyRelationDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRelationDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyRelationDesc = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comments;
            case 1:
                return folderPropertyUnit;
            case 2:
                return folderRSN;
            case 3:
                return folderRSNSpecified;
            case 4:
                return propertyRSN;
            case 5:
                return propertyRSNSpecified;
            case 6:
                return propertyRelationCode;
            case 7:
                return propertyRelationCodeSpecified;
            case 8:
                return propertyRelationDesc;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 9;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderPropertyUnit";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyRSN";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyRSNSpecified";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyRelationCode";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyRelationCodeSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyRelationDesc";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
