package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsBillInfo;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsPaymentInfo implements KvmSerializable_ws {
    
    public String addressLine1;
    public String addressLine2;
    public String addressLine3;
    public double amountApplied;
    public boolean amountAppliedSpecified;
    public double amountRefunded;
    public boolean amountRefundedSpecified;
    public VectorwsBillInfo billInfos;
    public String dateReceiptPrinted;
    public boolean dateReceiptPrintedSpecified;
    public String folderAddress;
    public String folderExpiryDate;
    public boolean folderExpiryDateSpecified;
    public int folderRSN;
    public boolean folderRSNSpecified;
    public String folderSequence;
    public String folderType;
    public String folderYear;
    public double paymentAmount;
    public boolean paymentAmountSpecified;
    public String paymentComment;
    public String paymentDate;
    public boolean paymentDateSpecified;
    public int paymentNumber;
    public boolean paymentNumberSpecified;
    public String peopleAddrCity;
    public String peopleAddrHouse;
    public String peopleAddrPostal;
    public String peopleAddrPrefix;
    public String peopleAddrProvince;
    public String peopleAddrStreet;
    public String peopleAddrStreetDirection;
    public String peopleAddrStreetType;
    public String peopleAddrUnit;
    public String peopleAddrUnitType;
    public String peopleNameFirst;
    public String peopleNameLast;
    public String peopleOrganizationName;
    public String phone1;
    public long receiptNumber;
    public boolean receiptNumberSpecified;
    public String validAccountPaymentTypeDesc;
    public String validFolderDesc;
    
    public wsPaymentInfo(){}
    
    public wsPaymentInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("addressLine1"))
        {
            Object obj = soapObject.getProperty("addressLine1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine2"))
        {
            Object obj = soapObject.getProperty("addressLine2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine3"))
        {
            Object obj = soapObject.getProperty("addressLine3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("amountApplied"))
        {
            Object obj = soapObject.getProperty("amountApplied");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                amountApplied = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                amountApplied = (Double) obj;
            }
        }
        if (soapObject.hasProperty("amountAppliedSpecified"))
        {
            Object obj = soapObject.getProperty("amountAppliedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                amountAppliedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                amountAppliedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("amountRefunded"))
        {
            Object obj = soapObject.getProperty("amountRefunded");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                amountRefunded = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                amountRefunded = (Double) obj;
            }
        }
        if (soapObject.hasProperty("amountRefundedSpecified"))
        {
            Object obj = soapObject.getProperty("amountRefundedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                amountRefundedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                amountRefundedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("billInfos"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("billInfos");
            billInfos = new VectorwsBillInfo(j);
        }
        if (soapObject.hasProperty("dateReceiptPrinted"))
        {
            Object obj = soapObject.getProperty("dateReceiptPrinted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateReceiptPrinted = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateReceiptPrinted = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateReceiptPrintedSpecified"))
        {
            Object obj = soapObject.getProperty("dateReceiptPrintedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateReceiptPrintedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateReceiptPrintedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderAddress"))
        {
            Object obj = soapObject.getProperty("folderAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderAddress = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderAddress = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderExpiryDate"))
        {
            Object obj = soapObject.getProperty("folderExpiryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderExpiryDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderExpiryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderExpiryDateSpecified"))
        {
            Object obj = soapObject.getProperty("folderExpiryDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderExpiryDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderExpiryDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderRSN"))
        {
            Object obj = soapObject.getProperty("folderRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                folderRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNSpecified"))
        {
            Object obj = soapObject.getProperty("folderRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                folderRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("folderSequence"))
        {
            Object obj = soapObject.getProperty("folderSequence");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderSequence = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderSequence = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderType"))
        {
            Object obj = soapObject.getProperty("folderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderType = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderType = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderYear"))
        {
            Object obj = soapObject.getProperty("folderYear");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderYear = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderYear = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentAmount"))
        {
            Object obj = soapObject.getProperty("paymentAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                paymentAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("paymentAmountSpecified"))
        {
            Object obj = soapObject.getProperty("paymentAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                paymentAmountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("paymentComment"))
        {
            Object obj = soapObject.getProperty("paymentComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentComment = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentDate"))
        {
            Object obj = soapObject.getProperty("paymentDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                paymentDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("paymentDateSpecified"))
        {
            Object obj = soapObject.getProperty("paymentDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                paymentDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("paymentNumber"))
        {
            Object obj = soapObject.getProperty("paymentNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                paymentNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("paymentNumberSpecified"))
        {
            Object obj = soapObject.getProperty("paymentNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paymentNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                paymentNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrCity"))
        {
            Object obj = soapObject.getProperty("peopleAddrCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrCity = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrHouse"))
        {
            Object obj = soapObject.getProperty("peopleAddrHouse");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrHouse = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrHouse = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrPostal"))
        {
            Object obj = soapObject.getProperty("peopleAddrPostal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrPostal = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrPostal = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrPrefix"))
        {
            Object obj = soapObject.getProperty("peopleAddrPrefix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrPrefix = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrPrefix = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrProvince"))
        {
            Object obj = soapObject.getProperty("peopleAddrProvince");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrProvince = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrProvince = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrStreet"))
        {
            Object obj = soapObject.getProperty("peopleAddrStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrStreetDirection"))
        {
            Object obj = soapObject.getProperty("peopleAddrStreetDirection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrStreetDirection = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrStreetDirection = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrStreetType"))
        {
            Object obj = soapObject.getProperty("peopleAddrStreetType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrStreetType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrStreetType = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrUnit"))
        {
            Object obj = soapObject.getProperty("peopleAddrUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleAddrUnitType"))
        {
            Object obj = soapObject.getProperty("peopleAddrUnitType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleAddrUnitType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleAddrUnitType = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleNameFirst"))
        {
            Object obj = soapObject.getProperty("peopleNameFirst");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleNameFirst = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleNameFirst = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleNameLast"))
        {
            Object obj = soapObject.getProperty("peopleNameLast");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleNameLast = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleNameLast = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleOrganizationName"))
        {
            Object obj = soapObject.getProperty("peopleOrganizationName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleOrganizationName = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleOrganizationName = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone1"))
        {
            Object obj = soapObject.getProperty("phone1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("receiptNumber"))
        {
            Object obj = soapObject.getProperty("receiptNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                receiptNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                receiptNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("receiptNumberSpecified"))
        {
            Object obj = soapObject.getProperty("receiptNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                receiptNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                receiptNumberSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("validAccountPaymentTypeDesc"))
        {
            Object obj = soapObject.getProperty("validAccountPaymentTypeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                validAccountPaymentTypeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                validAccountPaymentTypeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("validFolderDesc"))
        {
            Object obj = soapObject.getProperty("validFolderDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                validFolderDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                validFolderDesc = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return addressLine1;
            case 1:
                return addressLine2;
            case 2:
                return addressLine3;
            case 3:
                return amountApplied;
            case 4:
                return amountAppliedSpecified;
            case 5:
                return amountRefunded;
            case 6:
                return amountRefundedSpecified;
            case 7:
                return billInfos;
            case 8:
                return dateReceiptPrinted;
            case 9:
                return dateReceiptPrintedSpecified;
            case 10:
                return folderAddress;
            case 11:
                return folderExpiryDate;
            case 12:
                return folderExpiryDateSpecified;
            case 13:
                return folderRSN;
            case 14:
                return folderRSNSpecified;
            case 15:
                return folderSequence;
            case 16:
                return folderType;
            case 17:
                return folderYear;
            case 18:
                return paymentAmount;
            case 19:
                return paymentAmountSpecified;
            case 20:
                return paymentComment;
            case 21:
                return paymentDate;
            case 22:
                return paymentDateSpecified;
            case 23:
                return paymentNumber;
            case 24:
                return paymentNumberSpecified;
            case 25:
                return peopleAddrCity;
            case 26:
                return peopleAddrHouse;
            case 27:
                return peopleAddrPostal;
            case 28:
                return peopleAddrPrefix;
            case 29:
                return peopleAddrProvince;
            case 30:
                return peopleAddrStreet;
            case 31:
                return peopleAddrStreetDirection;
            case 32:
                return peopleAddrStreetType;
            case 33:
                return peopleAddrUnit;
            case 34:
                return peopleAddrUnitType;
            case 35:
                return peopleNameFirst;
            case 36:
                return peopleNameLast;
            case 37:
                return peopleOrganizationName;
            case 38:
                return phone1;
            case 39:
                return receiptNumber;
            case 40:
                return receiptNumberSpecified;
            case 41:
                return validAccountPaymentTypeDesc;
            case 42:
                return validFolderDesc;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 43;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine1";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine2";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine3";
                break;
            case 3:
                info.type = Double.class;
                info.name = "amountApplied";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "amountAppliedSpecified";
                break;
            case 5:
                info.type = Double.class;
                info.name = "amountRefunded";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "amountRefundedSpecified";
                break;
            case 7:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "billInfos";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateReceiptPrinted";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateReceiptPrintedSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderAddress";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderExpiryDate";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderExpiryDateSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "folderRSN";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "folderRSNSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderSequence";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderType";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderYear";
                break;
            case 18:
                info.type = Double.class;
                info.name = "paymentAmount";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "paymentAmountSpecified";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentComment";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paymentDate";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "paymentDateSpecified";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "paymentNumber";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "paymentNumberSpecified";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrCity";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrHouse";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrPostal";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrPrefix";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrProvince";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrStreet";
                break;
            case 31:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrStreetDirection";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrStreetType";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrUnit";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleAddrUnitType";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleNameFirst";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleNameLast";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleOrganizationName";
                break;
            case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone1";
                break;
            case 39:
                info.type = Long.class;
                info.name = "receiptNumber";
                break;
            case 40:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "receiptNumberSpecified";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "validAccountPaymentTypeDesc";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "validFolderDesc";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
