package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsPeople implements KvmSerializable {
    
    public String addrCity;
    public String addrCountry;
    public String addrHouse;
    public String addrPostal;
    public String addrPrefix;
    public String addrProvince;
    public String addrStreet;
    public String addrStreetDirection;
    public String addrStreetPrefix;
    public String addrStreetType;
    public String addrUnit;
    public String addrUnitType;
    public String addressLine1;
    public String addressLine2;
    public String addressLine3;
    public String addressLine4;
    public String addressLine5;
    public String addressLine6;
    public String agencyType;
    public int aliasRSN;
    public boolean aliasRSNSpecified;
    public String birthDate;
    public boolean birthDateSpecified;
    public String comments;
    public String community;
    public String contactSex;
    public boolean creditCardProcessingFlag;
    public boolean creditCardProcessingFlagSpecified;
    public String emailAddress;
    public String emailFlag;
    public int familyRSN;
    public boolean familyRSNSpecified;
    public double height;
    public boolean heightSpecified;
    public double heightInch;
    public boolean heightInchSpecified;
    public String internetAccess;
    public String internetAnswer;
    public String internetPassword;
    public String internetQuestion;
    public String internetRegistrationDate;
    public boolean internetRegistrationDateSpecified;
    public String licenceNumber;
    public String licenceNumberProvince;
    public String nameFirst;
    public String nameLast;
    public String nameMiddle;
    public String nameSuffix;
    public String nameTitle;
    public String nearBy;
    public String organizationName;
    public int parentRSN;
    public boolean parentRSNSpecified;
    public int peopleCode;
    public boolean peopleCodeSpecified;
    public String peopleDesc;
    public String peopleEyeType;
    public String peopleHairType;
    public int peopleRSN;
    public boolean peopleRSNSpecified;
    public String peopleRaceType;
    public String peopleRoleType;
    public String phone1;
    public String phone1Desc;
    public String phone2;
    public String phone2Desc;
    public String phone3;
    public String phone3Desc;
    public String referenceFile;
    public String sex;
    public String smsFlag;
    public String socialSecurityNumber;
    public int statusCode;
    public boolean statusCodeSpecified;
    public double weight;
    public boolean weightSpecified;
    
    public wsPeople(){}
    
    public wsPeople(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("addrCity"))
        {
            Object obj = soapObject.getProperty("addrCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrCity = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrCountry"))
        {
            Object obj = soapObject.getProperty("addrCountry");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrCountry = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrCountry = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrHouse"))
        {
            Object obj = soapObject.getProperty("addrHouse");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrHouse = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrHouse = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrPostal"))
        {
            Object obj = soapObject.getProperty("addrPostal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrPostal = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrPostal = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrPrefix"))
        {
            Object obj = soapObject.getProperty("addrPrefix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrPrefix = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrPrefix = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrProvince"))
        {
            Object obj = soapObject.getProperty("addrProvince");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrProvince = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrProvince = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrStreet"))
        {
            Object obj = soapObject.getProperty("addrStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrStreetDirection"))
        {
            Object obj = soapObject.getProperty("addrStreetDirection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrStreetDirection = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrStreetDirection = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrStreetPrefix"))
        {
            Object obj = soapObject.getProperty("addrStreetPrefix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrStreetPrefix = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrStreetPrefix = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrStreetType"))
        {
            Object obj = soapObject.getProperty("addrStreetType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrStreetType = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrStreetType = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrUnit"))
        {
            Object obj = soapObject.getProperty("addrUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("addrUnitType"))
        {
            Object obj = soapObject.getProperty("addrUnitType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addrUnitType = j.toString();
            }else if (obj!= null && obj instanceof String){
                addrUnitType = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine1"))
        {
            Object obj = soapObject.getProperty("addressLine1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine2"))
        {
            Object obj = soapObject.getProperty("addressLine2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine3"))
        {
            Object obj = soapObject.getProperty("addressLine3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine4"))
        {
            Object obj = soapObject.getProperty("addressLine4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine4 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine5"))
        {
            Object obj = soapObject.getProperty("addressLine5");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine5 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine5 = (String) obj;
            }
        }
        if (soapObject.hasProperty("addressLine6"))
        {
            Object obj = soapObject.getProperty("addressLine6");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressLine6 = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressLine6 = (String) obj;
            }
        }
        if (soapObject.hasProperty("agencyType"))
        {
            Object obj = soapObject.getProperty("agencyType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agencyType = j.toString();
            }else if (obj!= null && obj instanceof String){
                agencyType = (String) obj;
            }
        }
        if (soapObject.hasProperty("aliasRSN"))
        {
            Object obj = soapObject.getProperty("aliasRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aliasRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                aliasRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("aliasRSNSpecified"))
        {
            Object obj = soapObject.getProperty("aliasRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aliasRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                aliasRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("birthDate"))
        {
            Object obj = soapObject.getProperty("birthDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                birthDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                birthDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("birthDateSpecified"))
        {
            Object obj = soapObject.getProperty("birthDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                birthDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                birthDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("community"))
        {
            Object obj = soapObject.getProperty("community");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                community = j.toString();
            }else if (obj!= null && obj instanceof String){
                community = (String) obj;
            }
        }
        if (soapObject.hasProperty("contactSex"))
        {
            Object obj = soapObject.getProperty("contactSex");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                contactSex = j.toString();
            }else if (obj!= null && obj instanceof String){
                contactSex = (String) obj;
            }
        }
        if (soapObject.hasProperty("creditCardProcessingFlag"))
        {
            Object obj = soapObject.getProperty("creditCardProcessingFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                creditCardProcessingFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                creditCardProcessingFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("creditCardProcessingFlagSpecified"))
        {
            Object obj = soapObject.getProperty("creditCardProcessingFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                creditCardProcessingFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                creditCardProcessingFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("emailAddress"))
        {
            Object obj = soapObject.getProperty("emailAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailAddress = j.toString();
            }else if (obj!= null && obj instanceof String){
                emailAddress = (String) obj;
            }
        }
        if (soapObject.hasProperty("emailFlag"))
        {
            Object obj = soapObject.getProperty("emailFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                emailFlag = j.toString();
            }else if (obj!= null && obj instanceof String){
                emailFlag = (String) obj;
            }
        }
        if (soapObject.hasProperty("familyRSN"))
        {
            Object obj = soapObject.getProperty("familyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                familyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("familyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("familyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                familyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("height"))
        {
            Object obj = soapObject.getProperty("height");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                height = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                height = (Double) obj;
            }
        }
        if (soapObject.hasProperty("heightSpecified"))
        {
            Object obj = soapObject.getProperty("heightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                heightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                heightSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("heightInch"))
        {
            Object obj = soapObject.getProperty("heightInch");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                heightInch = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                heightInch = (Double) obj;
            }
        }
        if (soapObject.hasProperty("heightInchSpecified"))
        {
            Object obj = soapObject.getProperty("heightInchSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                heightInchSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                heightInchSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("internetAccess"))
        {
            Object obj = soapObject.getProperty("internetAccess");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetAccess = j.toString();
            }else if (obj!= null && obj instanceof String){
                internetAccess = (String) obj;
            }
        }
        if (soapObject.hasProperty("internetAnswer"))
        {
            Object obj = soapObject.getProperty("internetAnswer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetAnswer = j.toString();
            }else if (obj!= null && obj instanceof String){
                internetAnswer = (String) obj;
            }
        }
        if (soapObject.hasProperty("internetPassword"))
        {
            Object obj = soapObject.getProperty("internetPassword");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetPassword = j.toString();
            }else if (obj!= null && obj instanceof String){
                internetPassword = (String) obj;
            }
        }
        if (soapObject.hasProperty("internetQuestion"))
        {
            Object obj = soapObject.getProperty("internetQuestion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetQuestion = j.toString();
            }else if (obj!= null && obj instanceof String){
                internetQuestion = (String) obj;
            }
        }
        if (soapObject.hasProperty("internetRegistrationDate"))
        {
            Object obj = soapObject.getProperty("internetRegistrationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetRegistrationDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                internetRegistrationDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("internetRegistrationDateSpecified"))
        {
            Object obj = soapObject.getProperty("internetRegistrationDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                internetRegistrationDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                internetRegistrationDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("licenceNumber"))
        {
            Object obj = soapObject.getProperty("licenceNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                licenceNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                licenceNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("licenceNumberProvince"))
        {
            Object obj = soapObject.getProperty("licenceNumberProvince");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                licenceNumberProvince = j.toString();
            }else if (obj!= null && obj instanceof String){
                licenceNumberProvince = (String) obj;
            }
        }
        if (soapObject.hasProperty("nameFirst"))
        {
            Object obj = soapObject.getProperty("nameFirst");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nameFirst = j.toString();
            }else if (obj!= null && obj instanceof String){
                nameFirst = (String) obj;
            }
        }
        if (soapObject.hasProperty("nameLast"))
        {
            Object obj = soapObject.getProperty("nameLast");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nameLast = j.toString();
            }else if (obj!= null && obj instanceof String){
                nameLast = (String) obj;
            }
        }
        if (soapObject.hasProperty("nameMiddle"))
        {
            Object obj = soapObject.getProperty("nameMiddle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nameMiddle = j.toString();
            }else if (obj!= null && obj instanceof String){
                nameMiddle = (String) obj;
            }
        }
        if (soapObject.hasProperty("nameSuffix"))
        {
            Object obj = soapObject.getProperty("nameSuffix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nameSuffix = j.toString();
            }else if (obj!= null && obj instanceof String){
                nameSuffix = (String) obj;
            }
        }
        if (soapObject.hasProperty("nameTitle"))
        {
            Object obj = soapObject.getProperty("nameTitle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nameTitle = j.toString();
            }else if (obj!= null && obj instanceof String){
                nameTitle = (String) obj;
            }
        }
        if (soapObject.hasProperty("nearBy"))
        {
            Object obj = soapObject.getProperty("nearBy");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nearBy = j.toString();
            }else if (obj!= null && obj instanceof String){
                nearBy = (String) obj;
            }
        }
        if (soapObject.hasProperty("organizationName"))
        {
            Object obj = soapObject.getProperty("organizationName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                organizationName = j.toString();
            }else if (obj!= null && obj instanceof String){
                organizationName = (String) obj;
            }
        }
        if (soapObject.hasProperty("parentRSN"))
        {
            Object obj = soapObject.getProperty("parentRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parentRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("parentRSNSpecified"))
        {
            Object obj = soapObject.getProperty("parentRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parentRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("peopleCode"))
        {
            Object obj = soapObject.getProperty("peopleCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleCodeSpecified"))
        {
            Object obj = soapObject.getProperty("peopleCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("peopleDesc"))
        {
            Object obj = soapObject.getProperty("peopleDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleEyeType"))
        {
            Object obj = soapObject.getProperty("peopleEyeType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleEyeType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleEyeType = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleHairType"))
        {
            Object obj = soapObject.getProperty("peopleHairType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleHairType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleHairType = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSN"))
        {
            Object obj = soapObject.getProperty("peopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("peopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("peopleRaceType"))
        {
            Object obj = soapObject.getProperty("peopleRaceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRaceType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleRaceType = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleRoleType"))
        {
            Object obj = soapObject.getProperty("peopleRoleType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRoleType = j.toString();
            }else if (obj!= null && obj instanceof String){
                peopleRoleType = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone1"))
        {
            Object obj = soapObject.getProperty("phone1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone1Desc"))
        {
            Object obj = soapObject.getProperty("phone1Desc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone1Desc = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone1Desc = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone2"))
        {
            Object obj = soapObject.getProperty("phone2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone2Desc"))
        {
            Object obj = soapObject.getProperty("phone2Desc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone2Desc = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone2Desc = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone3"))
        {
            Object obj = soapObject.getProperty("phone3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("phone3Desc"))
        {
            Object obj = soapObject.getProperty("phone3Desc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                phone3Desc = j.toString();
            }else if (obj!= null && obj instanceof String){
                phone3Desc = (String) obj;
            }
        }
        if (soapObject.hasProperty("referenceFile"))
        {
            Object obj = soapObject.getProperty("referenceFile");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                referenceFile = j.toString();
            }else if (obj!= null && obj instanceof String){
                referenceFile = (String) obj;
            }
        }
        if (soapObject.hasProperty("sex"))
        {
            Object obj = soapObject.getProperty("sex");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sex = j.toString();
            }else if (obj!= null && obj instanceof String){
                sex = (String) obj;
            }
        }
        if (soapObject.hasProperty("smsFlag"))
        {
            Object obj = soapObject.getProperty("smsFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                smsFlag = j.toString();
            }else if (obj!= null && obj instanceof String){
                smsFlag = (String) obj;
            }
        }
        if (soapObject.hasProperty("socialSecurityNumber"))
        {
            Object obj = soapObject.getProperty("socialSecurityNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                socialSecurityNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                socialSecurityNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("statusCode"))
        {
            Object obj = soapObject.getProperty("statusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("statusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("weight"))
        {
            Object obj = soapObject.getProperty("weight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                weight = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                weight = (Double) obj;
            }
        }
        if (soapObject.hasProperty("weightSpecified"))
        {
            Object obj = soapObject.getProperty("weightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                weightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                weightSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return addrCity;
            case 1:
                return addrCountry;
            case 2:
                return addrHouse;
            case 3:
                return addrPostal;
            case 4:
                return addrPrefix;
            case 5:
                return addrProvince;
            case 6:
                return addrStreet;
            case 7:
                return addrStreetDirection;
            case 8:
                return addrStreetPrefix;
            case 9:
                return addrStreetType;
            case 10:
                return addrUnit;
            case 11:
                return addrUnitType;
            case 12:
                return addressLine1;
            case 13:
                return addressLine2;
            case 14:
                return addressLine3;
            case 15:
                return addressLine4;
            case 16:
                return addressLine5;
            case 17:
                return addressLine6;
            case 18:
                return agencyType;
            case 19:
                return aliasRSN;
            case 20:
                return aliasRSNSpecified;
            case 21:
                return birthDate;
            case 22:
                return birthDateSpecified;
            case 23:
                return comments;
            case 24:
                return community;
            case 25:
                return contactSex;
            case 26:
                return creditCardProcessingFlag;
            case 27:
                return creditCardProcessingFlagSpecified;
            case 28:
                return emailAddress;
            case 29:
                return emailFlag;
            case 30:
                return familyRSN;
            case 31:
                return familyRSNSpecified;
            case 32:
                return height;
            case 33:
                return heightSpecified;
            case 34:
                return heightInch;
            case 35:
                return heightInchSpecified;
            case 36:
                return internetAccess;
            case 37:
                return internetAnswer;
            case 38:
                return internetPassword;
            case 39:
                return internetQuestion;
            case 40:
                return internetRegistrationDate;
            case 41:
                return internetRegistrationDateSpecified;
            case 42:
                return licenceNumber;
            case 43:
                return licenceNumberProvince;
            case 44:
                return nameFirst;
            case 45:
                return nameLast;
            case 46:
                return nameMiddle;
            case 47:
                return nameSuffix;
            case 48:
                return nameTitle;
            case 49:
                return nearBy;
            case 50:
                return organizationName;
            case 51:
                return parentRSN;
            case 52:
                return parentRSNSpecified;
            case 53:
                return peopleCode;
            case 54:
                return peopleCodeSpecified;
            case 55:
                return peopleDesc;
            case 56:
                return peopleEyeType;
            case 57:
                return peopleHairType;
            case 58:
                return peopleRSN;
            case 59:
                return peopleRSNSpecified;
            case 60:
                return peopleRaceType;
            case 61:
                return peopleRoleType;
            case 62:
                return phone1;
            case 63:
                return phone1Desc;
            case 64:
                return phone2;
            case 65:
                return phone2Desc;
            case 66:
                return phone3;
            case 67:
                return phone3Desc;
            case 68:
                return referenceFile;
            case 69:
                return sex;
            case 70:
                return smsFlag;
            case 71:
                return socialSecurityNumber;
            case 72:
                return statusCode;
            case 73:
                return statusCodeSpecified;
            case 74:
                return weight;
            case 75:
                return weightSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 76;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrCity";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrCountry";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrHouse";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrPostal";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrPrefix";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrProvince";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrStreet";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrStreetDirection";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrStreetPrefix";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrStreetType";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrUnit";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addrUnitType";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine1";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine2";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine3";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine4";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine5";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "addressLine6";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "agencyType";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "aliasRSN";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "aliasRSNSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "birthDate";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "birthDateSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "community";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "contactSex";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "creditCardProcessingFlag";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "creditCardProcessingFlagSpecified";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "emailAddress";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "emailFlag";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "familyRSN";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "familyRSNSpecified";
                break;
            case 32:
                info.type = Double.class;
                info.name = "height";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "heightSpecified";
                break;
            case 34:
                info.type = Double.class;
                info.name = "heightInch";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "heightInchSpecified";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "internetAccess";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "internetAnswer";
                break;
            case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "internetPassword";
                break;
            case 39:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "internetQuestion";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "internetRegistrationDate";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "internetRegistrationDateSpecified";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "licenceNumber";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "licenceNumberProvince";
                break;
            case 44:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nameFirst";
                break;
            case 45:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nameLast";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nameMiddle";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nameSuffix";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nameTitle";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nearBy";
                break;
            case 50:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "organizationName";
                break;
            case 51:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "parentRSN";
                break;
            case 52:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parentRSNSpecified";
                break;
            case 53:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleCode";
                break;
            case 54:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleCodeSpecified";
                break;
            case 55:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleDesc";
                break;
            case 56:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleEyeType";
                break;
            case 57:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleHairType";
                break;
            case 58:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleRSN";
                break;
            case 59:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleRSNSpecified";
                break;
            case 60:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleRaceType";
                break;
            case 61:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "peopleRoleType";
                break;
            case 62:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone1";
                break;
            case 63:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone1Desc";
                break;
            case 64:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone2";
                break;
            case 65:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone2Desc";
                break;
            case 66:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone3";
                break;
            case 67:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "phone3Desc";
                break;
            case 68:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "referenceFile";
                break;
            case 69:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sex";
                break;
            case 70:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "smsFlag";
                break;
            case 71:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "socialSecurityNumber";
                break;
            case 72:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statusCode";
                break;
            case 73:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statusCodeSpecified";
                break;
            case 74:
                info.type = Double.class;
                info.name = "weight";
                break;
            case 75:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "weightSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int index, Object value) {
        /*switch (index){
            case 0:
                addrCity = String.valueOf(value);break;
            case 1:
                addrCountry = String.valueOf(value);break;
            case 2:
                addrHouse = String.valueOf(value);break;
            case 3:
                addrPostal = String.valueOf(value);break;
            case 4:
                addrPrefix = String.valueOf(value);break;
            case 5:
                addrProvince = String.valueOf(value);break;
            case 6:
                addrStreet = String.valueOf(value);break;
            case 7:
                addrStreetDirection = String.valueOf(value);break;
            case 8:
                addrStreetPrefix = String.valueOf(value);break;
            case 9:
                addrStreetType = String.valueOf(value);break;
            case 10:
                addrUnit = String.valueOf(value);break;
            case 11:
                addrUnitType = String.valueOf(value);break;
            case 12:
                addressLine1 = String.valueOf(value);break;
            case 13:
                addressLine2 = String.valueOf(value);break;
            case 14:
                addressLine3 = String.valueOf(value);break;
            case 15:
                addressLine4 = String.valueOf(value);break;
            case 16:
                addressLine5= String.valueOf(value);break;
            case 17:
                addressLine6 = String.valueOf(value);break;
            case 18:
                agencyType = String.valueOf(value);break;
            case 19:
                aliasRSN = Integer.valueOf(String.valueOf(value));break;
            case 20:
                aliasRSNSpecified= Boolean.valueOf(String.valueOf(value));break;
            case 21:
                 birthDate = String.valueOf(value);break;
            case 22:
                 birthDateSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 23:
                 comments = String.valueOf(value);break;
            case 24:
                 community = String.valueOf(value);break;
            case 25:
                 contactSex = String.valueOf(value);break;
            case 26:
                 creditCardProcessingFlag = Boolean.valueOf(String.valueOf(value));break;
            case 27:
                 creditCardProcessingFlagSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 28:
                 emailAddress = String.valueOf(value);break;
            case 29:
                 emailFlag = String.valueOf(value);break;
            case 30:
                 familyRSN = Integer.valueOf(String.valueOf(value));break;
            case 31:
                 familyRSNSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 32:
                 height = Double.valueOf(String.valueOf(value));break;
            case 33:
                 heightSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 34:
                 heightInch = Double.valueOf(String.valueOf(value));break;
            case 35:
                 heightInchSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 36:
                 internetAccess = String.valueOf(value);break;
            case 37:
                 internetAnswer = String.valueOf(value);break;
            case 38:
                 internetPassword = String.valueOf(value);break;
            case 39:
                 internetQuestion = String.valueOf(value);break;
            case 40:
                 internetRegistrationDate =  String.valueOf(value);break;
            case 41:
                 internetRegistrationDateSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 42:
                 licenceNumber = String.valueOf(value);break;
            case 43:
                 licenceNumberProvince  = String.valueOf(value);break;
            case 44:
                 nameFirst = String.valueOf(value);break;
            case 45:
                 nameLast = String.valueOf(value);break;
            case 46:
                 nameMiddle = String.valueOf(value);break;
            case 47:
                 nameSuffix = String.valueOf(value);break;
            case 48:
                 nameTitle = String.valueOf(value);break;
            case 49:
                 nearBy = String.valueOf(value);break;
            case 50:
                 organizationName = String.valueOf(value);break;
            case 51:
                 parentRSN = Integer.valueOf(String.valueOf(value));break;
            case 52:
                 parentRSNSpecified =Boolean.valueOf(String.valueOf(value));break;
            case 53:
                 peopleCode = Integer.valueOf(String.valueOf(value));break;
            case 54:
                 peopleCodeSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 55:
                 peopleDesc = String.valueOf(value);break;
            case 56:
                 peopleEyeType = String.valueOf(value);break;
            case 57:
                 peopleHairType = String.valueOf(value);break;
            case 58:
                 peopleRSN = Integer.valueOf(String.valueOf(value));break;
            case 59:
                 peopleRSNSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 60:
                 peopleRaceType = String.valueOf(value);break;
            case 61:
                 peopleRoleType = String.valueOf(value);break;
            case 62:
                 phone1 = String.valueOf(value);break;
            case 63:
                 phone1Desc = String.valueOf(value);break;
            case 64:
                 phone2 = String.valueOf(value);break;
            case 65:
                 phone2Desc = String.valueOf(value);break;
            case 66:
                 phone3 = String.valueOf(value);break;
            case 67:
                 phone3Desc = String.valueOf(value);break;
            case 68:
                 referenceFile = String.valueOf(value);break;
            case 69:
                 sex = String.valueOf(value);break;
            case 70:
                 smsFlag = String.valueOf(value);break;
            case 71:
                 socialSecurityNumber =String.valueOf(value);break;
            case 72:
                 statusCode = Integer.valueOf(String.valueOf(value));break;
            case 73:
                 statusCodeSpecified = Boolean.valueOf(String.valueOf(value));break;
            case 74:
                 weight = Double.valueOf(String.valueOf(value));break;
            case 75:
                 weightSpecified = Boolean.valueOf(String.valueOf(value));break;
        }*/
    }
    
}
