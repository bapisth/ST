package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsPeopleInfo implements KvmSerializable_ws {
    
    public int displayOrder;
    public boolean displayOrderSpecified;
    public boolean encryptionFlag;
    public boolean encryptionFlagSpecified;
    public int infoCode;
    public boolean infoCodeSpecified;
    public String infoDesc;
    public String infoType;
    public String infoValue;
    public String infoValueCrypt;
    public String infoValueDateTime;
    public boolean infoValueDateTimeSpecified;
    public double infoValueNumeric;
    public boolean infoValueNumericSpecified;
    public String infoValueUpper;
    public int peopleRSN;
    public boolean peopleRSNSpecified;
    public boolean webDisplayFlag;
    public boolean webDisplayFlagSpecified;
    
    public wsPeopleInfo(){}
    
    public wsPeopleInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("encryptionFlag"))
        {
            Object obj = soapObject.getProperty("encryptionFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                encryptionFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                encryptionFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("encryptionFlagSpecified"))
        {
            Object obj = soapObject.getProperty("encryptionFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                encryptionFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                encryptionFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoCode"))
        {
            Object obj = soapObject.getProperty("infoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("infoCodeSpecified"))
        {
            Object obj = soapObject.getProperty("infoCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoDesc"))
        {
            Object obj = soapObject.getProperty("infoDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoType"))
        {
            Object obj = soapObject.getProperty("infoType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoType = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoType = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoValue"))
        {
            Object obj = soapObject.getProperty("infoValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValue = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoValue = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoValueCrypt"))
        {
            Object obj = soapObject.getProperty("infoValueCrypt");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueCrypt = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoValueCrypt = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoValueDateTime"))
        {
            Object obj = soapObject.getProperty("infoValueDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoValueDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoValueDateTimeSpecified"))
        {
            Object obj = soapObject.getProperty("infoValueDateTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueDateTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoValueDateTimeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoValueNumeric"))
        {
            Object obj = soapObject.getProperty("infoValueNumeric");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueNumeric = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoValueNumeric = (Double) obj;
            }
        }
        if (soapObject.hasProperty("infoValueNumericSpecified"))
        {
            Object obj = soapObject.getProperty("infoValueNumericSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueNumericSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoValueNumericSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoValueUpper"))
        {
            Object obj = soapObject.getProperty("infoValueUpper");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueUpper = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoValueUpper = (String) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSN"))
        {
            Object obj = soapObject.getProperty("peopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("peopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("webDisplayFlag"))
        {
            Object obj = soapObject.getProperty("webDisplayFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                webDisplayFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                webDisplayFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("webDisplayFlagSpecified"))
        {
            Object obj = soapObject.getProperty("webDisplayFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                webDisplayFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                webDisplayFlagSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return displayOrder;
            case 1:
                return displayOrderSpecified;
            case 2:
                return encryptionFlag;
            case 3:
                return encryptionFlagSpecified;
            case 4:
                return infoCode;
            case 5:
                return infoCodeSpecified;
            case 6:
                return infoDesc;
            case 7:
                return infoType;
            case 8:
                return infoValue;
            case 9:
                return infoValueCrypt;
            case 10:
                return infoValueDateTime;
            case 11:
                return infoValueDateTimeSpecified;
            case 12:
                return infoValueNumeric;
            case 13:
                return infoValueNumericSpecified;
            case 14:
                return infoValueUpper;
            case 15:
                return peopleRSN;
            case 16:
                return peopleRSNSpecified;
            case 17:
                return webDisplayFlag;
            case 18:
                return webDisplayFlagSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 19;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "encryptionFlag";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "encryptionFlagSpecified";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoCode";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoCodeSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoDesc";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoType";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoValue";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoValueCrypt";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoValueDateTime";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoValueDateTimeSpecified";
                break;
            case 12:
                info.type = Double.class;
                info.name = "infoValueNumeric";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoValueNumericSpecified";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoValueUpper";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleRSN";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleRSNSpecified";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "webDisplayFlag";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "webDisplayFlagSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
