package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsValidInfoValue;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsProcessValidInfo implements KvmSerializable_ws {
    
    public String comments;
    public String displayFormat;
    public int infoCode;
    public String infoDesc;
    public String infoGroup;
    public String infoGroup2;
    public int infoGroupDisplayOrder;
    public boolean infoGroupDisplayOrderSpecified;
    public String infoType;
    public int pickSelectCode;
    public boolean pickSelectCodeSpecified;
    public VectorwsValidInfoValue validInfoValues;
    
    public wsProcessValidInfo(){}
    
    public wsProcessValidInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayFormat"))
        {
            Object obj = soapObject.getProperty("displayFormat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayFormat = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayFormat = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoCode"))
        {
            Object obj = soapObject.getProperty("infoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("infoDesc"))
        {
            Object obj = soapObject.getProperty("infoDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroup"))
        {
            Object obj = soapObject.getProperty("infoGroup");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroup = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoGroup = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroup2"))
        {
            Object obj = soapObject.getProperty("infoGroup2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroup2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoGroup2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroupDisplayOrder"))
        {
            Object obj = soapObject.getProperty("infoGroupDisplayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroupDisplayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoGroupDisplayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("infoGroupDisplayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("infoGroupDisplayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroupDisplayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoGroupDisplayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoType"))
        {
            Object obj = soapObject.getProperty("infoType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoType = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoType = (String) obj;
            }
        }
        if (soapObject.hasProperty("pickSelectCode"))
        {
            Object obj = soapObject.getProperty("pickSelectCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pickSelectCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                pickSelectCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("pickSelectCodeSpecified"))
        {
            Object obj = soapObject.getProperty("pickSelectCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pickSelectCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                pickSelectCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("validInfoValues"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("validInfoValues");
            validInfoValues = new VectorwsValidInfoValue(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comments;
            case 1:
                return displayFormat;
            case 2:
                return infoCode;
            case 3:
                return infoDesc;
            case 4:
                return infoGroup;
            case 5:
                return infoGroup2;
            case 6:
                return infoGroupDisplayOrder;
            case 7:
                return infoGroupDisplayOrderSpecified;
            case 8:
                return infoType;
            case 9:
                return pickSelectCode;
            case 10:
                return pickSelectCodeSpecified;
            case 11:
                return validInfoValues;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayFormat";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoCode";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoDesc";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoGroup";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoGroup2";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoGroupDisplayOrder";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoGroupDisplayOrderSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoType";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "pickSelectCode";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "pickSelectCodeSpecified";
                break;
            case 11:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "validInfoValues";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
