package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsProperty implements KvmSerializable_ws {
    
    public String communityCodeDesc;
    public String countyCodeDesc;
    public String dateCreated;
    public boolean dateCreatedSpecified;
    public String dateObsoleted;
    public boolean dateObsoletedSpecified;
    public int familyRSN;
    public boolean familyRSNSpecified;
    public String gpsElevation;
    public String gpsLatitude;
    public String gpsLongitude;
    public String gpsZone;
    public String legalDesc;
    public int parentPropertyRSN;
    public boolean parentPropertyRSNSpecified;
    public int prop116;
    public boolean prop116Specified;
    public double propArea;
    public boolean propAreaSpecified;
    public int propAreaCode;
    public boolean propAreaCodeSpecified;
    public String propBlock;
    public String propCity;
    public int propCode;
    public boolean propCodeSpecified;
    public String propComment;
    public int propCommunityCode;
    public boolean propCommunityCodeSpecified;
    public int propCountyCode;
    public boolean propCountyCodeSpecified;
    public String propCrossStreet;
    public String propCrossStreetUpper;
    public double propDepth;
    public boolean propDepthSpecified;
    public String propDesc;
    public String propFireDistrict;
    public double propFrontage;
    public boolean propFrontageSpecified;
    public double propGISArea;
    public boolean propGISAreaSpecified;
    public String propGISID1;
    public String propHistoric;
    public String propHouse;
    public int propHouseNumeric;
    public boolean propHouseNumericSpecified;
    public String propLot;
    public String propPlan;
    public String propPostal;
    public String propProvince;
    public String propRange;
    public String propSection;
    public String propStreet;
    public String propStreetDirection;
    public String propStreetPrefix;
    public String propStreetType;
    public String propStreetUpper;
    public String propSubDivision;
    public String propTownship;
    public String propUnit;
    public String propUnitType;
    public double propX;
    public boolean propXSpecified;
    public double propY;
    public boolean propYSpecified;
    public String propertyName;
    public int propertyRSN;
    public boolean propertyRSNSpecified;
    public String propertyRoll;
    public int routeCode;
    public boolean routeCodeSpecified;
    public int statusCode;
    public boolean statusCodeSpecified;
    public String statusDesc;
    public String zoneType1;
    public String zoneType2;
    public String zoneType3;
    public String zoneType4;
    public String zoneType5;
    
    public wsProperty(){}
    
    public wsProperty(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("communityCodeDesc"))
        {
            Object obj = soapObject.getProperty("communityCodeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                communityCodeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                communityCodeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("countyCodeDesc"))
        {
            Object obj = soapObject.getProperty("countyCodeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countyCodeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                countyCodeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCreated"))
        {
            Object obj = soapObject.getProperty("dateCreated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateCreated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCreatedSpecified"))
        {
            Object obj = soapObject.getProperty("dateCreatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateCreatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateObsoleted"))
        {
            Object obj = soapObject.getProperty("dateObsoleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateObsoleted = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateObsoleted = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateObsoletedSpecified"))
        {
            Object obj = soapObject.getProperty("dateObsoletedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateObsoletedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateObsoletedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("familyRSN"))
        {
            Object obj = soapObject.getProperty("familyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                familyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("familyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("familyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                familyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("gpsElevation"))
        {
            Object obj = soapObject.getProperty("gpsElevation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gpsElevation = j.toString();
            }else if (obj!= null && obj instanceof String){
                gpsElevation = (String) obj;
            }
        }
        if (soapObject.hasProperty("gpsLatitude"))
        {
            Object obj = soapObject.getProperty("gpsLatitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gpsLatitude = j.toString();
            }else if (obj!= null && obj instanceof String){
                gpsLatitude = (String) obj;
            }
        }
        if (soapObject.hasProperty("gpsLongitude"))
        {
            Object obj = soapObject.getProperty("gpsLongitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gpsLongitude = j.toString();
            }else if (obj!= null && obj instanceof String){
                gpsLongitude = (String) obj;
            }
        }
        if (soapObject.hasProperty("gpsZone"))
        {
            Object obj = soapObject.getProperty("gpsZone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gpsZone = j.toString();
            }else if (obj!= null && obj instanceof String){
                gpsZone = (String) obj;
            }
        }
        if (soapObject.hasProperty("legalDesc"))
        {
            Object obj = soapObject.getProperty("legalDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                legalDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                legalDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("parentPropertyRSN"))
        {
            Object obj = soapObject.getProperty("parentPropertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentPropertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parentPropertyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("parentPropertyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("parentPropertyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentPropertyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parentPropertyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("prop116"))
        {
            Object obj = soapObject.getProperty("prop116");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                prop116 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                prop116 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("prop116Specified"))
        {
            Object obj = soapObject.getProperty("prop116Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                prop116Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                prop116Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propArea"))
        {
            Object obj = soapObject.getProperty("propArea");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propArea = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propArea = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propAreaSpecified"))
        {
            Object obj = soapObject.getProperty("propAreaSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propAreaSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propAreaSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propAreaCode"))
        {
            Object obj = soapObject.getProperty("propAreaCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propAreaCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propAreaCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propAreaCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propAreaCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propAreaCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propAreaCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propBlock"))
        {
            Object obj = soapObject.getProperty("propBlock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propBlock = j.toString();
            }else if (obj!= null && obj instanceof String){
                propBlock = (String) obj;
            }
        }
        if (soapObject.hasProperty("propCity"))
        {
            Object obj = soapObject.getProperty("propCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCity = j.toString();
            }else if (obj!= null && obj instanceof String){
                propCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("propCode"))
        {
            Object obj = soapObject.getProperty("propCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propComment"))
        {
            Object obj = soapObject.getProperty("propComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                propComment = (String) obj;
            }
        }
        if (soapObject.hasProperty("propCommunityCode"))
        {
            Object obj = soapObject.getProperty("propCommunityCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCommunityCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propCommunityCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propCommunityCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propCommunityCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCommunityCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propCommunityCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propCountyCode"))
        {
            Object obj = soapObject.getProperty("propCountyCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCountyCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propCountyCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propCountyCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propCountyCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCountyCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propCountyCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propCrossStreet"))
        {
            Object obj = soapObject.getProperty("propCrossStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCrossStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                propCrossStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("propCrossStreetUpper"))
        {
            Object obj = soapObject.getProperty("propCrossStreetUpper");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCrossStreetUpper = j.toString();
            }else if (obj!= null && obj instanceof String){
                propCrossStreetUpper = (String) obj;
            }
        }
        if (soapObject.hasProperty("propDepth"))
        {
            Object obj = soapObject.getProperty("propDepth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propDepth = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propDepth = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propDepthSpecified"))
        {
            Object obj = soapObject.getProperty("propDepthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propDepthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propDepthSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propDesc"))
        {
            Object obj = soapObject.getProperty("propDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                propDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("propFireDistrict"))
        {
            Object obj = soapObject.getProperty("propFireDistrict");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propFireDistrict = j.toString();
            }else if (obj!= null && obj instanceof String){
                propFireDistrict = (String) obj;
            }
        }
        if (soapObject.hasProperty("propFrontage"))
        {
            Object obj = soapObject.getProperty("propFrontage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propFrontage = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propFrontage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propFrontageSpecified"))
        {
            Object obj = soapObject.getProperty("propFrontageSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propFrontageSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propFrontageSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propGISArea"))
        {
            Object obj = soapObject.getProperty("propGISArea");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propGISArea = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propGISArea = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propGISAreaSpecified"))
        {
            Object obj = soapObject.getProperty("propGISAreaSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propGISAreaSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propGISAreaSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propGISID1"))
        {
            Object obj = soapObject.getProperty("propGISID1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propGISID1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                propGISID1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("propHistoric"))
        {
            Object obj = soapObject.getProperty("propHistoric");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propHistoric = j.toString();
            }else if (obj!= null && obj instanceof String){
                propHistoric = (String) obj;
            }
        }
        if (soapObject.hasProperty("propHouse"))
        {
            Object obj = soapObject.getProperty("propHouse");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propHouse = j.toString();
            }else if (obj!= null && obj instanceof String){
                propHouse = (String) obj;
            }
        }
        if (soapObject.hasProperty("propHouseNumeric"))
        {
            Object obj = soapObject.getProperty("propHouseNumeric");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propHouseNumeric = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propHouseNumeric = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propHouseNumericSpecified"))
        {
            Object obj = soapObject.getProperty("propHouseNumericSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propHouseNumericSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propHouseNumericSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propLot"))
        {
            Object obj = soapObject.getProperty("propLot");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propLot = j.toString();
            }else if (obj!= null && obj instanceof String){
                propLot = (String) obj;
            }
        }
        if (soapObject.hasProperty("propPlan"))
        {
            Object obj = soapObject.getProperty("propPlan");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propPlan = j.toString();
            }else if (obj!= null && obj instanceof String){
                propPlan = (String) obj;
            }
        }
        if (soapObject.hasProperty("propPostal"))
        {
            Object obj = soapObject.getProperty("propPostal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propPostal = j.toString();
            }else if (obj!= null && obj instanceof String){
                propPostal = (String) obj;
            }
        }
        if (soapObject.hasProperty("propProvince"))
        {
            Object obj = soapObject.getProperty("propProvince");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propProvince = j.toString();
            }else if (obj!= null && obj instanceof String){
                propProvince = (String) obj;
            }
        }
        if (soapObject.hasProperty("propRange"))
        {
            Object obj = soapObject.getProperty("propRange");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propRange = j.toString();
            }else if (obj!= null && obj instanceof String){
                propRange = (String) obj;
            }
        }
        if (soapObject.hasProperty("propSection"))
        {
            Object obj = soapObject.getProperty("propSection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propSection = j.toString();
            }else if (obj!= null && obj instanceof String){
                propSection = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreet"))
        {
            Object obj = soapObject.getProperty("propStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetDirection"))
        {
            Object obj = soapObject.getProperty("propStreetDirection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetDirection = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetDirection = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetPrefix"))
        {
            Object obj = soapObject.getProperty("propStreetPrefix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetPrefix = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetPrefix = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetType"))
        {
            Object obj = soapObject.getProperty("propStreetType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetType = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetType = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetUpper"))
        {
            Object obj = soapObject.getProperty("propStreetUpper");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetUpper = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetUpper = (String) obj;
            }
        }
        if (soapObject.hasProperty("propSubDivision"))
        {
            Object obj = soapObject.getProperty("propSubDivision");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propSubDivision = j.toString();
            }else if (obj!= null && obj instanceof String){
                propSubDivision = (String) obj;
            }
        }
        if (soapObject.hasProperty("propTownship"))
        {
            Object obj = soapObject.getProperty("propTownship");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propTownship = j.toString();
            }else if (obj!= null && obj instanceof String){
                propTownship = (String) obj;
            }
        }
        if (soapObject.hasProperty("propUnit"))
        {
            Object obj = soapObject.getProperty("propUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propUnit = j.toString();
            }else if (obj!= null && obj instanceof String){
                propUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("propUnitType"))
        {
            Object obj = soapObject.getProperty("propUnitType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propUnitType = j.toString();
            }else if (obj!= null && obj instanceof String){
                propUnitType = (String) obj;
            }
        }
        if (soapObject.hasProperty("propX"))
        {
            Object obj = soapObject.getProperty("propX");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propX = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propX = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propXSpecified"))
        {
            Object obj = soapObject.getProperty("propXSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propXSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propXSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propY"))
        {
            Object obj = soapObject.getProperty("propY");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propY = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propY = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propYSpecified"))
        {
            Object obj = soapObject.getProperty("propYSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propYSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propYSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyName"))
        {
            Object obj = soapObject.getProperty("propertyName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyName = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyName = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSN"))
        {
            Object obj = soapObject.getProperty("propertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSNSpecified"))
        {
            Object obj = soapObject.getProperty("propertyRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyRoll"))
        {
            Object obj = soapObject.getProperty("propertyRoll");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRoll = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyRoll = (String) obj;
            }
        }
        if (soapObject.hasProperty("routeCode"))
        {
            Object obj = soapObject.getProperty("routeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                routeCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                routeCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("routeCodeSpecified"))
        {
            Object obj = soapObject.getProperty("routeCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                routeCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                routeCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusCode"))
        {
            Object obj = soapObject.getProperty("statusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statusCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statusCodeSpecified"))
        {
            Object obj = soapObject.getProperty("statusCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statusCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statusDesc"))
        {
            Object obj = soapObject.getProperty("statusDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statusDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                statusDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("zoneType1"))
        {
            Object obj = soapObject.getProperty("zoneType1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zoneType1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                zoneType1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("zoneType2"))
        {
            Object obj = soapObject.getProperty("zoneType2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zoneType2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                zoneType2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("zoneType3"))
        {
            Object obj = soapObject.getProperty("zoneType3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zoneType3 = j.toString();
            }else if (obj!= null && obj instanceof String){
                zoneType3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("zoneType4"))
        {
            Object obj = soapObject.getProperty("zoneType4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zoneType4 = j.toString();
            }else if (obj!= null && obj instanceof String){
                zoneType4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("zoneType5"))
        {
            Object obj = soapObject.getProperty("zoneType5");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zoneType5 = j.toString();
            }else if (obj!= null && obj instanceof String){
                zoneType5 = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return communityCodeDesc;
            case 1:
                return countyCodeDesc;
            case 2:
                return dateCreated;
            case 3:
                return dateCreatedSpecified;
            case 4:
                return dateObsoleted;
            case 5:
                return dateObsoletedSpecified;
            case 6:
                return familyRSN;
            case 7:
                return familyRSNSpecified;
            case 8:
                return gpsElevation;
            case 9:
                return gpsLatitude;
            case 10:
                return gpsLongitude;
            case 11:
                return gpsZone;
            case 12:
                return legalDesc;
            case 13:
                return parentPropertyRSN;
            case 14:
                return parentPropertyRSNSpecified;
            case 15:
                return prop116;
            case 16:
                return prop116Specified;
            case 17:
                return propArea;
            case 18:
                return propAreaSpecified;
            case 19:
                return propAreaCode;
            case 20:
                return propAreaCodeSpecified;
            case 21:
                return propBlock;
            case 22:
                return propCity;
            case 23:
                return propCode;
            case 24:
                return propCodeSpecified;
            case 25:
                return propComment;
            case 26:
                return propCommunityCode;
            case 27:
                return propCommunityCodeSpecified;
            case 28:
                return propCountyCode;
            case 29:
                return propCountyCodeSpecified;
            case 30:
                return propCrossStreet;
            case 31:
                return propCrossStreetUpper;
            case 32:
                return propDepth;
            case 33:
                return propDepthSpecified;
            case 34:
                return propDesc;
            case 35:
                return propFireDistrict;
            case 36:
                return propFrontage;
            case 37:
                return propFrontageSpecified;
            case 38:
                return propGISArea;
            case 39:
                return propGISAreaSpecified;
            case 40:
                return propGISID1;
            case 41:
                return propHistoric;
            case 42:
                return propHouse;
            case 43:
                return propHouseNumeric;
            case 44:
                return propHouseNumericSpecified;
            case 45:
                return propLot;
            case 46:
                return propPlan;
            case 47:
                return propPostal;
            case 48:
                return propProvince;
            case 49:
                return propRange;
            case 50:
                return propSection;
            case 51:
                return propStreet;
            case 52:
                return propStreetDirection;
            case 53:
                return propStreetPrefix;
            case 54:
                return propStreetType;
            case 55:
                return propStreetUpper;
            case 56:
                return propSubDivision;
            case 57:
                return propTownship;
            case 58:
                return propUnit;
            case 59:
                return propUnitType;
            case 60:
                return propX;
            case 61:
                return propXSpecified;
            case 62:
                return propY;
            case 63:
                return propYSpecified;
            case 64:
                return propertyName;
            case 65:
                return propertyRSN;
            case 66:
                return propertyRSNSpecified;
            case 67:
                return propertyRoll;
            case 68:
                return routeCode;
            case 69:
                return routeCodeSpecified;
            case 70:
                return statusCode;
            case 71:
                return statusCodeSpecified;
            case 72:
                return statusDesc;
            case 73:
                return zoneType1;
            case 74:
                return zoneType2;
            case 75:
                return zoneType3;
            case 76:
                return zoneType4;
            case 77:
                return zoneType5;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 78;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "communityCodeDesc";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "countyCodeDesc";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateCreated";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateCreatedSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateObsoleted";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateObsoletedSpecified";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "familyRSN";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "familyRSNSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gpsElevation";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gpsLatitude";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gpsLongitude";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "gpsZone";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "legalDesc";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "parentPropertyRSN";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parentPropertyRSNSpecified";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "prop116";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "prop116Specified";
                break;
            case 17:
                info.type = Double.class;
                info.name = "propArea";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propAreaSpecified";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propAreaCode";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propAreaCodeSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propBlock";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propCity";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propCode";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propCodeSpecified";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propComment";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propCommunityCode";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propCommunityCodeSpecified";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propCountyCode";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propCountyCodeSpecified";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propCrossStreet";
                break;
            case 31:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propCrossStreetUpper";
                break;
            case 32:
                info.type = Double.class;
                info.name = "propDepth";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propDepthSpecified";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propDesc";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propFireDistrict";
                break;
            case 36:
                info.type = Double.class;
                info.name = "propFrontage";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propFrontageSpecified";
                break;
            case 38:
                info.type = Double.class;
                info.name = "propGISArea";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propGISAreaSpecified";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propGISID1";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propHistoric";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propHouse";
                break;
            case 43:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propHouseNumeric";
                break;
            case 44:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propHouseNumericSpecified";
                break;
            case 45:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propLot";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propPlan";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propPostal";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propProvince";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propRange";
                break;
            case 50:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propSection";
                break;
            case 51:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreet";
                break;
            case 52:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetDirection";
                break;
            case 53:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetPrefix";
                break;
            case 54:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetType";
                break;
            case 55:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetUpper";
                break;
            case 56:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propSubDivision";
                break;
            case 57:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propTownship";
                break;
            case 58:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propUnit";
                break;
            case 59:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propUnitType";
                break;
            case 60:
                info.type = Double.class;
                info.name = "propX";
                break;
            case 61:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propXSpecified";
                break;
            case 62:
                info.type = Double.class;
                info.name = "propY";
                break;
            case 63:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propYSpecified";
                break;
            case 64:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyName";
                break;
            case 65:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyRSN";
                break;
            case 66:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyRSNSpecified";
                break;
            case 67:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyRoll";
                break;
            case 68:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "routeCode";
                break;
            case 69:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "routeCodeSpecified";
                break;
            case 70:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "statusCode";
                break;
            case 71:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statusCodeSpecified";
                break;
            case 72:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statusDesc";
                break;
            case 73:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "zoneType1";
                break;
            case 74:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "zoneType2";
                break;
            case 75:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "zoneType3";
                break;
            case 76:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "zoneType4";
                break;
            case 77:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "zoneType5";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
