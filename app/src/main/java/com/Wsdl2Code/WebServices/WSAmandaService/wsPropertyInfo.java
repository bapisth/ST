package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsPropertyInfo implements KvmSerializable_ws {
    
    public int displayOrder;
    public boolean displayOrderSpecified;
    public boolean encryptionFlag;
    public boolean encryptionFlagSpecified;
    public String infoValueUpper;
    public String propInfoValue;
    public int propertyInfoCode;
    public boolean propertyInfoCodeSpecified;
    public String propertyInfoDesc;
    public String propertyInfoType;
    public String propertyInfoValueCrypt;
    public String propertyInfoValueDateTime;
    public boolean propertyInfoValueDateTimeSpecified;
    public double propertyInfoValueNumeric;
    public boolean propertyInfoValueNumericSpecified;
    public int propertyRSN;
    
    public wsPropertyInfo(){}
    
    public wsPropertyInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("encryptionFlag"))
        {
            Object obj = soapObject.getProperty("encryptionFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                encryptionFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                encryptionFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("encryptionFlagSpecified"))
        {
            Object obj = soapObject.getProperty("encryptionFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                encryptionFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                encryptionFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoValueUpper"))
        {
            Object obj = soapObject.getProperty("infoValueUpper");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoValueUpper = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoValueUpper = (String) obj;
            }
        }
        if (soapObject.hasProperty("propInfoValue"))
        {
            Object obj = soapObject.getProperty("propInfoValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propInfoValue = j.toString();
            }else if (obj!= null && obj instanceof String){
                propInfoValue = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoCode"))
        {
            Object obj = soapObject.getProperty("propertyInfoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyInfoCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoCodeSpecified"))
        {
            Object obj = soapObject.getProperty("propertyInfoCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyInfoCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoDesc"))
        {
            Object obj = soapObject.getProperty("propertyInfoDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyInfoDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoType"))
        {
            Object obj = soapObject.getProperty("propertyInfoType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoType = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyInfoType = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoValueCrypt"))
        {
            Object obj = soapObject.getProperty("propertyInfoValueCrypt");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoValueCrypt = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyInfoValueCrypt = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoValueDateTime"))
        {
            Object obj = soapObject.getProperty("propertyInfoValueDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoValueDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                propertyInfoValueDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoValueDateTimeSpecified"))
        {
            Object obj = soapObject.getProperty("propertyInfoValueDateTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoValueDateTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyInfoValueDateTimeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoValueNumeric"))
        {
            Object obj = soapObject.getProperty("propertyInfoValueNumeric");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoValueNumeric = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyInfoValueNumeric = (Double) obj;
            }
        }
        if (soapObject.hasProperty("propertyInfoValueNumericSpecified"))
        {
            Object obj = soapObject.getProperty("propertyInfoValueNumericSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyInfoValueNumericSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                propertyInfoValueNumericSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propertyRSN"))
        {
            Object obj = soapObject.getProperty("propertyRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propertyRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                propertyRSN = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return displayOrder;
            case 1:
                return displayOrderSpecified;
            case 2:
                return encryptionFlag;
            case 3:
                return encryptionFlagSpecified;
            case 4:
                return infoValueUpper;
            case 5:
                return propInfoValue;
            case 6:
                return propertyInfoCode;
            case 7:
                return propertyInfoCodeSpecified;
            case 8:
                return propertyInfoDesc;
            case 9:
                return propertyInfoType;
            case 10:
                return propertyInfoValueCrypt;
            case 11:
                return propertyInfoValueDateTime;
            case 12:
                return propertyInfoValueDateTimeSpecified;
            case 13:
                return propertyInfoValueNumeric;
            case 14:
                return propertyInfoValueNumericSpecified;
            case 15:
                return propertyRSN;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "encryptionFlag";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "encryptionFlagSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoValueUpper";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propInfoValue";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyInfoCode";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyInfoCodeSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyInfoDesc";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyInfoType";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyInfoValueCrypt";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propertyInfoValueDateTime";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyInfoValueDateTimeSpecified";
                break;
            case 13:
                info.type = Double.class;
                info.name = "propertyInfoValueNumeric";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "propertyInfoValueNumericSpecified";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "propertyRSN";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
