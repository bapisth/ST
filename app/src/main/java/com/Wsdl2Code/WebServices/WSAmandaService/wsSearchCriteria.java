package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorString;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsSearchCriteria implements KvmSerializable_ws {
    
    public int conjuctiveOperator;
    public String fieldName;
    public int infoCode;
    public boolean negative;
    public int operator;
    public String tableName;
    public VectorString value;
    
    public wsSearchCriteria(){}
    
    public wsSearchCriteria(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("conjuctiveOperator"))
        {
            Object obj = soapObject.getProperty("conjuctiveOperator");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conjuctiveOperator = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                conjuctiveOperator = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("fieldName"))
        {
            Object obj = soapObject.getProperty("fieldName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fieldName = j.toString();
            }else if (obj!= null && obj instanceof String){
                fieldName = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoCode"))
        {
            Object obj = soapObject.getProperty("infoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("negative"))
        {
            Object obj = soapObject.getProperty("negative");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                negative = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                negative = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("operator"))
        {
            Object obj = soapObject.getProperty("operator");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                operator = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                operator = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("tableName"))
        {
            Object obj = soapObject.getProperty("tableName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tableName = j.toString();
            }else if (obj!= null && obj instanceof String){
                tableName = (String) obj;
            }
        }
        if (soapObject.hasProperty("value"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("value");
            value = new VectorString(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return conjuctiveOperator;
            case 1:
                return fieldName;
            case 2:
                return infoCode;
            case 3:
                return negative;
            case 4:
                return operator;
            case 5:
                return tableName;
            case 6:
                return value;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 7;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "conjuctiveOperator";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fieldName";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoCode";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "negative";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "operator";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tableName";
                break;
            case 6:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "value";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
