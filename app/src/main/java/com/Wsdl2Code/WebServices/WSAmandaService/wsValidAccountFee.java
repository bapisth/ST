package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsValidAccountFee implements KvmSerializable_ws {
    
    public int accessCode;
    public boolean accessCodeSpecified;
    public boolean activeFlag;
    public boolean activeFlagSpecified;
    public String bankAccountType;
    public String comments;
    public boolean conversionFlag;
    public boolean conversionFlagSpecified;
    public int displayOrder;
    public boolean displayOrderSpecified;
    public int feeCode;
    public boolean feeCodeSpecified;
    public String feeDesc;
    public int feeGroupCode;
    public boolean feeGroupCodeSpecified;
    public String glAccountNumber;
    public String payFrequencyType;
    public boolean payableFlag;
    public boolean payableFlagSpecified;
    public int priority;
    public boolean prioritySpecified;
    public int reportGLGroupCode;
    public boolean reportGLGroupCodeSpecified;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public double unitPrice;
    public boolean unitPriceSpecified;
    
    public wsValidAccountFee(){}
    
    public wsValidAccountFee(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("accessCode"))
        {
            Object obj = soapObject.getProperty("accessCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accessCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                accessCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("accessCodeSpecified"))
        {
            Object obj = soapObject.getProperty("accessCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accessCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                accessCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("activeFlag"))
        {
            Object obj = soapObject.getProperty("activeFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                activeFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                activeFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("activeFlagSpecified"))
        {
            Object obj = soapObject.getProperty("activeFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                activeFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                activeFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("bankAccountType"))
        {
            Object obj = soapObject.getProperty("bankAccountType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bankAccountType = j.toString();
            }else if (obj!= null && obj instanceof String){
                bankAccountType = (String) obj;
            }
        }
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("conversionFlag"))
        {
            Object obj = soapObject.getProperty("conversionFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conversionFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conversionFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("conversionFlagSpecified"))
        {
            Object obj = soapObject.getProperty("conversionFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conversionFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conversionFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("feeCode"))
        {
            Object obj = soapObject.getProperty("feeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                feeCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("feeCodeSpecified"))
        {
            Object obj = soapObject.getProperty("feeCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                feeCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("feeDesc"))
        {
            Object obj = soapObject.getProperty("feeDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                feeDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("feeGroupCode"))
        {
            Object obj = soapObject.getProperty("feeGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeGroupCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                feeGroupCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("feeGroupCodeSpecified"))
        {
            Object obj = soapObject.getProperty("feeGroupCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeGroupCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                feeGroupCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("glAccountNumber"))
        {
            Object obj = soapObject.getProperty("glAccountNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                glAccountNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                glAccountNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("payFrequencyType"))
        {
            Object obj = soapObject.getProperty("payFrequencyType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payFrequencyType = j.toString();
            }else if (obj!= null && obj instanceof String){
                payFrequencyType = (String) obj;
            }
        }
        if (soapObject.hasProperty("payableFlag"))
        {
            Object obj = soapObject.getProperty("payableFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payableFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                payableFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("payableFlagSpecified"))
        {
            Object obj = soapObject.getProperty("payableFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payableFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                payableFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("priority"))
        {
            Object obj = soapObject.getProperty("priority");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                priority = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                priority = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("prioritySpecified"))
        {
            Object obj = soapObject.getProperty("prioritySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                prioritySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                prioritySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("reportGLGroupCode"))
        {
            Object obj = soapObject.getProperty("reportGLGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reportGLGroupCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                reportGLGroupCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("reportGLGroupCodeSpecified"))
        {
            Object obj = soapObject.getProperty("reportGLGroupCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reportGLGroupCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                reportGLGroupCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("unitPrice"))
        {
            Object obj = soapObject.getProperty("unitPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unitPrice = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                unitPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("unitPriceSpecified"))
        {
            Object obj = soapObject.getProperty("unitPriceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unitPriceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                unitPriceSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return accessCode;
            case 1:
                return accessCodeSpecified;
            case 2:
                return activeFlag;
            case 3:
                return activeFlagSpecified;
            case 4:
                return bankAccountType;
            case 5:
                return comments;
            case 6:
                return conversionFlag;
            case 7:
                return conversionFlagSpecified;
            case 8:
                return displayOrder;
            case 9:
                return displayOrderSpecified;
            case 10:
                return feeCode;
            case 11:
                return feeCodeSpecified;
            case 12:
                return feeDesc;
            case 13:
                return feeGroupCode;
            case 14:
                return feeGroupCodeSpecified;
            case 15:
                return glAccountNumber;
            case 16:
                return payFrequencyType;
            case 17:
                return payableFlag;
            case 18:
                return payableFlagSpecified;
            case 19:
                return priority;
            case 20:
                return prioritySpecified;
            case 21:
                return reportGLGroupCode;
            case 22:
                return reportGLGroupCodeSpecified;
            case 23:
                return stampDate;
            case 24:
                return stampDateSpecified;
            case 25:
                return stampUser;
            case 26:
                return unitPrice;
            case 27:
                return unitPriceSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 28;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "accessCode";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "accessCodeSpecified";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "activeFlag";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "activeFlagSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "bankAccountType";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conversionFlag";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conversionFlagSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "feeCode";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "feeCodeSpecified";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "feeDesc";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "feeGroupCode";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "feeGroupCodeSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "glAccountNumber";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "payFrequencyType";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "payableFlag";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "payableFlagSpecified";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "priority";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "prioritySpecified";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "reportGLGroupCode";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "reportGLGroupCodeSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 26:
                info.type = Double.class;
                info.name = "unitPrice";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "unitPriceSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
