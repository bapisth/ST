package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsValidFreeFormColumnValue;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsValidFreeFormColumn implements KvmSerializable_ws {
    
    public int accessCode;
    public boolean accessCodeSpecified;
    public String columnExpression;
    public boolean columnHide;
    public boolean columnHideSpecified;
    public String columnLabel;
    public String columnName;
    public String columnValidation;
    public String defaultValue;
    public int displayOrder;
    public boolean displayOrderSpecified;
    public int displayRows;
    public boolean displayRowsSpecified;
    public String displayType;
    public int freeFormCode;
    public boolean freeFormCodeSpecified;
    public int labelBackground;
    public boolean labelBackgroundSpecified;
    public int labelFontColour;
    public boolean labelFontColourSpecified;
    public String labelFontName;
    public int labelFontSize;
    public boolean labelFontSizeSpecified;
    public String labelFontWeight;
    public int labelHeight;
    public boolean labelHeightSpecified;
    public String labelHtmlClassField;
    public String labelStyle;
    public int labelWidth;
    public boolean labelWidthSpecified;
    public int labelX;
    public boolean labelXSpecified;
    public int labelY;
    public boolean labelYSpecified;
    public int listLabelWidth;
    public boolean listLabelWidthSpecified;
    public boolean mandatory;
    public boolean mandatorySpecified;
    public boolean readOnly;
    public boolean readOnlySpecified;
    public String selectRSNColumnName;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public VectorwsValidFreeFormColumnValue validFreeFormColumnValues;
    public int valueBackground;
    public boolean valueBackgroundSpecified;
    public int valueFontColour;
    public boolean valueFontColourSpecified;
    public String valueFontName;
    public int valueFontSize;
    public boolean valueFontSizeSpecified;
    public String valueFontWeight;
    public int valueHeight;
    public boolean valueHeightSpecified;
    public String valueHtmlClassField;
    public String valueStyle;
    public int valueWidth;
    public boolean valueWidthSpecified;
    public int valueX;
    public boolean valueXSpecified;
    public int valueY;
    public boolean valueYSpecified;
    
    public wsValidFreeFormColumn(){}
    
    public wsValidFreeFormColumn(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("accessCode"))
        {
            Object obj = soapObject.getProperty("accessCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accessCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                accessCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("accessCodeSpecified"))
        {
            Object obj = soapObject.getProperty("accessCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accessCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                accessCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("columnExpression"))
        {
            Object obj = soapObject.getProperty("columnExpression");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnExpression = j.toString();
            }else if (obj!= null && obj instanceof String){
                columnExpression = (String) obj;
            }
        }
        if (soapObject.hasProperty("columnHide"))
        {
            Object obj = soapObject.getProperty("columnHide");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnHide = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                columnHide = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("columnHideSpecified"))
        {
            Object obj = soapObject.getProperty("columnHideSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnHideSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                columnHideSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("columnLabel"))
        {
            Object obj = soapObject.getProperty("columnLabel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnLabel = j.toString();
            }else if (obj!= null && obj instanceof String){
                columnLabel = (String) obj;
            }
        }
        if (soapObject.hasProperty("columnName"))
        {
            Object obj = soapObject.getProperty("columnName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnName = j.toString();
            }else if (obj!= null && obj instanceof String){
                columnName = (String) obj;
            }
        }
        if (soapObject.hasProperty("columnValidation"))
        {
            Object obj = soapObject.getProperty("columnValidation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                columnValidation = j.toString();
            }else if (obj!= null && obj instanceof String){
                columnValidation = (String) obj;
            }
        }
        if (soapObject.hasProperty("defaultValue"))
        {
            Object obj = soapObject.getProperty("defaultValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                defaultValue = j.toString();
            }else if (obj!= null && obj instanceof String){
                defaultValue = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("displayRows"))
        {
            Object obj = soapObject.getProperty("displayRows");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayRows = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayRows = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayRowsSpecified"))
        {
            Object obj = soapObject.getProperty("displayRowsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayRowsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayRowsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("displayType"))
        {
            Object obj = soapObject.getProperty("displayType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayType = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayType = (String) obj;
            }
        }
        if (soapObject.hasProperty("freeFormCode"))
        {
            Object obj = soapObject.getProperty("freeFormCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                freeFormCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                freeFormCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("freeFormCodeSpecified"))
        {
            Object obj = soapObject.getProperty("freeFormCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                freeFormCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                freeFormCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelBackground"))
        {
            Object obj = soapObject.getProperty("labelBackground");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelBackground = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelBackground = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelBackgroundSpecified"))
        {
            Object obj = soapObject.getProperty("labelBackgroundSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelBackgroundSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelBackgroundSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelFontColour"))
        {
            Object obj = soapObject.getProperty("labelFontColour");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontColour = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelFontColour = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelFontColourSpecified"))
        {
            Object obj = soapObject.getProperty("labelFontColourSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontColourSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelFontColourSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelFontName"))
        {
            Object obj = soapObject.getProperty("labelFontName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontName = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelFontName = (String) obj;
            }
        }
        if (soapObject.hasProperty("labelFontSize"))
        {
            Object obj = soapObject.getProperty("labelFontSize");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontSize = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelFontSize = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelFontSizeSpecified"))
        {
            Object obj = soapObject.getProperty("labelFontSizeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontSizeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelFontSizeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelFontWeight"))
        {
            Object obj = soapObject.getProperty("labelFontWeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelFontWeight = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelFontWeight = (String) obj;
            }
        }
        if (soapObject.hasProperty("labelHeight"))
        {
            Object obj = soapObject.getProperty("labelHeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelHeight = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelHeight = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelHeightSpecified"))
        {
            Object obj = soapObject.getProperty("labelHeightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelHeightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelHeightSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelHtmlClass"))
        {
            Object obj = soapObject.getProperty("labelHtmlClass");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelHtmlClassField = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelHtmlClassField = (String) obj;
            }
        }
        if (soapObject.hasProperty("labelStyle"))
        {
            Object obj = soapObject.getProperty("labelStyle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelStyle = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelStyle = (String) obj;
            }
        }
        if (soapObject.hasProperty("labelWidth"))
        {
            Object obj = soapObject.getProperty("labelWidth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelWidth = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelWidth = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelWidthSpecified"))
        {
            Object obj = soapObject.getProperty("labelWidthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelWidthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelWidthSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelX"))
        {
            Object obj = soapObject.getProperty("labelX");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelX = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelX = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelXSpecified"))
        {
            Object obj = soapObject.getProperty("labelXSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelXSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelXSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("labelY"))
        {
            Object obj = soapObject.getProperty("labelY");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelY = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelY = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("labelYSpecified"))
        {
            Object obj = soapObject.getProperty("labelYSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelYSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                labelYSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("listLabelWidth"))
        {
            Object obj = soapObject.getProperty("listLabelWidth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                listLabelWidth = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                listLabelWidth = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("listLabelWidthSpecified"))
        {
            Object obj = soapObject.getProperty("listLabelWidthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                listLabelWidthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                listLabelWidthSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatory"))
        {
            Object obj = soapObject.getProperty("mandatory");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatory = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatory = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mandatorySpecified"))
        {
            Object obj = soapObject.getProperty("mandatorySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mandatorySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mandatorySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("readOnly"))
        {
            Object obj = soapObject.getProperty("readOnly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                readOnly = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                readOnly = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("readOnlySpecified"))
        {
            Object obj = soapObject.getProperty("readOnlySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                readOnlySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                readOnlySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("selectRSNColumnName"))
        {
            Object obj = soapObject.getProperty("selectRSNColumnName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                selectRSNColumnName = j.toString();
            }else if (obj!= null && obj instanceof String){
                selectRSNColumnName = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("validFreeFormColumnValues"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("validFreeFormColumnValues");
            validFreeFormColumnValues = new VectorwsValidFreeFormColumnValue(j);
        }
        if (soapObject.hasProperty("valueBackground"))
        {
            Object obj = soapObject.getProperty("valueBackground");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueBackground = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueBackground = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueBackgroundSpecified"))
        {
            Object obj = soapObject.getProperty("valueBackgroundSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueBackgroundSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueBackgroundSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueFontColour"))
        {
            Object obj = soapObject.getProperty("valueFontColour");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontColour = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueFontColour = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueFontColourSpecified"))
        {
            Object obj = soapObject.getProperty("valueFontColourSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontColourSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueFontColourSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueFontName"))
        {
            Object obj = soapObject.getProperty("valueFontName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontName = j.toString();
            }else if (obj!= null && obj instanceof String){
                valueFontName = (String) obj;
            }
        }
        if (soapObject.hasProperty("valueFontSize"))
        {
            Object obj = soapObject.getProperty("valueFontSize");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontSize = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueFontSize = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueFontSizeSpecified"))
        {
            Object obj = soapObject.getProperty("valueFontSizeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontSizeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueFontSizeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueFontWeight"))
        {
            Object obj = soapObject.getProperty("valueFontWeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueFontWeight = j.toString();
            }else if (obj!= null && obj instanceof String){
                valueFontWeight = (String) obj;
            }
        }
        if (soapObject.hasProperty("valueHeight"))
        {
            Object obj = soapObject.getProperty("valueHeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueHeight = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueHeight = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueHeightSpecified"))
        {
            Object obj = soapObject.getProperty("valueHeightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueHeightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueHeightSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueHtmlClass"))
        {
            Object obj = soapObject.getProperty("valueHtmlClass");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueHtmlClassField = j.toString();
            }else if (obj!= null && obj instanceof String){
                valueHtmlClassField = (String) obj;
            }
        }
        if (soapObject.hasProperty("valueStyle"))
        {
            Object obj = soapObject.getProperty("valueStyle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueStyle = j.toString();
            }else if (obj!= null && obj instanceof String){
                valueStyle = (String) obj;
            }
        }
        if (soapObject.hasProperty("valueWidth"))
        {
            Object obj = soapObject.getProperty("valueWidth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueWidth = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueWidth = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueWidthSpecified"))
        {
            Object obj = soapObject.getProperty("valueWidthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueWidthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueWidthSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueX"))
        {
            Object obj = soapObject.getProperty("valueX");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueX = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueX = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueXSpecified"))
        {
            Object obj = soapObject.getProperty("valueXSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueXSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueXSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("valueY"))
        {
            Object obj = soapObject.getProperty("valueY");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueY = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                valueY = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("valueYSpecified"))
        {
            Object obj = soapObject.getProperty("valueYSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                valueYSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueYSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return accessCode;
            case 1:
                return accessCodeSpecified;
            case 2:
                return columnExpression;
            case 3:
                return columnHide;
            case 4:
                return columnHideSpecified;
            case 5:
                return columnLabel;
            case 6:
                return columnName;
            case 7:
                return columnValidation;
            case 8:
                return defaultValue;
            case 9:
                return displayOrder;
            case 10:
                return displayOrderSpecified;
            case 11:
                return displayRows;
            case 12:
                return displayRowsSpecified;
            case 13:
                return displayType;
            case 14:
                return freeFormCode;
            case 15:
                return freeFormCodeSpecified;
            case 16:
                return labelBackground;
            case 17:
                return labelBackgroundSpecified;
            case 18:
                return labelFontColour;
            case 19:
                return labelFontColourSpecified;
            case 20:
                return labelFontName;
            case 21:
                return labelFontSize;
            case 22:
                return labelFontSizeSpecified;
            case 23:
                return labelFontWeight;
            case 24:
                return labelHeight;
            case 25:
                return labelHeightSpecified;
            case 26:
                return labelHtmlClassField;
            case 27:
                return labelStyle;
            case 28:
                return labelWidth;
            case 29:
                return labelWidthSpecified;
            case 30:
                return labelX;
            case 31:
                return labelXSpecified;
            case 32:
                return labelY;
            case 33:
                return labelYSpecified;
            case 34:
                return listLabelWidth;
            case 35:
                return listLabelWidthSpecified;
            case 36:
                return mandatory;
            case 37:
                return mandatorySpecified;
            case 38:
                return readOnly;
            case 39:
                return readOnlySpecified;
            case 40:
                return selectRSNColumnName;
            case 41:
                return stampDate;
            case 42:
                return stampDateSpecified;
            case 43:
                return stampUser;
            case 44:
                return validFreeFormColumnValues;
            case 45:
                return valueBackground;
            case 46:
                return valueBackgroundSpecified;
            case 47:
                return valueFontColour;
            case 48:
                return valueFontColourSpecified;
            case 49:
                return valueFontName;
            case 50:
                return valueFontSize;
            case 51:
                return valueFontSizeSpecified;
            case 52:
                return valueFontWeight;
            case 53:
                return valueHeight;
            case 54:
                return valueHeightSpecified;
            case 55:
                return valueHtmlClassField;
            case 56:
                return valueStyle;
            case 57:
                return valueWidth;
            case 58:
                return valueWidthSpecified;
            case 59:
                return valueX;
            case 60:
                return valueXSpecified;
            case 61:
                return valueY;
            case 62:
                return valueYSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 63;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "accessCode";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "accessCodeSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "columnExpression";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "columnHide";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "columnHideSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "columnLabel";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "columnName";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "columnValidation";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "defaultValue";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayRows";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayRowsSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayType";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "freeFormCode";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "freeFormCodeSpecified";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelBackground";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelBackgroundSpecified";
                break;
            case 18:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelFontColour";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelFontColourSpecified";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "labelFontName";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelFontSize";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelFontSizeSpecified";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "labelFontWeight";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelHeight";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelHeightSpecified";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "labelHtmlClass";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "labelStyle";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelWidth";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelWidthSpecified";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelX";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelXSpecified";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "labelY";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "labelYSpecified";
                break;
            case 34:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "listLabelWidth";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "listLabelWidthSpecified";
                break;
            case 36:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatory";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mandatorySpecified";
                break;
            case 38:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "readOnly";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "readOnlySpecified";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "selectRSNColumnName";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 42:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 44:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "validFreeFormColumnValues";
                break;
            case 45:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueBackground";
                break;
            case 46:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueBackgroundSpecified";
                break;
            case 47:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueFontColour";
                break;
            case 48:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueFontColourSpecified";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "valueFontName";
                break;
            case 50:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueFontSize";
                break;
            case 51:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueFontSizeSpecified";
                break;
            case 52:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "valueFontWeight";
                break;
            case 53:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueHeight";
                break;
            case 54:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueHeightSpecified";
                break;
            case 55:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "valueHtmlClass";
                break;
            case 56:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "valueStyle";
                break;
            case 57:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueWidth";
                break;
            case 58:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueWidthSpecified";
                break;
            case 59:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueX";
                break;
            case 60:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueXSpecified";
                break;
            case 61:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "valueY";
                break;
            case 62:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "valueYSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
