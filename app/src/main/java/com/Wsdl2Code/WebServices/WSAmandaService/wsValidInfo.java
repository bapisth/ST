package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.VectorwsValidInfoValue;
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsValidInfo implements KvmSerializable_ws {
    
    public String comments;
    public boolean conversionFlag;
    public boolean conversionFlagSpecified;
    public String displayFormat;
    public int infoCode;
    public boolean infoCodeSpecified;
    public String infoDesc;
    public String infoGroup;
    public String infoGroupCode;
    public int infoGroupDisplayOrder;
    public boolean infoGroupDisplayOrderSpecified;
    public String infoType;
    public int pickSelectCode;
    public boolean pickSelectCodeSpecified;
    public long statisticFolderInfo;
    public boolean statisticFolderInfoSpecified;
    public long statisticPeopleInfo;
    public boolean statisticPeopleInfoSpecified;
    public VectorwsValidInfoValue validInfoValues;
    public boolean webDisplayFlag;
    public boolean webDisplayFlagSpecified;
    public String webHelp;
    
    public wsValidInfo(){}
    
    public wsValidInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("conversionFlag"))
        {
            Object obj = soapObject.getProperty("conversionFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conversionFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conversionFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("conversionFlagSpecified"))
        {
            Object obj = soapObject.getProperty("conversionFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conversionFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conversionFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("displayFormat"))
        {
            Object obj = soapObject.getProperty("displayFormat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayFormat = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayFormat = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoCode"))
        {
            Object obj = soapObject.getProperty("infoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("infoCodeSpecified"))
        {
            Object obj = soapObject.getProperty("infoCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoDesc"))
        {
            Object obj = soapObject.getProperty("infoDesc");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoDesc = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoDesc = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroup"))
        {
            Object obj = soapObject.getProperty("infoGroup");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroup = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoGroup = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroupCode"))
        {
            Object obj = soapObject.getProperty("infoGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroupCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoGroupCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("infoGroupDisplayOrder"))
        {
            Object obj = soapObject.getProperty("infoGroupDisplayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroupDisplayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                infoGroupDisplayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("infoGroupDisplayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("infoGroupDisplayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoGroupDisplayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                infoGroupDisplayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("infoType"))
        {
            Object obj = soapObject.getProperty("infoType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                infoType = j.toString();
            }else if (obj!= null && obj instanceof String){
                infoType = (String) obj;
            }
        }
        if (soapObject.hasProperty("pickSelectCode"))
        {
            Object obj = soapObject.getProperty("pickSelectCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pickSelectCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                pickSelectCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("pickSelectCodeSpecified"))
        {
            Object obj = soapObject.getProperty("pickSelectCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pickSelectCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                pickSelectCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statisticFolderInfo"))
        {
            Object obj = soapObject.getProperty("statisticFolderInfo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statisticFolderInfo = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statisticFolderInfo = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statisticFolderInfoSpecified"))
        {
            Object obj = soapObject.getProperty("statisticFolderInfoSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statisticFolderInfoSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statisticFolderInfoSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("statisticPeopleInfo"))
        {
            Object obj = soapObject.getProperty("statisticPeopleInfo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statisticPeopleInfo = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                statisticPeopleInfo = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("statisticPeopleInfoSpecified"))
        {
            Object obj = soapObject.getProperty("statisticPeopleInfoSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                statisticPeopleInfoSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                statisticPeopleInfoSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("validInfoValues"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("validInfoValues");
            validInfoValues = new VectorwsValidInfoValue(j);
        }
        if (soapObject.hasProperty("webDisplayFlag"))
        {
            Object obj = soapObject.getProperty("webDisplayFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                webDisplayFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                webDisplayFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("webDisplayFlagSpecified"))
        {
            Object obj = soapObject.getProperty("webDisplayFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                webDisplayFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                webDisplayFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("webHelp"))
        {
            Object obj = soapObject.getProperty("webHelp");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                webHelp = j.toString();
            }else if (obj!= null && obj instanceof String){
                webHelp = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comments;
            case 1:
                return conversionFlag;
            case 2:
                return conversionFlagSpecified;
            case 3:
                return displayFormat;
            case 4:
                return infoCode;
            case 5:
                return infoCodeSpecified;
            case 6:
                return infoDesc;
            case 7:
                return infoGroup;
            case 8:
                return infoGroupCode;
            case 9:
                return infoGroupDisplayOrder;
            case 10:
                return infoGroupDisplayOrderSpecified;
            case 11:
                return infoType;
            case 12:
                return pickSelectCode;
            case 13:
                return pickSelectCodeSpecified;
            case 14:
                return statisticFolderInfo;
            case 15:
                return statisticFolderInfoSpecified;
            case 16:
                return statisticPeopleInfo;
            case 17:
                return statisticPeopleInfoSpecified;
            case 18:
                return validInfoValues;
            case 19:
                return webDisplayFlag;
            case 20:
                return webDisplayFlagSpecified;
            case 21:
                return webHelp;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 22;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conversionFlag";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conversionFlagSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "displayFormat";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoCode";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoCodeSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoDesc";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoGroup";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoGroupCode";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "infoGroupDisplayOrder";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "infoGroupDisplayOrderSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "infoType";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "pickSelectCode";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "pickSelectCodeSpecified";
                break;
            case 14:
                info.type = Long.class;
                info.name = "statisticFolderInfo";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statisticFolderInfoSpecified";
                break;
            case 16:
                info.type = Long.class;
                info.name = "statisticPeopleInfo";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "statisticPeopleInfoSpecified";
                break;
            case 18:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "validInfoValues";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "webDisplayFlag";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "webDisplayFlagSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "webHelp";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
