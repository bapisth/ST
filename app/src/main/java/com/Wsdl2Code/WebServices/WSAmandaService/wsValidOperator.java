package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsValidOperator implements KvmSerializable_ws {
    
    public int aND;
    public int bETWEEN;
    public int cLOSE_PARENTHESES;
    public int eNDS_WITH;
    public int eQUAL;
    public int eQUAL_IGNORE_CASE;
    public int gREATER_THAN;
    public int gREATER_THAN_EQUAL;
    public int iN;
    public int iS_NOT_NULL;
    public int iS_NULL;
    public int lESS_THAN;
    public int lESS_THAN_EQUAL;
    public int lIKE;
    public int nONE;
    public int nOT_EQUAL;
    public int oPEN_PARENTHESES;
    public int oR;
    public int sTARTS_WITH;
    
    public wsValidOperator(){}
    
    public wsValidOperator(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("AND"))
        {
            Object obj = soapObject.getProperty("AND");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aND = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                aND = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("BETWEEN"))
        {
            Object obj = soapObject.getProperty("BETWEEN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bETWEEN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                bETWEEN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CLOSE_PARENTHESES"))
        {
            Object obj = soapObject.getProperty("CLOSE_PARENTHESES");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                cLOSE_PARENTHESES = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                cLOSE_PARENTHESES = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ENDS_WITH"))
        {
            Object obj = soapObject.getProperty("ENDS_WITH");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                eNDS_WITH = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                eNDS_WITH = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("EQUAL"))
        {
            Object obj = soapObject.getProperty("EQUAL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                eQUAL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                eQUAL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("EQUAL_IGNORE_CASE"))
        {
            Object obj = soapObject.getProperty("EQUAL_IGNORE_CASE");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                eQUAL_IGNORE_CASE = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                eQUAL_IGNORE_CASE = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GREATER_THAN"))
        {
            Object obj = soapObject.getProperty("GREATER_THAN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gREATER_THAN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gREATER_THAN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GREATER_THAN_EQUAL"))
        {
            Object obj = soapObject.getProperty("GREATER_THAN_EQUAL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gREATER_THAN_EQUAL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                gREATER_THAN_EQUAL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IN"))
        {
            Object obj = soapObject.getProperty("IN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                iN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                iN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IS_NOT_NULL"))
        {
            Object obj = soapObject.getProperty("IS_NOT_NULL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                iS_NOT_NULL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                iS_NOT_NULL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IS_NULL"))
        {
            Object obj = soapObject.getProperty("IS_NULL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                iS_NULL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                iS_NULL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LESS_THAN"))
        {
            Object obj = soapObject.getProperty("LESS_THAN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lESS_THAN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lESS_THAN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LESS_THAN_EQUAL"))
        {
            Object obj = soapObject.getProperty("LESS_THAN_EQUAL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lESS_THAN_EQUAL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lESS_THAN_EQUAL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LIKE"))
        {
            Object obj = soapObject.getProperty("LIKE");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lIKE = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lIKE = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NONE"))
        {
            Object obj = soapObject.getProperty("NONE");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nONE = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                nONE = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NOT_EQUAL"))
        {
            Object obj = soapObject.getProperty("NOT_EQUAL");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nOT_EQUAL = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                nOT_EQUAL = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OPEN_PARENTHESES"))
        {
            Object obj = soapObject.getProperty("OPEN_PARENTHESES");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oPEN_PARENTHESES = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                oPEN_PARENTHESES = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OR"))
        {
            Object obj = soapObject.getProperty("OR");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oR = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                oR = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("STARTS_WITH"))
        {
            Object obj = soapObject.getProperty("STARTS_WITH");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sTARTS_WITH = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                sTARTS_WITH = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return aND;
            case 1:
                return bETWEEN;
            case 2:
                return cLOSE_PARENTHESES;
            case 3:
                return eNDS_WITH;
            case 4:
                return eQUAL;
            case 5:
                return eQUAL_IGNORE_CASE;
            case 6:
                return gREATER_THAN;
            case 7:
                return gREATER_THAN_EQUAL;
            case 8:
                return iN;
            case 9:
                return iS_NOT_NULL;
            case 10:
                return iS_NULL;
            case 11:
                return lESS_THAN;
            case 12:
                return lESS_THAN_EQUAL;
            case 13:
                return lIKE;
            case 14:
                return nONE;
            case 15:
                return nOT_EQUAL;
            case 16:
                return oPEN_PARENTHESES;
            case 17:
                return oR;
            case 18:
                return sTARTS_WITH;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 19;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AND";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BETWEEN";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CLOSE_PARENTHESES";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ENDS_WITH";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "EQUAL";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "EQUAL_IGNORE_CASE";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "GREATER_THAN";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "GREATER_THAN_EQUAL";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IN";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IS_NOT_NULL";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IS_NULL";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LESS_THAN";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LESS_THAN_EQUAL";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LIKE";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NONE";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NOT_EQUAL";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OPEN_PARENTHESES";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OR";
                break;
            case 18:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "STARTS_WITH";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
