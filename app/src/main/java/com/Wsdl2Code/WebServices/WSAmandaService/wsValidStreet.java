package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsValidStreet implements KvmSerializable_ws {
    
    public String comments;
    public int displayOrder;
    public boolean displayOrderSpecified;
    public String language;
    public boolean obsoletFlag;
    public boolean obsoletFlagSpecified;
    public String propCity;
    public String propStreet;
    public String propStreetDirection;
    public String propStreetPrefix;
    public String propStreetType;
    public int streetNumber;
    public boolean streetNumberSpecified;
    
    public wsValidStreet(){}
    
    public wsValidStreet(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("comments"))
        {
            Object obj = soapObject.getProperty("comments");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                comments = j.toString();
            }else if (obj!= null && obj instanceof String){
                comments = (String) obj;
            }
        }
        if (soapObject.hasProperty("displayOrder"))
        {
            Object obj = soapObject.getProperty("displayOrder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrder = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                displayOrder = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("displayOrderSpecified"))
        {
            Object obj = soapObject.getProperty("displayOrderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayOrderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                displayOrderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("language"))
        {
            Object obj = soapObject.getProperty("language");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                language = j.toString();
            }else if (obj!= null && obj instanceof String){
                language = (String) obj;
            }
        }
        if (soapObject.hasProperty("obsoletFlag"))
        {
            Object obj = soapObject.getProperty("obsoletFlag");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                obsoletFlag = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                obsoletFlag = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("obsoletFlagSpecified"))
        {
            Object obj = soapObject.getProperty("obsoletFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                obsoletFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                obsoletFlagSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("propCity"))
        {
            Object obj = soapObject.getProperty("propCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propCity = j.toString();
            }else if (obj!= null && obj instanceof String){
                propCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreet"))
        {
            Object obj = soapObject.getProperty("propStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetDirection"))
        {
            Object obj = soapObject.getProperty("propStreetDirection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetDirection = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetDirection = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetPrefix"))
        {
            Object obj = soapObject.getProperty("propStreetPrefix");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetPrefix = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetPrefix = (String) obj;
            }
        }
        if (soapObject.hasProperty("propStreetType"))
        {
            Object obj = soapObject.getProperty("propStreetType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                propStreetType = j.toString();
            }else if (obj!= null && obj instanceof String){
                propStreetType = (String) obj;
            }
        }
        if (soapObject.hasProperty("streetNumber"))
        {
            Object obj = soapObject.getProperty("streetNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                streetNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                streetNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("streetNumberSpecified"))
        {
            Object obj = soapObject.getProperty("streetNumberSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                streetNumberSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                streetNumberSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comments;
            case 1:
                return displayOrder;
            case 2:
                return displayOrderSpecified;
            case 3:
                return language;
            case 4:
                return obsoletFlag;
            case 5:
                return obsoletFlagSpecified;
            case 6:
                return propCity;
            case 7:
                return propStreet;
            case 8:
                return propStreetDirection;
            case 9:
                return propStreetPrefix;
            case 10:
                return propStreetType;
            case 11:
                return streetNumber;
            case 12:
                return streetNumberSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 13;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "comments";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "displayOrder";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "displayOrderSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "language";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "obsoletFlag";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "obsoletFlagSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propCity";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreet";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetDirection";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetPrefix";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "propStreetType";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "streetNumber";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "streetNumberSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
