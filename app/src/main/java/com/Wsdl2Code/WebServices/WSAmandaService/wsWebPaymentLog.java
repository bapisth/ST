package com.Wsdl2Code.WebServices.WSAmandaService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 1/24/2016 9:16:23 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.WSAmandaService.KvmSerializable_ws;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class wsWebPaymentLog implements KvmSerializable_ws {
    
    public String feeRSNList;
    public String folderRSNList;
    public int groupRSN;
    public boolean groupRSNSpecified;
    public String lid;
    public int logRSN;
    public int peopleRSN;
    public boolean peopleRSNSpecified;
    public String responseDate;
    public boolean responseDateSpecified;
    public String responseStatus;
    public String responseString;
    public String sendDate;
    public boolean sendDateSpecified;
    public String stampDate;
    public boolean stampDateSpecified;
    public String stampUser;
    public String token;
    public double totalAmount;
    public boolean totalAmountSpecified;
    
    public wsWebPaymentLog(){}
    
    public wsWebPaymentLog(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("feeRSNList"))
        {
            Object obj = soapObject.getProperty("feeRSNList");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                feeRSNList = j.toString();
            }else if (obj!= null && obj instanceof String){
                feeRSNList = (String) obj;
            }
        }
        if (soapObject.hasProperty("folderRSNList"))
        {
            Object obj = soapObject.getProperty("folderRSNList");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                folderRSNList = j.toString();
            }else if (obj!= null && obj instanceof String){
                folderRSNList = (String) obj;
            }
        }
        if (soapObject.hasProperty("groupRSN"))
        {
            Object obj = soapObject.getProperty("groupRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                groupRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("groupRSNSpecified"))
        {
            Object obj = soapObject.getProperty("groupRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                groupRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                groupRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("lid"))
        {
            Object obj = soapObject.getProperty("lid");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lid = j.toString();
            }else if (obj!= null && obj instanceof String){
                lid = (String) obj;
            }
        }
        if (soapObject.hasProperty("logRSN"))
        {
            Object obj = soapObject.getProperty("logRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                logRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                logRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSN"))
        {
            Object obj = soapObject.getProperty("peopleRSN");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSN = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                peopleRSN = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("peopleRSNSpecified"))
        {
            Object obj = soapObject.getProperty("peopleRSNSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                peopleRSNSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                peopleRSNSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("responseDate"))
        {
            Object obj = soapObject.getProperty("responseDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("responseDateSpecified"))
        {
            Object obj = soapObject.getProperty("responseDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                responseDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("responseStatus"))
        {
            Object obj = soapObject.getProperty("responseStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseStatus = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseStatus = (String) obj;
            }
        }
        if (soapObject.hasProperty("responseString"))
        {
            Object obj = soapObject.getProperty("responseString");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseString = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseString = (String) obj;
            }
        }
        if (soapObject.hasProperty("sendDate"))
        {
            Object obj = soapObject.getProperty("sendDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sendDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                sendDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("sendDateSpecified"))
        {
            Object obj = soapObject.getProperty("sendDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sendDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sendDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampDate"))
        {
            Object obj = soapObject.getProperty("stampDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("stampDateSpecified"))
        {
            Object obj = soapObject.getProperty("stampDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                stampDateSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("stampUser"))
        {
            Object obj = soapObject.getProperty("stampUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stampUser = j.toString();
            }else if (obj!= null && obj instanceof String){
                stampUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("token"))
        {
            Object obj = soapObject.getProperty("token");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                token = j.toString();
            }else if (obj!= null && obj instanceof String){
                token = (String) obj;
            }
        }
        if (soapObject.hasProperty("totalAmount"))
        {
            Object obj = soapObject.getProperty("totalAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalAmountSpecified"))
        {
            Object obj = soapObject.getProperty("totalAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalAmountSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return feeRSNList;
            case 1:
                return folderRSNList;
            case 2:
                return groupRSN;
            case 3:
                return groupRSNSpecified;
            case 4:
                return lid;
            case 5:
                return logRSN;
            case 6:
                return peopleRSN;
            case 7:
                return peopleRSNSpecified;
            case 8:
                return responseDate;
            case 9:
                return responseDateSpecified;
            case 10:
                return responseStatus;
            case 11:
                return responseString;
            case 12:
                return sendDate;
            case 13:
                return sendDateSpecified;
            case 14:
                return stampDate;
            case 15:
                return stampDateSpecified;
            case 16:
                return stampUser;
            case 17:
                return token;
            case 18:
                return totalAmount;
            case 19:
                return totalAmountSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 20;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "feeRSNList";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "folderRSNList";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "groupRSN";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "groupRSNSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "lid";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "logRSN";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "peopleRSN";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "peopleRSNSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseDate";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "responseDateSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseStatus";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseString";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "sendDate";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sendDateSpecified";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampDate";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "stampDateSpecified";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "stampUser";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "token";
                break;
            case 18:
                info.type = Double.class;
                info.name = "totalAmount";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalAmountSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
